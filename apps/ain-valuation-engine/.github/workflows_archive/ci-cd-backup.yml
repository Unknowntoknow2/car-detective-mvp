---
name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint Python
        run: flake8 . --exclude=venv,__pycache__ --max-line-length=120

      - name: Run Python tests
        run: pytest --maxfail=1 --disable-warnings

      - name: Coverage Report (Python)
        run: pytest --cov=. --cov-report=xml

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: false
          flags: python
          name: python-coverage
          verbose: true
        continue-on-error: true
        if: ${{ secrets.CODECOV_TOKEN != '' }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Node.js dependencies
        run: npm ci

      - name: Lint Node.js code
        run: npx eslint src --ext .ts,.tsx,.js,.jsx

      - name: Run Node.js tests
        run: npm test

      - name: Upload Node.js Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false
          flags: javascript
          name: javascript-coverage
          verbose: true
        continue-on-error: true
        if: ${{ secrets.CODECOV_TOKEN != '' }}

      - name: Build Docker image
        run: docker build -t ain-valuation-engine .

      - name: Security scan (npm audit)
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Upload Node.js coverage report
        uses: actions/upload-artifact@v4
        with:
          name: nodejs-coverage-report
          path: coverage/
        continue-on-error: true

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

      - name: Build and push Docker image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          docker build -t ain-valuation-engine:latest .
          docker tag ain-valuation-engine:latest ${DOCKER_USERNAME}/ain-valuation-engine:latest
          docker push ${DOCKER_USERNAME}/ain-valuation-engine:latest

      - name: Deploy to production
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          # Add deployment commands here
          echo "Deploying to production..."
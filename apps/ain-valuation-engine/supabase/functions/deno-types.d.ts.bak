// Deno global types for Supabase Edge Functions
declare namespace Deno {
  interface Env {
    get(key: string): string | undefined;
    set(key: string, value: string): void;
    has(key: string): boolean;
    delete(key: string): boolean;
    toObject(): Record<string, string>;
  }

  interface ConnInfo {
    localAddr: {
      hostname: string;
      port: number;
      transport: string;
    };
    remoteAddr: {
      hostname: string;
      port: number;
      transport: string;
    };
  }

  export const env: Env;
}

// HTTP server types
// HTTP server (support multiple std versions used across functions)
declare module "https://deno.land/std@*/http/server.ts" {
  export function serve(
    handler: (request: Request, connInfo?: Deno.ConnInfo) => Response | Promise<Response>,
    options?: { port?: number; hostname?: string; signal?: AbortSignal }
  ): void;
}

// Deno assert (for tests)
declare module "https://deno.land/std@*/assert/mod.ts" {
  export function assertEquals(actual: unknown, expected: unknown, msg?: string): void;
}

// Supabase client types
declare module "https://esm.sh/@supabase/supabase-js@2.39.7" {
  export interface SupabaseClient {
    from(table: string): any;
    auth: any;
    storage: any;
  }
  
  export function createClient(url: string, key: string): SupabaseClient;
}

// Global serve function
declare function serve(
  handler: (
    request: Request,
    connInfo?: Deno.ConnInfo
  ) => Response | Promise<Response>,
  options?: {
    port?: number;
    hostname?: string;
    signal?: AbortSignal;
  }
): void;

// Make serve available globally
declare global {
  const serve: typeof serve;
  namespace Deno {
    const env: Deno.Env;
  }
}

export {};

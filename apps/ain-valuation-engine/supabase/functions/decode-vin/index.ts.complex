// @ts-ignore: Deno std library import
import { serve } from "https://deno.land/std@0.208.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

console.log("ðŸš— AIN VIN Decoder Edge Function - PR B Test Version");

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "POST, GET, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type",
  "Access-Control-Max-Age": "86400",
};

const supabase = createClient(
  Deno.env.get("SUPABASE_URL") ?? "http://127.0.0.1:54321",
  Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") ?? "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU"
);

// Helper functions for vPIC data normalization
function toBool(s: string | null): boolean | null {
  if (!s || s.trim() === '' || s.toLowerCase() === 'na' || s.toLowerCase() === 'not applicable') {
    return null;
  }
  const normalized = s.toLowerCase().trim();
  if (normalized === 'yes' || normalized === 'standard' || normalized === 'true') {
    return true;
  }
  if (normalized === 'no' || normalized === 'false') {
    return false;
  }
  return null;
}

function parseAirbagFlag(s: string | null): boolean | null {
  if (!s || s.trim() === '' || s.toLowerCase() === 'na' || s.toLowerCase() === 'not applicable') {
    return null;
  }
  return s.trim().length > 0;
}

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }

  try {
    const body = await req.json();
    const vin = body.vin;

    if (!vin) {
      return new Response(JSON.stringify({ error: "VIN required" }), {
        status: 400,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }

    // Test with real vPIC API call for known VIN
    const vpicResponse = await fetch(`https://vpic.nhtsa.dot.gov/api/vehicles/decodevin/${vin}?format=json`);
    const vpicData = await vpicResponse.json();
    
    if (!vpicData.Results || vpicData.Results.length === 0) {
      return new Response(JSON.stringify({ error: "No data found for VIN" }), {
        status: 404,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }

    const vpicResult = vpicData.Results[0];

    // Map safety equipment
    const safetyEquipment = {
      abs: toBool(vpicResult.ABS),
      esc: toBool(vpicResult.ESC),
      traction_control: toBool(vpicResult.TractionControl),
      dynamic_brake_support: toBool(vpicResult.DynamicBrakeSupport),
      adaptive_cruise_control: toBool(vpicResult.AdaptiveCruiseControl),
      forward_collision_warning: toBool(vpicResult.ForwardCollisionWarning),
      lane_departure_warning: toBool(vpicResult.LaneDepartureWarning),
      blind_spot_monitoring: toBool(vpicResult.BlindSpotMon)
    };

    // Map airbags
    const airbags = {
      front: parseAirbagFlag(vpicResult.AirBagLocFront),
      side: parseAirbagFlag(vpicResult.AirBagLocSide),
      curtain: parseAirbagFlag(vpicResult.AirBagLocCurtain),
      knee: parseAirbagFlag(vpicResult.AirBagLocKnee),
      pretensioner: toBool(vpicResult.Pretensioner)
    };

    // Map lighting
    const lighting = {
      daytime_running_lights: toBool(vpicResult.DaytimeRunningLight),
      lower_beam_source: vpicResult.LowerBeamHeadlampLightSource || null,
      automatic_beam_switching: toBool(vpicResult.SemiautomaticHeadlampBeamSwitching)
    };

    // Upsert to database using RPC
    const { data: result, error } = await supabase.rpc('rpc_upsert_specs', {
      vin_param: vin,
      make_param: vpicResult.Make,
      model_param: vpicResult.Model,
      year_param: vpicResult.ModelYear ? parseInt(vpicResult.ModelYear) : null,
      trim_param: vpicResult.Trim,
      body_class_param: vpicResult.BodyClass,
      engine_cylinders_param: vpicResult.EngineCylinders ? parseInt(vpicResult.EngineCylinders) : null,
      displacement_cc_param: vpicResult.DisplacementCC ? parseFloat(vpicResult.DisplacementCC) : null,
      fuel_type_primary_param: vpicResult.FuelTypePrimary,
      drive_type_param: vpicResult.DriveType,
      transmission_style_param: vpicResult.TransmissionStyle,
      manufacturer_param: vpicResult.Manufacturer,
      safety_equipment_param: safetyEquipment,
      airbags_param: airbags,
      lighting_param: lighting
    });

    if (error) {
      console.error("Database error:", error);
      return new Response(JSON.stringify({ error: "Database error", details: error }), {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }

    return new Response(JSON.stringify({
      success: true,
      vin: vin,
      vehicle_data: {
        make: vpicResult.Make,
        model: vpicResult.Model,
        year: vpicResult.ModelYear ? parseInt(vpicResult.ModelYear) : null,
        trim: vpicResult.Trim,
        body_class: vpicResult.BodyClass
      },
      safety_equipment: safetyEquipment,
      airbags: airbags,
      lighting: lighting,
      api_version: "v1.3-enterprise-safety"
    }), {
      status: 200,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });

  } catch (error) {
    console.error("Error:", error);
    return new Response(JSON.stringify({ 
      error: "Internal error", 
      details: error.message,
      stack: error.stack 
    }), {
      status: 500,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  }
});

serve(async (req) => {
  const correlationId = req.headers.get("X-Correlation-Id") || req.headers.get("X-Request-Id") || crypto.randomUUID();
  const sessionId = req.headers.get("X-Session-Id") || null;
  const startTime = Date.now();
  
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }

  try {
    let vin: string;
    let route = "decode";

    // Support both POST /decode-vin and GET /vehicle-profile?vin=
    if (req.method === "GET") {
      const url = new URL(req.url);
      if (url.pathname.includes("/vehicle-profile")) {
        route = "profile";
        vin = url.searchParams.get("vin") || "";
      } else {
        vin = url.searchParams.get("vin") || "";
      }
    } else if (req.method === "POST") {
      if (req.headers.get("Content-Type") !== "application/json") {
        const error = {
          error: "INVALID_CONTENT_TYPE",
          message: "Content-Type must be application/json",
          correlation_id: correlationId
        };
        
        // Log failed request
        await supabase.rpc('log_vin_request', {
          vin_input: "",
          success: false,
          error_msg: error.message,
          correlation_id_input: correlationId,
          session_id_input: sessionId,
          response_time_ms: Date.now() - startTime
        });
        
        return new Response(JSON.stringify(error), {
          status: 400,
          headers: { ...corsHeaders, "Content-Type": "application/json", "X-Correlation-Id": correlationId },
        });
      }
      
      const body = await req.json();
      vin = body.vin || "";
    } else {
      return new Response(JSON.stringify({ 
        error: "METHOD_NOT_ALLOWED",
        message: "Only POST and GET methods are allowed",
        correlation_id: correlationId
      }), {
        status: 405,
        headers: { ...corsHeaders, "Content-Type": "application/json", "X-Correlation-Id": correlationId },
      });
    }

    // Validate VIN presence
    if (!vin || typeof vin !== "string") {
      const error = {
        error: "MISSING_VIN",
        message: "VIN parameter is required",
        correlation_id: correlationId
      };
      
      // Log failed request
      await supabase.rpc('log_vin_request', {
        vin_input: "",
        success: false,
        error_msg: error.message,
        correlation_id_input: correlationId,
        session_id_input: sessionId,
        response_time_ms: Date.now() - startTime
      });
      
      return new Response(JSON.stringify(error), {
        status: 400,
        headers: { ...corsHeaders, "Content-Type": "application/json", "X-Correlation-Id": correlationId },
      });
    }

    // Normalize VIN
    const normalizedVin = vin.trim().toUpperCase();

    // Validate VIN format first
    const { data: validationResult, error: validationError } = await supabase.rpc('validate_vin_iso3779', {
      vin_input: normalizedVin
    });

    if (validationError || !validationResult) {
      const error = {
        error: "Invalid VIN check digit. VIN does not conform to ISO 3779 standard.",
        success: false,
        correlation_id: correlationId
      };
      
      await supabase.rpc('log_vin_request', {
        vin_input: normalizedVin,
        success: false,
        error_msg: error.error,
        correlation_id_input: correlationId,
        session_id_input: sessionId,
        response_time_ms: Date.now() - startTime
      });

      return new Response(JSON.stringify(error), {
        status: 422,
        headers: { ...corsHeaders, "Content-Type": "application/json", "X-Correlation-Id": correlationId },
      });
    }

    // Check cache first
    const { data: cachedData } = await supabase.rpc('get_cached_vin_data', {
      vin_input: normalizedVin
    });

    let vpicData: any;
    let cacheHit = false;

    if (cachedData && cachedData.cached_at && 
        new Date().getTime() - new Date(cachedData.cached_at).getTime() < 86400000) { // 24 hours
      vpicData = cachedData.data;
      cacheHit = true;
      console.log(`Cache hit for VIN ${normalizedVin}`);
    } else {
      console.log(`Fetching fresh data for VIN ${normalizedVin}`);
      try {
        vpicData = await fetchVpicData(normalizedVin);
      } catch (error) {
        console.error("vPIC API error:", error);
        
        await supabase.rpc('log_vin_request', {
          vin_input: normalizedVin,
          success: false,
          error_msg: `vPIC API error: ${error.message}`,
          correlation_id_input: correlationId,
          session_id_input: sessionId,
          response_time_ms: Date.now() - startTime
        });
        
        return new Response(JSON.stringify({ 
          error: "VIN_DECODE_FAILED",
          message: `Unable to decode VIN: ${error.message}`,
          correlation_id: correlationId
        }), {
          status: 500,
          headers: { ...corsHeaders, "Content-Type": "application/json", "X-Correlation-Id": correlationId },
        });
      }
    }

    // Extract basic vehicle data
    const vehicleData = {
      vin: normalizedVin,
      make: vpicData.Make || null,
      model: vpicData.Model || null,
      year: vpicData.ModelYear ? parseInt(vpicData.ModelYear) : null,
      trim: vpicData.Trim || null,
      body_class: vpicData.BodyClass || null,
      engine_cylinders: vpicData.EngineCylinders ? parseInt(vpicData.EngineCylinders) : null,
      displacement_cc: vpicData.DisplacementCC ? parseFloat(vpicData.DisplacementCC) : null,
      fuel_type_primary: vpicData.FuelTypePrimary || null,
      drive_type: vpicData.DriveType || null,
      transmission_style: vpicData.TransmissionStyle || null,
      manufacturer: vpicData.Manufacturer || null,
      plant_country: vpicData.PlantCountry || null,
      plant_state: vpicData.PlantState || null,
      vehicle_type: vpicData.VehicleType || null,
      gvwr: vpicData.GVWR ? parseFloat(vpicData.GVWR) : null,
      doors: vpicData.Doors ? parseInt(vpicData.Doors) : null,
      series: vpicData.Series || null
    };

    // Map safety equipment data
    const safetyEquipment = mapSafetyEquipment(vpicData);
    const airbags = mapAirbags(vpicData);
    const lighting = mapLighting(vpicData);

    // Upsert vehicle data with safety equipment using RPC
    const { data: upsertResult, error: upsertError } = await supabase.rpc('rpc_upsert_specs', {
      vin_param: normalizedVin,
      make_param: vehicleData.make,
      model_param: vehicleData.model,
      year_param: vehicleData.year,
      trim_param: vehicleData.trim,
      body_class_param: vehicleData.body_class,
      engine_cylinders_param: vehicleData.engine_cylinders,
      displacement_cc_param: vehicleData.displacement_cc,
      fuel_type_primary_param: vehicleData.fuel_type_primary,
      drive_type_param: vehicleData.drive_type,
      transmission_style_param: vehicleData.transmission_style,
      manufacturer_param: vehicleData.manufacturer,
      plant_country_param: vehicleData.plant_country,
      plant_state_param: vehicleData.plant_state,
      vehicle_type_param: vehicleData.vehicle_type,
      gvwr_param: vehicleData.gvwr,
      doors_param: vehicleData.doors,
      series_param: vehicleData.series,
      safety_equipment_param: safetyEquipment,
      airbags_param: airbags,
      lighting_param: lighting
    });

    const responseTime = Date.now() - startTime;

    if (upsertError) {
      console.error("Database upsert error:", upsertError);
      
      await supabase.rpc('log_vin_request', {
        vin_input: normalizedVin,
        success: false,
        error_msg: `Database error: ${upsertError.message}`,
        correlation_id_input: correlationId,
        session_id_input: sessionId,
        response_time_ms: responseTime
      });
      
      return new Response(JSON.stringify({ 
        error: "DATABASE_ERROR",
        message: "Failed to save vehicle data",
        correlation_id: correlationId
      }), {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json", "X-Correlation-Id": correlationId },
      });
    }

    // Cache the vPIC response if it's fresh data
    if (!cacheHit) {
      await supabase.rpc('cache_vin_data', {
        vin_input: normalizedVin,
        data_input: vpicData
      });
    }

    // Log successful request
    await supabase.rpc('log_vin_request', {
      vin_input: normalizedVin,
      success: true,
      sources: cacheHit ? ['cache', 'database'] : ['vpic_api', 'database'],
      cache_hit: cacheHit,
      correlation_id_input: correlationId,
      session_id_input: sessionId,
      response_time_ms: responseTime
    });

    // Prepare response data
    const responseData = {
      success: true,
      vin: normalizedVin,
      vehicle_data: vehicleData,
      safety_equipment: safetyEquipment,
      airbags: airbags,
      lighting: lighting,
      cache_hit: cacheHit,
      response_time_ms: responseTime,
      correlation_id: correlationId,
      api_version: "v1.3-enterprise-safety",
      timestamp: new Date().toISOString()
    };

    // Remove cache metadata for external responses unless profile route
    if (route !== "profile") {
      const { cache_hit, ...responseWithoutCache } = responseData;
      return new Response(JSON.stringify(responseWithoutCache), {
        status: 200,
        headers: { 
          ...corsHeaders, 
          "Content-Type": "application/json", 
          "X-Correlation-Id": correlationId,
          "X-Response-Time": responseTime.toString(),
          "X-Cache-Hit": cacheHit.toString(),
          "X-API-Version": "v1.3-enterprise-safety"
        },
      });
    }

    return new Response(JSON.stringify(responseData), {
      status: 200,
      headers: { 
        ...corsHeaders, 
        "Content-Type": "application/json", 
        "X-Correlation-Id": correlationId,
        "X-Response-Time": responseTime.toString(),
        "X-Cache-Hit": cacheHit.toString(),
        "X-API-Version": "v1.3-enterprise-safety"
      },
    });

  } catch (error) {
    const responseTime = Date.now() - startTime;
    
    console.error("Unexpected error:", error);
    
    // Log failed request
    try {
      await supabase.rpc('log_vin_request', {
        vin_input: "",
        success: false,
        error_msg: error.message,
        correlation_id_input: correlationId,
        session_id_input: sessionId,
        response_time_ms: responseTime
      });
    } catch (logError) {
      console.error("Failed to log error:", logError);
    }
    
    return new Response(JSON.stringify({ 
      error: "INTERNAL_SERVER_ERROR",
      message: "An unexpected error occurred",
      correlation_id: correlationId
    }), {
      status: 500,
      headers: { ...corsHeaders, "Content-Type": "application/json", "X-Correlation-Id": correlationId },
    });
  }
});

import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';
import { PlateLookupInfo } from '@/types/lookup';
import { DecodedVehicleInfo } from '@/types/vehicle';
import { format } from 'date-fns';

export async function generateVehicleReport(vehicleInfo: PlateLookupInfo | DecodedVehicleInfo) {
  // Create a new PDF document
  const doc = await PDFDocument.create();
  const page = doc.addPage([600, 800]);
  const { height } = page.getSize();

  // Embed the standard font
  const font = await doc.embedFont(StandardFonts.HelveticaBold);
  const regularFont = await doc.embedFont(StandardFonts.Helvetica);

  // Set initial cursor position
  let currentY = height - 50;
  const leftMargin = 50;

  // Add header
  page.drawText('Vehicle Information Report', {
    x: leftMargin,
    y: currentY,
    size: 24,
    font,
    color: rgb(0.1, 0.1, 0.1),
  });

  // Add date
  currentY -= 30;
  page.drawText(`Generated on: ${format(new Date(), 'PPpp')}`, {
    x: leftMargin,
    y: currentY,
    size: 12,
    font: regularFont,
    color: rgb(0.3, 0.3, 0.3),
  });

  // Add vehicle details
  currentY -= 50;

  // Helper function to add a field
  const addField = (label: string, value: string | number | null) => {
    const displayValue = value ?? 'Not Available';
    
    page.drawText(`${label}:`, {
      x: leftMargin,
      y: currentY,
      size: 12,
      font,
      color: rgb(0.3, 0.3, 0.3),
    });

    page.drawText(`${displayValue}`, {
      x: leftMargin + 150,
      y: currentY,
      size: 12,
      font: regularFont,
      color: rgb(0, 0, 0),
    });

    currentY -= 25;
  };

  // Add vehicle information fields
  if ('vin' in vehicleInfo) {
    // VIN Lookup specific fields
    addField('VIN', vehicleInfo.vin);
    addField('Make', vehicleInfo.make);
    addField('Model', vehicleInfo.model);
    addField('Year', vehicleInfo.year);
    addField('Trim', vehicleInfo.trim);
    addField('Engine', vehicleInfo.engine);
    addField('Transmission', vehicleInfo.transmission);
    addField('Drivetrain', vehicleInfo.drivetrain);
    addField('Body Type', vehicleInfo.bodyType);
  } else {
    // Plate Lookup specific fields
    addField('License Plate', vehicleInfo.plate);
    addField('State', vehicleInfo.state);
    addField('Make', vehicleInfo.make);
    addField('Model', vehicleInfo.model);
    addField('Year', vehicleInfo.year);
    addField('Color', vehicleInfo.color);
  }

  // Add watermark
  page.drawText('Generated by Car Price Perfector (Beta)', {
    x: 50,
    y: 30,
    size: 10,
    font: regularFont,
    color: rgb(0.7, 0.7, 0.7),
  });

  // Save the PDF
  const pdfBytes = await doc.save();
  return pdfBytes;
}

export const downloadPdf = async (vehicleInfo: PlateLookupInfo | DecodedVehicleInfo) => {
  const pdfBytes = await generateVehicleReport(vehicleInfo);
  
  // Create a blob from the PDF bytes
  const blob = new Blob([pdfBytes], { type: 'application/pdf' });
  
  // Create a URL for the blob
  const url = URL.createObjectURL(blob);
  
  // Create a temporary link element
  const link = document.createElement('a');
  link.href = url;
  link.download = `vehicle-report-${new Date().getTime()}.pdf`;
  
  // Trigger download
  document.body.appendChild(link);
  link.click();
  
  // Clean up
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

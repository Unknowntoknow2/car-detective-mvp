
import { rgb } from 'pdf-lib';
import { SectionParams } from '../types';

/**
 * Helper function to create a proper rotation object
 * @param angle The angle in degrees
 * @returns A properly formatted rotation object
 */
function degrees(angle: number) {
  return { type: 'degrees' as const, angle };
}

/**
 * Draws the footer section of the PDF
 * @param params The section parameters
 * @param includeTimestamp Whether to include the timestamp
 * @param pageNumber The current page number
 * @param totalPages The total number of pages
 * @param includeWatermark Whether to include a watermark
 */
export function drawFooterSection(
  params: SectionParams,
  includeTimestamp: boolean = true,
  pageNumber: number = 1,
  totalPages: number = 1,
  includeWatermark: boolean = false
): void {
  const { page, margin, width, height, regularFont, boldFont } = params;
  const footerY = 30;
  
  // Draw horizontal line
  page.drawLine({
    start: { x: margin, y: footerY + 15 },
    end: { x: width - margin, y: footerY + 15 },
    thickness: 1,
    color: rgb(0.8, 0.8, 0.8),
  });
  
  // Draw footer text - left side (disclaimer)
  const disclaimerText = "This report is generated by Car Detective™ using publicly available and AI-enhanced data. It is intended for informational purposes only and should not be considered a binding appraisal.";
  
  page.drawText(disclaimerText, {
    x: margin,
    y: footerY,
    size: 7,
    font: regularFont,
    color: rgb(0.5, 0.5, 0.5),
    maxWidth: width * 0.6
  });
  
  // Draw contact & brand info - center
  const contactText = "Car Detective™ | www.cardetective.ai | support@cardetective.ai";
  const contactTextWidth = regularFont.widthOfTextAtSize(contactText, 8);
  
  page.drawText(contactText, {
    x: (width - contactTextWidth) / 2,
    y: footerY + 20,
    size: 8,
    font: regularFont,
    color: rgb(0.3, 0.3, 0.3)
  });
  
  // Draw timestamp if requested
  if (includeTimestamp) {
    const now = new Date();
    const dateStr = now.toLocaleDateString();
    const timeStr = now.toLocaleTimeString();
    const timestampText = `Generated on ${dateStr} at ${timeStr}`;
    
    page.drawText(timestampText, {
      x: margin,
      y: footerY + 20,
      size: 8,
      font: regularFont,
      color: rgb(0.5, 0.5, 0.5)
    });
  }
  
  // Draw page number - right side
  const pageText = `Page ${pageNumber} of ${totalPages}`;
  
  page.drawText(pageText, {
    x: width - margin - regularFont.widthOfTextAtSize(pageText, 8),
    y: footerY,
    size: 8,
    font: regularFont,
    color: rgb(0.5, 0.5, 0.5)
  });
  
  // Add watermark if requested
  if (includeWatermark) {
    // Save graphics state before applying transformations
    // In pdf-lib we'd need to use transformation matrices
    // This is a simplified version
    page.drawText('CAR DETECTIVE', {
      x: 150,
      y: 300,
      size: 60,
      font: boldFont,
      color: rgb(0.9, 0.9, 0.9),
      opacity: 0.08,
      rotate: degrees(-30)
    });
  }
}

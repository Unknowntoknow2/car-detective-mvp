src/hooks/usePremiumStatus.ts:29:      const isPremiumValuation = premiumIds.includes(id);
src/hooks/usePremiumStatus.ts:31:      setIsPremium(isPremiumValuation);
src/hooks/usePremiumStatus.ts:32:      console.log("Premium status check result:", isPremiumValuation);
src/hooks/usePremiumStatus.ts:34:      return isPremiumValuation;
src/hooks/usePremiumStatus.ts:52:      const isPremiumValuation = await checkPremiumStatus(id);
src/hooks/usePremiumStatus.ts:54:      if (isPremiumValuation) {
src/hooks/useCorrectedValuation.ts:2:import { runValuation } from '@/lib/ainClient';
src/hooks/useCorrectedValuation.ts:6:interface CorrectedValuationParams {
src/hooks/useCorrectedValuation.ts:18:interface CorrectedValuationResults {
src/hooks/useCorrectedValuation.ts:33:export function useCorrectedValuation() {
src/hooks/useCorrectedValuation.ts:35:  const [results, setResults] = useState<CorrectedValuationResults | null>(null);
src/hooks/useCorrectedValuation.ts:37:  const runCorrection = async (params: CorrectedValuationParams) => {
src/hooks/useCorrectedValuation.ts:40:      console.log('üîß [useCorrectedValuation] Starting corrected valuation via AIN API...');
src/hooks/useCorrectedValuation.ts:44:      const { data: ainResult, meta } = await runValuation({
src/hooks/useCorrectedValuation.ts:60:      const formattedResults: CorrectedValuationResults = {
src/hooks/useCorrectedValuation.ts:75:      setResults(formattedResults);
src/hooks/useCorrectedValuation.ts:76:      toast.success('Valuation corrected and updated successfully!');
src/hooks/useCorrectedValuation.ts:78:      return formattedResults;
src/hooks/useCorrectedValuation.ts:80:      console.error('‚ùå [useCorrectedValuation] Error:', error);
src/hooks/useDealerOfferActions.ts:4:import { notifyDealerOfAcceptedOffer } from '@/lib/notifications/UserValuationAlert';
src/integrations/supabase/auditLogClient.ts:79:export async function getValuationAuditHistory(vin: string): Promise<EnhancedAuditLog[]> {
src/hooks/useFollowUpDataLoader.ts:4:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/hooks/useFollowUpDataLoader.ts:6:interface UseFollowUpDataLoaderProps {
src/hooks/useFollowUpDataLoader.ts:8:  initialData?: Partial<FollowUpAnswers>;
src/hooks/useFollowUpDataLoader.ts:11:export function useFollowUpDataLoader({ vin, initialData }: UseFollowUpDataLoaderProps) {
src/hooks/useFollowUpDataLoader.ts:12:  const [formData, setFormData] = useState<FollowUpAnswers>({
src/hooks/useFollowUpDataLoader.ts:59:    const loadFollowUpData = async () => {
src/hooks/useFollowUpDataLoader.ts:66:        console.log('üìã Loading follow-up data for VIN:', vin);
src/hooks/useFollowUpDataLoader.ts:76:          console.log('üìã Found existing follow-up answers for VIN:', vin);
src/hooks/useFollowUpDataLoader.ts:78:          // Fix valuation_id linking: resolve by VIN if missing
src/hooks/useFollowUpDataLoader.ts:79:          let resolvedValuationId = existingAnswers.valuation_id;
src/hooks/useFollowUpDataLoader.ts:81:          if (!resolvedValuationId) {
src/hooks/useFollowUpDataLoader.ts:82:            console.log('üîó Resolving missing valuation_id for VIN:', vin);
src/hooks/useFollowUpDataLoader.ts:93:              resolvedValuationId = valuationData.id;
src/hooks/useFollowUpDataLoader.ts:94:              console.log('‚úÖ Resolved valuation_id:', resolvedValuationId, 'for VIN:', vin);
src/hooks/useFollowUpDataLoader.ts:99:                .update({ valuation_id: resolvedValuationId })
src/hooks/useFollowUpDataLoader.ts:102:              console.warn('‚ö†Ô∏è No valuation found for VIN during follow-up linking:', vin);
src/hooks/useFollowUpDataLoader.ts:109:            valuation_id: resolvedValuationId,
src/hooks/useFollowUpDataLoader.ts:120:          console.log('üìã No existing follow-up data found for VIN:', vin);
src/hooks/useFollowUpDataLoader.ts:151:    loadFollowUpData();
src/integrations/ai/serverClient.ts:53:  async generateValuationExplanation(
src/hooks/useValuationApi.ts:2:import { ValuationApiService, ValuationRequest, ValuationResult, SourceStatus } from '@/services/ValuationApiService';
src/hooks/useValuationApi.ts:5:export interface UseValuationApiReturn {
src/hooks/useValuationApi.ts:9:  result: ValuationResult | null;
src/hooks/useValuationApi.ts:14:  createValuation: (request: ValuationRequest) => Promise<string | null>;
src/hooks/useValuationApi.ts:16:  getResult: (requestId: string) => Promise<ValuationResult | null>;
src/hooks/useValuationApi.ts:18:  startFullValuation: (request: ValuationRequest) => Promise<ValuationResult | null>;
src/hooks/useValuationApi.ts:23: * React hook for AIN Valuation API integration
src/hooks/useValuationApi.ts:26:export function useValuationApi(): UseValuationApiReturn {
src/hooks/useValuationApi.ts:29:  const [result, setResult] = useState<ValuationResult | null>(null);
src/hooks/useValuationApi.ts:36:  const createValuation = useCallback(async (request: ValuationRequest): Promise<string | null> => {
src/hooks/useValuationApi.ts:41:      // Check for cached valuation first if VIN is provided
src/hooks/useValuationApi.ts:42:      if (request.vin && ValuationApiService.isValidVin(request.vin)) {
src/hooks/useValuationApi.ts:43:        const cached = await ValuationApiService.getCachedValuation(request.vin);
src/hooks/useValuationApi.ts:52:      const response = await ValuationApiService.createValuationRequest(request);
src/hooks/useValuationApi.ts:59:      toast.success('Valuation request created');
src/hooks/useValuationApi.ts:80:      const response = await ValuationApiService.triggerAggregation(requestId);
src/hooks/useValuationApi.ts:102:  const getResult = useCallback(async (requestId: string): Promise<ValuationResult | null> => {
src/hooks/useValuationApi.ts:107:      const resultData = await ValuationApiService.getValuationResult(requestId);
src/hooks/useValuationApi.ts:131:      const sourcesData = await ValuationApiService.getSourcesStatus();
src/hooks/useValuationApi.ts:146:  const startFullValuation = useCallback(async (request: ValuationRequest): Promise<ValuationResult | null> => {
src/hooks/useValuationApi.ts:152:      const requestId = await createValuation(request);
src/hooks/useValuationApi.ts:166:      const finalResult = await ValuationApiService.pollValuationProgress(
src/hooks/useValuationApi.ts:182:          toast.success(`Valuation complete! Found ${finalResult.comp_count} comparable listings`);
src/hooks/useValuationApi.ts:184:          toast.error('Valuation failed - please try again');
src/hooks/useValuationApi.ts:191:      throw new Error('Valuation timed out');
src/hooks/useValuationApi.ts:196:      toast.error(`Valuation failed: ${errorMessage}`);
src/hooks/useValuationApi.ts:201:  }, [createValuation, triggerAggregation]);
src/hooks/useValuationApi.ts:222:    createValuation,
src/hooks/useValuationApi.ts:226:    startFullValuation,
src/hooks/useValuationApi.ts:231:export default useValuationApi;
src/hooks/useFullValuationPipeline.ts:2:import { useValuationPipeline } from "./valuation-pipeline";
src/hooks/useFullValuationPipeline.ts:5:interface FullValuationPipelineReturn {
src/hooks/useFullValuationPipeline.ts:13:  submitValuation: (data: any) => Promise<any>;
src/hooks/useFullValuationPipeline.ts:16:export function useFullValuationPipeline(): FullValuationPipelineReturn {
src/hooks/useFullValuationPipeline.ts:17:  const { state, actions } = useValuationPipeline();
src/hooks/useFullValuationPipeline.ts:77:  const submitValuation = useCallback(async (data: any) => {
src/hooks/useFullValuationPipeline.ts:139:    submitValuation,
src/hooks/useVinInput.ts:19:    // Basic VIN validation
src/hooks/useVinInput.ts:35:      const errorMsg = valid ? null : 'Invalid VIN format';
src/hooks/useNicbVinCheck.ts:26:      setError('Failed to check VIN with NICB');
src/agents/marketSearchAgent.ts:71:    if (exactVinMatches > 0) notes.push(`${exactVinMatches} exact VIN matches`);
src/agents/marketSearchHelpers.ts:30:    // Prioritize exact VIN matches
src/hooks/valuation-pipeline/service.ts:2:  ValuationPipelineReducerAction,
src/hooks/valuation-pipeline/service.ts:3:  ValuationPipelineState,
src/hooks/valuation-pipeline/service.ts:7:export const initialValuationPipelineState: ValuationPipelineState = {
src/hooks/valuation-pipeline/service.ts:13:        "Identify your vehicle using VIN, license plate, or manual entry",
src/hooks/valuation-pipeline/service.ts:48:      title: "Valuation Result",
src/hooks/valuation-pipeline/service.ts:62:  state: ValuationPipelineState,
src/hooks/valuation-pipeline/service.ts:63:  action: ValuationPipelineReducerAction,
src/hooks/valuation-pipeline/service.ts:64:): ValuationPipelineState {
src/hooks/valuation-pipeline/service.ts:177:      return initialValuationPipelineState;
src/hooks/valuation-pipeline/index.ts:3:export { useValuationPipeline } from "./useValuationPipeline";
src/hooks/valuation-pipeline/types.ts:1:export interface ValuationConditionData {
src/hooks/valuation-pipeline/types.ts:13:export interface ValuationPipelineStep {
src/hooks/valuation-pipeline/types.ts:21:export interface ValuationPipelineData {
src/hooks/valuation-pipeline/types.ts:23:  condition?: ValuationConditionData;
src/hooks/valuation-pipeline/types.ts:30:export interface ValuationPipelineState {
src/hooks/valuation-pipeline/types.ts:31:  steps: ValuationPipelineStep[];
src/hooks/valuation-pipeline/types.ts:33:  data: ValuationPipelineData;
src/hooks/valuation-pipeline/types.ts:40:export interface ValuationPipelineReducerAction {
src/hooks/valuation-pipeline/types.ts:46:export type ValuationPipelineAction = ValuationPipelineReducerAction;
src/hooks/valuation-pipeline/types.ts:54:  setConditionData: (data: ValuationConditionData) => void;
src/hooks/valuation-pipeline/types.ts:69:  submitValuation?: (data: any) => Promise<any>;
src/App.routes.tsx:9:const GetValuationPage = React.lazy(() => import('./pages/GetValuationPage'));
src/App.routes.tsx:10:const ValuationPage = React.lazy(() => import('./pages/ValuationPage'));
src/App.routes.tsx:16:import ResultsPage from './pages/ResultsPage'; // Use the real ResultsPage
src/App.routes.tsx:17:import MyValuationsPage from './pages/MyValuationsPage';
src/App.routes.tsx:20:import ValuationInsightsPage from './pages/admin/ValuationInsightsPage';
src/App.routes.tsx:21:import ValuationFollowUpPage from './pages/ValuationFollowUpPage';
src/App.routes.tsx:22:import PlateValuationPage from './pages/valuation/plate/PlateValuationPage';
src/App.routes.tsx:51:            <GetValuationPage />
src/App.routes.tsx:59:            <ValuationPage />
src/App.routes.tsx:103:        element: <ResultsPage />, // Fixed: Use ResultsPage instead of ValuationResultPage
src/App.routes.tsx:107:        element: <ResultsPage />, // Fixed: Use ResultsPage instead of ValuationResultPage
src/App.routes.tsx:111:        element: <ValuationFollowUpPage />,
src/App.routes.tsx:115:        element: <PlateValuationPage />,
src/App.routes.tsx:121:            <MyValuationsPage />
src/App.routes.tsx:145:            <ValuationInsightsPage />
src/hooks/valuation-pipeline/useValuationPipeline.ts:3:  initialValuationPipelineState,
src/hooks/valuation-pipeline/useValuationPipeline.ts:8:  ValuationConditionData,
src/hooks/valuation-pipeline/useValuationPipeline.ts:9:  ValuationPipelineState,
src/hooks/valuation-pipeline/useValuationPipeline.ts:12:interface ValuationPipelineHook {
src/hooks/valuation-pipeline/useValuationPipeline.ts:13:  state: ValuationPipelineState;
src/hooks/valuation-pipeline/useValuationPipeline.ts:28:  submitValuation: (data: any) => Promise<any>;
src/hooks/valuation-pipeline/useValuationPipeline.ts:32:export function useValuationPipeline(): ValuationPipelineHook {
src/hooks/valuation-pipeline/useValuationPipeline.ts:35:    initialValuationPipelineState,
src/hooks/valuation-pipeline/useValuationPipeline.ts:77:  const setConditionData = useCallback((data: ValuationConditionData) => {
src/hooks/valuation-pipeline/useValuationPipeline.ts:165:  const submitValuation = useCallback(async (data: any) => {
src/hooks/valuation-pipeline/useValuationPipeline.ts:228:  // Add alias for resetPipeline to match what's expected in ValuationPage
src/hooks/valuation-pipeline/useValuationPipeline.ts:259:    submitValuation,
src/hooks/usePlateLookup.ts:3:interface PlateLookupResult {
src/hooks/usePlateLookup.ts:15:export function usePlateLookup() {
src/hooks/usePlateLookup.ts:19:  const lookupVehicle = async (plate: string, state: string): Promise<PlateLookupResult | null> => {
src/hooks/usePlateLookup.ts:25:      const mockResult: PlateLookupResult = {
src/hooks/usePlateLookup.ts:42:      const errorMessage = err instanceof Error ? err.message : 'Plate lookup failed';
src/hooks/usePlateLookup.ts:51:  const lookupPlate = lookupVehicle;
src/hooks/usePlateLookup.ts:55:    lookupPlate,
src/hooks/useValuationChat.ts:6:export const useValuationChat = () => {
src/hooks/types/savedValuation.ts:1:export interface SavedValuation {
src/hooks/useUnifiedDecoder.ts:24:          throw new Error(result?.error || 'Failed to decode VIN');
src/hooks/useUnifiedDecoder.ts:27:        throw new Error('Plate lookup not supported in this decoder');
src/__tests__/acceptance/HomeAndPremium.test.tsx:64:        return 'testVin'; // Example VIN value
src/__tests__/generateValuationPdf.test.ts:3:import { generateValuationPdf, ReportData } from "../utils/pdfService";
src/__tests__/generateValuationPdf.test.ts:6:// Mock the PDF generation dependencies
src/__tests__/generateValuationPdf.test.ts:8:  PDFDocument: {
src/__tests__/generateValuationPdf.test.ts:26:describe("generateValuationPdf", () => {
src/__tests__/generateValuationPdf.test.ts:27:  it("generates a PDF with the correct data", async () => {
src/__tests__/generateValuationPdf.test.ts:58:    // Generate the PDF
src/__tests__/generateValuationPdf.test.ts:59:    const pdfBuffer = await generateValuationPdf(testData);
src/__tests__/generateValuationPdf.test.ts:61:    // Verify the PDF was generated
src/__tests__/generateValuationPdf.test.ts:86:    // Generate the PDF with minimal data
src/__tests__/generateValuationPdf.test.ts:87:    const pdfBuffer = await generateValuationPdf(minimalData);
src/__tests__/generateValuationPdf.test.ts:89:    // Verify the PDF was generated even with minimal data
src/hooks/useValuationFactors.ts:4:export interface ValuationFactor {
src/hooks/useValuationFactors.ts:24:export const useValuationFactors = () => {
src/hooks/useValuationFactors.ts:27:  const [factors, setFactors] = useState<ValuationFactor[]>([]);
src/hooks/useAuthTests.ts:7:  const [results, setResults] = useState<Record<string, TestResult>>({});
src/hooks/useAuthTests.ts:18:      setResults({
src/__tests__/rls-access.test.ts:19:  let userAValuationId: string;
src/__tests__/rls-access.test.ts:20:  let userBValuationId: string;
src/__tests__/rls-access.test.ts:52:    const { data: userAValuation, error: userAValuationError } = await supabase
src/__tests__/rls-access.test.ts:66:    if (userAValuationError) {
src/__tests__/rls-access.test.ts:68:        `Failed to create valuation for User A: ${userAValuationError.message}`,
src/__tests__/rls-access.test.ts:71:    userAValuationId = userAValuation.id;
src/__tests__/rls-access.test.ts:74:    const { data: userBValuation, error: userBValuationError } = await supabase
src/__tests__/rls-access.test.ts:88:    if (userBValuationError) {
src/__tests__/rls-access.test.ts:90:        `Failed to create valuation for User B: ${userBValuationError.message}`,
src/__tests__/rls-access.test.ts:93:    userBValuationId = userBValuation.id;
src/__tests__/rls-access.test.ts:102:      .eq("id", userAValuationId);
src/__tests__/rls-access.test.ts:108:      .eq("id", userBValuationId);
src/__tests__/rls-access.test.ts:123:      .eq("id", userAValuationId);
src/__tests__/rls-access.test.ts:128:    expect(data![0].id).toBe(userAValuationId);
src/__tests__/rls-access.test.ts:143:      .eq("id", userBValuationId);
src/__tests__/rls-access.test.ts:178:    const result = await attemptDownloadPremiumReport(userAValuationId, false);
src/hooks/useNhtsaRecalls.ts:36:        return { Results: [] };
src/hooks/useNhtsaRecalls.ts:67:    data: data?.Results,
src/index.ts:1:// Main export for ValuationIntegrationService
src/index.ts:2:export { ValuationIntegrationService } from './services/ValuationIntegrationService';
src/index.ts:3:export { useValuationIntegration } from './hooks/useValuationIntegration';
src/index.ts:7:export type { ValuationResult, LegacyValuationResult } from './types/valuation';
src/router.legacy.bak:7:import ValuationPage from './pages/ValuationPage';
src/router.legacy.bak:9:import ValuationResultPage from './pages/ValuationResultPage';
src/router.legacy.bak:21:import PlateValuationPage from './pages/valuation/plate/PlateValuationPage';
src/router.legacy.bak:22:import ManualValuationPage from './pages/valuation/manual/ManualValuationPage';
src/router.legacy.bak:82:  // Enhanced Valuation routes with proper VIN handling
src/router.legacy.bak:85:    element: <ValuationPage />
src/router.legacy.bak:89:    element: <ValuationPage />
src/router.legacy.bak:92:  // Plate lookup valuation route
src/router.legacy.bak:95:    element: <PlateValuationPage />
src/router.legacy.bak:99:    element: <PlateValuationPage />
src/router.legacy.bak:105:    element: <ManualValuationPage />
src/router.legacy.bak:114:    element: <ValuationResultPage />
src/router.legacy.bak:118:    element: <ValuationResultPage />
src/hooks/useValuationIntegration.ts:2:import { ValuationIntegrationService, ValuationPipelineResult } from '@/services/ValuationIntegrationService';
src/hooks/useValuationIntegration.ts:3:import { ValuationRequest, ValuationResult } from '@/services/ValuationApiService';
src/hooks/useValuationIntegration.ts:6:interface UseValuationIntegrationOptions {
src/hooks/useValuationIntegration.ts:12:interface UseValuationIntegrationReturn {
src/hooks/useValuationIntegration.ts:16:  result: ValuationPipelineResult | null;
src/hooks/useValuationIntegration.ts:18:  processVinToValuation: (vin: string, additionalData?: Partial<ValuationRequest>) => Promise<ValuationPipelineResult | null>;
src/hooks/useValuationIntegration.ts:19:  getCachedValuation: (vin: string) => Promise<void>;
src/hooks/useValuationIntegration.ts:20:  clearResults: () => void;
src/hooks/useValuationIntegration.ts:24: * Hook for managing the complete VIN to valuation pipeline
src/hooks/useValuationIntegration.ts:27:export const useValuationIntegration = (
src/hooks/useValuationIntegration.ts:28:  options: UseValuationIntegrationOptions = {}
src/hooks/useValuationIntegration.ts:29:): UseValuationIntegrationReturn => {
src/hooks/useValuationIntegration.ts:39:  const [result, setResult] = useState<ValuationPipelineResult | null>(null);
src/hooks/useValuationIntegration.ts:47:  const processVinToValuation = useCallback(async (
src/hooks/useValuationIntegration.ts:49:    additionalData?: Partial<ValuationRequest>
src/hooks/useValuationIntegration.ts:50:  ): Promise<ValuationPipelineResult | null> => {
src/hooks/useValuationIntegration.ts:57:      // Validate VIN first
src/hooks/useValuationIntegration.ts:58:      const validation = ValuationIntegrationService.validateVin(vin);
src/hooks/useValuationIntegration.ts:60:        setError(validation.error || 'Invalid VIN');
src/hooks/useValuationIntegration.ts:61:        toast.error(validation.error || 'Invalid VIN');
src/hooks/useValuationIntegration.ts:65:      updateProgress('Validating VIN...', 5);
src/hooks/useValuationIntegration.ts:70:        const cached = await ValuationIntegrationService.getCachedValuationByVin(vin, maxCacheHours);
src/hooks/useValuationIntegration.ts:74:          const cachedResult: ValuationPipelineResult = {
src/hooks/useValuationIntegration.ts:87:          toast.success('Found recent valuation for this VIN');
src/hooks/useValuationIntegration.ts:92:      updateProgress('Starting VIN decode...', 15);
src/hooks/useValuationIntegration.ts:95:      const pipelineResult = await ValuationIntegrationService.processVinToValuation(
src/hooks/useValuationIntegration.ts:123:        updateProgress('Valuation complete!', 100);
src/hooks/useValuationIntegration.ts:124:        toast.success(`Valuation complete: $${pipelineResult.valuationResult?.estimated_value?.toLocaleString()}`);
src/hooks/useValuationIntegration.ts:128:        setError(pipelineResult.error || 'Valuation pipeline failed');
src/hooks/useValuationIntegration.ts:129:        toast.error(pipelineResult.error || 'Valuation pipeline failed');
src/hooks/useValuationIntegration.ts:137:      console.error('Valuation integration error:', err);
src/hooks/useValuationIntegration.ts:144:  const getCachedValuation = useCallback(async (vin: string): Promise<void> => {
src/hooks/useValuationIntegration.ts:146:      const cached = await ValuationIntegrationService.getCachedValuationByVin(vin, maxCacheHours);
src/hooks/useValuationIntegration.ts:149:        const cachedResult: ValuationPipelineResult = {
src/hooks/useValuationIntegration.ts:164:        toast.info('No recent valuation found for this VIN');
src/hooks/useValuationIntegration.ts:173:  const clearResults = useCallback(() => {
src/hooks/useValuationIntegration.ts:186:    processVinToValuation,
src/hooks/useValuationIntegration.ts:187:    getCachedValuation,
src/hooks/useValuationIntegration.ts:188:    clearResults
src/hooks/useValuationIntegration.ts:192:export default useValuationIntegration;
src/hooks/useMarketListings.ts:41:        // Try to fetch exact VIN match first if provided
src/hooks/useMarketListings.ts:50:            console.log(`Found ${vinMatches.length} exact VIN matches`);
src/api/sources/carmax.ts:131:    return `Find listings for a ${searchTerms}${locationFilter}${priceFilter} on site:carmax.com. Return price, VIN, mileage, dealer, link, CPO status.`;
src/hooks/useSimpleFollowUpForm.ts:3:import { runValuation } from '@/lib/ainClient';
src/hooks/useSimpleFollowUpForm.ts:5:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/hooks/useSimpleFollowUpForm.ts:7:interface UseSimpleFollowUpFormProps {
src/hooks/useSimpleFollowUpForm.ts:9:  initialData?: Partial<FollowUpAnswers>;
src/hooks/useSimpleFollowUpForm.ts:12:export function useSimpleFollowUpForm({ vin, initialData }: UseSimpleFollowUpFormProps) {
src/hooks/useSimpleFollowUpForm.ts:13:  const [formData, setFormData] = useState<FollowUpAnswers>(() => ({
src/hooks/useSimpleFollowUpForm.ts:65:          console.log('üîç Loading follow-up data for VIN:', vin);
src/hooks/useSimpleFollowUpForm.ts:68:        // First try to load by VIN
src/hooks/useSimpleFollowUpForm.ts:78:          console.log('‚úÖ Loaded existing follow-up data for VIN:', vin);
src/hooks/useSimpleFollowUpForm.ts:85:          // If no data by VIN, try to link to existing valuation
src/hooks/useSimpleFollowUpForm.ts:100:              vin: vin // FIXED: Ensure VIN is preserved
src/hooks/useSimpleFollowUpForm.ts:103:            console.log('‚ö†Ô∏è No valuation found to link for VIN:', vin);
src/hooks/useSimpleFollowUpForm.ts:104:            // Still preserve the VIN even if no valuation exists
src/hooks/useSimpleFollowUpForm.ts:121:      console.warn('‚ö†Ô∏è No VIN provided to useSimpleFollowUpForm');
src/hooks/useSimpleFollowUpForm.ts:126:  // Enhanced auto-save function with proper VIN linking
src/hooks/useSimpleFollowUpForm.ts:127:  const saveFormData = useCallback(async (dataToSave: FollowUpAnswers) => {
src/hooks/useSimpleFollowUpForm.ts:134:        console.error('‚ùå Cannot save follow-up data without VIN');
src/hooks/useSimpleFollowUpForm.ts:135:        setSaveError('VIN required for saving');
src/hooks/useSimpleFollowUpForm.ts:149:        vin: vin, // FIXED: Force VIN to be correct and not null
src/hooks/useSimpleFollowUpForm.ts:180:        console.log('üîó Attempting to link follow-up to valuation via VIN:', vin);
src/hooks/useSimpleFollowUpForm.ts:193:          console.log('‚ö†Ô∏è No valuation found to link for VIN:', vin);
src/hooks/useSimpleFollowUpForm.ts:269:  const updateFormData = useCallback((updates: Partial<FollowUpAnswers>) => {
src/hooks/useSimpleFollowUpForm.ts:273:      vin: vin // FIXED: Always preserve the VIN
src/hooks/useSimpleFollowUpForm.ts:294:  // PHASE 2 FIX: Enhanced submission function with proper VIN decode validation and valuation creation
src/hooks/useSimpleFollowUpForm.ts:295:  const submitFollowUpAndStartValuation = useCallback(async (): Promise<{ success: boolean; message: string; valuationId?: string; requiresValuation?: boolean }> => {
src/hooks/useSimpleFollowUpForm.ts:298:        return { success: false, message: 'VIN required for valuation' };
src/hooks/useSimpleFollowUpForm.ts:306:      console.log('üöÄ [FOLLOW-UP] Starting submission for VIN:', vin);
src/hooks/useSimpleFollowUpForm.ts:308:      // PHASE 2 FIX: Ensure VIN is decoded before proceeding
src/hooks/useSimpleFollowUpForm.ts:312:        console.log('üîç [FOLLOW-UP] VIN not decoded, triggering decode first...');
src/hooks/useSimpleFollowUpForm.ts:316:          console.error('‚ùå [FOLLOW-UP] VIN decode failed:', decodeResult.error);
src/hooks/useSimpleFollowUpForm.ts:317:          return { success: false, message: `VIN decode failed: ${decodeResult.error}` };
src/hooks/useSimpleFollowUpForm.ts:320:        console.log('‚úÖ [FOLLOW-UP] VIN decoded successfully during follow-up');
src/hooks/useSimpleFollowUpForm.ts:326:      // 1. Check for existing valuation by VIN
src/hooks/useSimpleFollowUpForm.ts:327:      const { data: existingValuations } = await supabase
src/hooks/useSimpleFollowUpForm.ts:334:      let valuation_id: string | undefined = existingValuations?.[0]?.id ?? undefined;
src/hooks/useSimpleFollowUpForm.ts:338:        console.log('üöÄ [FOLLOW-UP] Creating new valuation record for VIN:', vin);
src/hooks/useSimpleFollowUpForm.ts:340:        const { data: newValuation, error: valuationError } = await supabase
src/hooks/useSimpleFollowUpForm.ts:359:        if (valuationError || !newValuation) {
src/hooks/useSimpleFollowUpForm.ts:364:        valuation_id = newValuation.id;
src/hooks/useSimpleFollowUpForm.ts:391:      const currentValuation = existingValuations?.[0];
src/hooks/useSimpleFollowUpForm.ts:392:      if (!currentValuation?.estimated_value || currentValuation.estimated_value <= 0) {
src/hooks/useSimpleFollowUpForm.ts:397:          const { data: ainResult, meta } = await runValuation({
src/hooks/useSimpleFollowUpForm.ts:408:          console.log('‚úÖ [AIN] Valuation completed:', ainResult);
src/hooks/useSimpleFollowUpForm.ts:418:          console.error('‚ùå [AIN] Valuation error:', errorMessage);
src/hooks/useSimpleFollowUpForm.ts:429:      console.error('‚ùå [FOLLOW-UP] Error in submitFollowUpAndStartValuation:', error);
src/hooks/useSimpleFollowUpForm.ts:441:    submitFollowUpAndStartValuation,
src/hooks/useAuctionIntelligence.ts:41:          console.log('Generating new auction intelligence for VIN:', vin);
src/hooks/index.ts:6:export { useFullValuationPipeline } from './useFullValuationPipeline';
src/hooks/index.ts:7:export { useValuationFallback } from './useValuationFallback';
src/hooks/useUnifiedLookup.ts:30:      console.log('üîç Starting VIN lookup for:', vin);
src/hooks/useUnifiedLookup.ts:37:        console.log('‚úÖ VIN lookup successful:', lookupResult.vehicle);
src/hooks/useUnifiedLookup.ts:39:        setError(lookupResult.error || 'VIN lookup failed');
src/hooks/useUnifiedLookup.ts:40:        toast.error(lookupResult.error || 'VIN lookup failed');
src/hooks/useUnifiedLookup.ts:45:      const errorMessage = err instanceof Error ? err.message : 'VIN lookup failed';
src/hooks/useUnifiedLookup.ts:54:  const lookupByPlate = useCallback(async (plate: string, state: string): Promise<UnifiedVehicleLookupResult | null> => {
src/hooks/useUnifiedLookup.ts:66:      const lookupResult = await UnifiedLookupService.lookupByPlate(plate, state, options);
src/hooks/useUnifiedLookup.ts:72:        setError(lookupResult.error || 'Plate lookup failed');
src/hooks/useUnifiedLookup.ts:73:        toast.error(lookupResult.error || 'Plate lookup failed');
src/hooks/useUnifiedLookup.ts:78:      const errorMessage = err instanceof Error ? err.message : 'Plate lookup failed';
src/hooks/useUnifiedLookup.ts:97:    lookupByPlate,
src/hooks/useShareReport.ts:22:          title: 'Vehicle Valuation Report',
src/hooks/usePublicShare.ts:29:  const getValuationByToken = async (token: string) => {
src/hooks/usePublicShare.ts:73:    getValuationByToken,
src/hooks/useValuationResult.ts:3:import { LegacyValuationResult } from '@/types/valuation';
src/hooks/useValuationResult.ts:4:import { getValuationById } from '@/utils/valuation';
src/hooks/useValuationResult.ts:6:export const useValuationResult = (valuationId?: string) => {
src/hooks/useValuationResult.ts:9:  const [result, setResult] = useState<LegacyValuationResult | null>(null);
src/hooks/useValuationResult.ts:13:      fetchValuation(valuationId);
src/hooks/useValuationResult.ts:17:  const fetchValuation = async (id: string) => {
src/hooks/useValuationResult.ts:22:      const data = await getValuationById(id);
src/hooks/useValuationResult.ts:48:  const calculateValuation = async (data: any) => {
src/hooks/useValuationResult.ts:54:      const result = await fetchValuation(data.id);
src/hooks/useValuationResult.ts:69:    calculateValuation,
src/scraping/brightdata/getStatVinData.ts:38:    console.log(`üîç Fetching STAT.vin data for VIN: ${vin}`);
src/scraping/brightdata/getStatVinData.ts:51:      console.log('‚ÑπÔ∏è No STAT.vin data found for this VIN');
src/hooks/useMarketplaceComparison.ts:82:            console.log(`Found ${vinData.length} VIN-based scraped listings`);
src/hooks/useValuationFallback.ts:7:interface ValuationFallbackHook {
src/hooks/useValuationFallback.ts:10:  setFallbackForPlate: () => void;
src/hooks/useValuationFallback.ts:15:export function useValuationFallback(): ValuationFallbackHook {
src/hooks/useValuationFallback.ts:18:  // Set fallback when VIN lookup fails
src/hooks/useValuationFallback.ts:20:    console.log("FALLBACK: VIN lookup failed, redirecting to manual entry");
src/hooks/useValuationFallback.ts:22:    toast.error("VIN lookup failed. Please try manual entry.");
src/hooks/useValuationFallback.ts:26:  const setFallbackForPlate = useCallback(() => {
src/hooks/useValuationFallback.ts:27:    console.log("FALLBACK: Plate lookup failed, redirecting to manual entry");
src/hooks/useValuationFallback.ts:43:    setFallbackForPlate,
src/hooks/useFollowUpForm.ts:4:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/hooks/useFollowUpForm.ts:6:import { runValuation } from '@/lib/ainClient';
src/hooks/useFollowUpForm.ts:9:import { useFollowUpDataLoader } from './useFollowUpDataLoader';
src/hooks/useFollowUpForm.ts:10:import { useFollowUpAutoSave } from './useFollowUpAutoSave';
src/hooks/useFollowUpForm.ts:12:export function useFollowUpForm(vin: string, initialData?: Partial<FollowUpAnswers>) {
src/hooks/useFollowUpForm.ts:19:    console.log('üì• Follow-up form initialized with VIN:', vin);
src/hooks/useFollowUpForm.ts:23:  const { formData: loadedData, setFormData, isLoading } = useFollowUpDataLoader({ 
src/hooks/useFollowUpForm.ts:29:  const formMethods = useForm<FollowUpAnswers>({
src/hooks/useFollowUpForm.ts:42:          setValue(key as keyof FollowUpAnswers, value);
src/hooks/useFollowUpForm.ts:50:  const { debouncedSave } = useFollowUpAutoSave({
src/hooks/useFollowUpForm.ts:65:  const saveForm = useCallback(async (formData: FollowUpAnswers) => {
src/hooks/useFollowUpForm.ts:99:  const submitCompleteForm = useCallback(async (formData: FollowUpAnswers) => {
src/hooks/useFollowUpForm.ts:130:        console.log('üßÆ [useFollowUpForm] Calling AIN API for follow-up valuation');
src/hooks/useFollowUpForm.ts:133:        const { data: ainResult, meta } = await runValuation({
src/hooks/useFollowUpForm.ts:164:          const { data: existingValuation } = await supabase
src/hooks/useFollowUpForm.ts:170:          if (existingValuation) {
src/hooks/useFollowUpForm.ts:182:              .eq('id', existingValuation.id);
src/hooks/useFollowUpForm.ts:186:            const { data: newValuation } = await supabase
src/hooks/useFollowUpForm.ts:202:          toast.success(`Valuation updated: $${valuationResult.finalValue.toLocaleString()} (${valuationResult.confidenceScore}% confidence)`);
src/hooks/useFollowUpForm.ts:204:          console.warn('‚ö†Ô∏è Valuation returned $0, not updating database');
src/hooks/useFollowUpForm.ts:205:          toast.warning('Valuation could not be updated - insufficient data');
src/hooks/useFollowUpForm.ts:257:    updateFormData: (data: Partial<FollowUpAnswers>) => {
src/hooks/useFollowUpForm.ts:259:        setValue(key as keyof FollowUpAnswers, value);
src/tests/e2e/valuation-flow.test.tsx:17:describe('Valuation Flow', () => {
src/tests/e2e/valuation-flow.test.tsx:34:    cy.contains('Valuation Result', { timeout: 10000 }).should('be.visible');
src/tests/e2e/valuation-flow.test.tsx:46:    // Try downloading a PDF report
src/tests/e2e/valuation-flow.test.tsx:50:    cy.contains('PDF report downloaded successfully').should('be.visible');
src/tests/e2e/valuation-flow.test.tsx:53:  it('should complete VIN lookup flow and display results with condition assessment', () => {
src/tests/e2e/valuation-flow.test.tsx:54:    // Visit the VIN lookup page
src/tests/e2e/valuation-flow.test.tsx:57:    // Enter a test VIN
src/tests/e2e/valuation-flow.test.tsx:61:    cy.get('button').contains('Lookup VIN').click();
src/tests/e2e/valuation-flow.test.tsx:67:    cy.contains('Continue to Valuation').click();
src/tests/e2e/valuation-flow.test.tsx:79:    cy.get('button').contains('Complete Valuation').click();
src/hooks/useDownloadPdf.ts:18:      // Mock PDF download
src/hooks/useDownloadPdf.ts:19:      console.log(`Downloading PDF for valuation ${valuationId}`);
src/hooks/useDownloadPdf.ts:24:      console.error('Error downloading PDF:', err);
src/hooks/useDownloadPdf.ts:25:      setError('Failed to download PDF report');
src/hooks/useVinLookup.ts:23:        const errorMessage = result?.error || 'VIN lookup failed';
src/hooks/useVinLookup.ts:25:        console.error('VIN lookup error:', errorMessage);
src/hooks/useVinLookup.ts:29:      const errorMessage = err instanceof Error ? err.message : 'VIN lookup failed';
src/hooks/useVinLookup.ts:31:      console.error('VIN lookup exception:', errorMessage);
src/tests/e2e/vinToResult.e2e.test.ts:2: * End-to-End Test for VIN to Result Flow
src/tests/e2e/vinToResult.e2e.test.ts:3: * Tests the complete valuation pipeline from VIN entry to final result display
src/tests/e2e/vinToResult.e2e.test.ts:8:test.describe('VIN to Result E2E Flow', () => {
src/tests/e2e/vinToResult.e2e.test.ts:9:  // Test VIN - Ford F-150
src/tests/e2e/vinToResult.e2e.test.ts:13:  test('should complete VIN lookup to valuation result flow', async ({ page }) => {
src/tests/e2e/vinToResult.e2e.test.ts:14:    // Step 1: Navigate to VIN lookup page
src/tests/e2e/vinToResult.e2e.test.ts:17:    // Step 2: Enter VIN and submit
src/tests/e2e/vinToResult.e2e.test.ts:21:    // Step 3: Wait for VIN decode and navigation to follow-up
src/tests/e2e/vinToResult.e2e.test.ts:25:    await expect(page.locator('h1')).toContainText('Complete Your Comprehensive Valuation');
src/tests/e2e/vinToResult.e2e.test.ts:44:    await page.click('button:has-text("Complete Valuation")');
src/tests/e2e/vinToResult.e2e.test.ts:94:    // Step 13: Test PDF download functionality
src/tests/e2e/vinToResult.e2e.test.ts:95:    const pdfButton = page.locator('button:has-text("Download PDF")');
src/tests/e2e/vinToResult.e2e.test.ts:98:      // Wait a moment for PDF generation
src/tests/e2e/vinToResult.e2e.test.ts:103:  test('should handle invalid VIN gracefully', async ({ page }) => {
src/tests/e2e/vinToResult.e2e.test.ts:106:    // Try submitting invalid VIN
src/tests/e2e/vinToResult.e2e.test.ts:136:    // Complete the VIN flow first
src/tests/e2e/vinToResult.e2e.test.ts:145:    await page.click('button:has-text("Complete Valuation")');
src/tests/e2e/vinToResult.e2e.test.ts:183:    await page.click('button:has-text("Complete Valuation")');
src/hooks/useValuationData.ts:3:import { LegacyValuationResult, SavedValuation } from '@/types/valuation';
src/hooks/useValuationData.ts:5:export interface UseValuationDataOptions {
src/hooks/useValuationData.ts:11:export interface UseValuationDataReturn {
src/hooks/useValuationData.ts:12:  valuations: LegacyValuationResult[];
src/hooks/useValuationData.ts:13:  savedValuations: SavedValuation[];
src/hooks/useValuationData.ts:16:  deleteValuation: (id: string) => Promise<void>;
src/hooks/useValuationData.ts:20:export function useValuationData(options: UseValuationDataOptions = {}): UseValuationDataReturn {
src/hooks/useValuationData.ts:23:  const [valuations, setValuations] = useState<LegacyValuationResult[]>([]);
src/hooks/useValuationData.ts:24:  const [savedValuations, setSavedValuations] = useState<SavedValuation[]>([]);
src/hooks/useValuationData.ts:37:        setValuations([]);
src/hooks/useValuationData.ts:41:        setSavedValuations([]);
src/hooks/useValuationData.ts:50:  const deleteValuation = async (id: string): Promise<void> => {
src/hooks/useValuationData.ts:52:      setValuations(prev => prev.filter(v => v.id !== id));
src/hooks/useValuationData.ts:53:      setSavedValuations(prev => prev.filter(v => v.id !== id));
src/hooks/useValuationData.ts:67:    savedValuations,
src/hooks/useValuationData.ts:70:    deleteValuation,
src/hooks/useValuationData.ts:107:export const useValuationHistory = () => {
src/hooks/useValuationData.ts:108:  const result = useValuationData({ loadHistory: true });
src/hooks/useValuationData.ts:116:export const useSavedValuations = () => {
src/hooks/useValuationData.ts:117:  const result = useValuationData({ loadSaved: true });
src/hooks/useValuationData.ts:119:    valuations: result.savedValuations,
src/hooks/useValuationData.ts:122:    deleteValuation: result.deleteValuation,
src/hooks/useFollowUpAutoSave.ts:4:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/hooks/useFollowUpAutoSave.ts:6:interface UseFollowUpAutoSaveProps {
src/hooks/useFollowUpAutoSave.ts:7:  formData: FollowUpAnswers;
src/hooks/useFollowUpAutoSave.ts:13:export function useFollowUpAutoSave({
src/hooks/useFollowUpAutoSave.ts:18:}: UseFollowUpAutoSaveProps) {
src/hooks/useFollowUpAutoSave.ts:24:  const saveFormData = useCallback(async (dataToSave: FollowUpAnswers): Promise<boolean> => {
src/hooks/useFollowUpAutoSave.ts:111:  const debouncedSave = useCallback((dataToSave: FollowUpAnswers) => {
src/hooks/useConsolidatedForecast.ts:38:        setError("Valuation ID is required");
src/hooks/useMissingFieldAnalysis.ts:2:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/hooks/useMissingFieldAnalysis.ts:6:  formData: FollowUpAnswers;
src/hooks/useSaveValuation.ts:4:export const useSaveValuation = () => {
src/hooks/useSaveValuation.ts:7:  const saveValuation = async (valuationData: any) => {
src/hooks/useSaveValuation.ts:15:  return { saveValuation };
src/hooks/useDealerValuations.ts:4:import { ValuationWithCondition } from "@/types/dealer";
src/hooks/useDealerValuations.ts:7:export interface ValuationWithVehicle extends ValuationWithCondition {
src/hooks/useDealerValuations.ts:18:export function useDealerValuations(dealerId?: string) {
src/hooks/useDealerValuations.ts:19:  const [valuations, setValuations] = useState<ValuationWithCondition[]>([]);
src/hooks/useDealerValuations.ts:33:    async function fetchDealerValuations() {
src/hooks/useDealerValuations.ts:66:          setValuations(data as ValuationWithCondition[]);
src/hooks/useDealerValuations.ts:77:    fetchDealerValuations();
src/hooks/useDealerValuations.ts:92:  const handleDownloadReport = (valuation: ValuationWithCondition) => {
src/hooks/useDealerValuations.ts:95:    // Here you would call your PDF generation function
src/hooks/useAdminAnalytics.ts:6:  totalValuations: number;
src/hooks/useAdminAnalytics.ts:8:  dailyValuations: { date: string; count: number }[];
src/hooks/useAdminAnalytics.ts:41:        const { count: totalValuations, error: valuationError } = await supabase
src/hooks/useAdminAnalytics.ts:68:          { name: "VIN", value: vinCount },
src/hooks/useAdminAnalytics.ts:69:          { name: "Plate", value: plateCount },
src/hooks/useAdminAnalytics.ts:89:        const dailyValuations = Object.entries(dailyCounts)
src/hooks/useAdminAnalytics.ts:144:        const conversionRate = totalValuations && totalValuations > 0
src/hooks/useAdminAnalytics.ts:145:          ? orderData.length / totalValuations
src/hooks/useAdminAnalytics.ts:173:          totalValuations: totalValuations || 0,
src/hooks/useAdminAnalytics.ts:175:          dailyValuations,
src/scripts/generate-test-data.ts:66:    console.log("Valuation IDs:", data.valuations);
src/valuation/types.ts:3:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/valuation/types.ts:8:  followUpAnswers: FollowUpAnswers;
src/valuation/types.ts:12:export interface VehicleValuationResult {
src/App.tsx:9:import { ValuationProvider } from '@/contexts/ValuationContext';
src/App.tsx:42:        <ValuationProvider>
src/App.tsx:45:        </ValuationProvider>
src/contexts/ValuationContext.tsx:3:import { runValuation, type AinResponse, type AinMeta } from '@/lib/ainClient';
src/contexts/ValuationContext.tsx:8:interface ValuationResult {
src/contexts/ValuationContext.tsx:22:interface ValuationInput {
src/contexts/ValuationContext.tsx:34:interface ValuationContextType {
src/contexts/ValuationContext.tsx:35:  valuationData?: ValuationResult | null;
src/contexts/ValuationContext.tsx:45:  rerunValuation: (input: ValuationInput) => Promise<ValuationResult>;
src/contexts/ValuationContext.tsx:51:export const ValuationContext: React.Context<ValuationContextType | undefined> =
src/contexts/ValuationContext.tsx:52:  g[GLOBAL_KEY] ?? (g[GLOBAL_KEY] = createContext<ValuationContextType | undefined>(undefined));
src/contexts/ValuationContext.tsx:54:interface ValuationProviderProps {
src/contexts/ValuationContext.tsx:59:export function ValuationProvider({ children, valuationId }: ValuationProviderProps) {
src/contexts/ValuationContext.tsx:60:  const [valuationData, setValuationData] = useState<ValuationResult | null>(null);
src/contexts/ValuationContext.tsx:70:      loadValuationData(valuationId);
src/contexts/ValuationContext.tsx:74:  const loadValuationData = async (id: string) => {
src/contexts/ValuationContext.tsx:80:      // First try to get valuation by VIN
src/contexts/ValuationContext.tsx:89:        console.error('‚ùå Error fetching valuation by VIN:', vinError);
src/contexts/ValuationContext.tsx:95:      // If not found by VIN, try by ID
src/contexts/ValuationContext.tsx:113:        const legacyResult: ValuationResult = {
src/contexts/ValuationContext.tsx:128:        setValuationData(legacyResult);
src/contexts/ValuationContext.tsx:140:  const rerunValuation = async (input: ValuationInput) => {
src/contexts/ValuationContext.tsx:141:    console.log('üîÑ [ValuationContext] Calling AIN API for professional valuation via rerunValuation:', input);
src/contexts/ValuationContext.tsx:147:      const { data: ainResult, meta } = await runValuation({
src/contexts/ValuationContext.tsx:164:      const result: ValuationResult = {
src/contexts/ValuationContext.tsx:179:      setValuationData(result);
src/contexts/ValuationContext.tsx:185:        console.log('üíæ [DEBUG] Valuation data to save:', result);
src/contexts/ValuationContext.tsx:187:        const { data: savedValuation, error: insertError } = await supabase
src/contexts/ValuationContext.tsx:212:          console.log('‚úÖ Valuation saved to database successfully:', savedValuation);
src/contexts/ValuationContext.tsx:220:      console.error('‚ùå [ValuationContext] Rerun valuation error:', error);
src/contexts/ValuationContext.tsx:238:      // Implementation for PDF download
src/contexts/ValuationContext.tsx:239:      console.log('üìÑ PDF download requested');
src/contexts/ValuationContext.tsx:241:      console.error('‚ùå PDF download failed:', error);
src/contexts/ValuationContext.tsx:242:      toast.error('Failed to download PDF');
src/contexts/ValuationContext.tsx:251:      // Implementation for email PDF
src/contexts/ValuationContext.tsx:252:      console.log('üìß Email PDF requested');
src/contexts/ValuationContext.tsx:254:      console.error('‚ùå Email PDF failed:', error);
src/contexts/ValuationContext.tsx:255:      toast.error('Failed to email PDF');
src/contexts/ValuationContext.tsx:261:  const contextValue: ValuationContextType = {
src/contexts/ValuationContext.tsx:272:    rerunValuation,
src/contexts/ValuationContext.tsx:276:    <ValuationContext.Provider value={contextValue}>
src/contexts/ValuationContext.tsx:278:    </ValuationContext.Provider>
src/contexts/ValuationContext.tsx:282:export function useValuationContext() {
src/contexts/ValuationContext.tsx:283:  const context = useContext(ValuationContext);
src/contexts/ValuationContext.tsx:286:    throw new Error(`useValuationContext must be used within a ValuationProvider (module: ${import.meta.url})`);
src/contexts/ValuationContext.tsx:291:// ValuationContext already exported above as singleton
src/docs/prompt-2-5-validation-summary.md:1:# Prompt 2.5 Validation Summary: PDF Export & Share Link Verification
src/docs/prompt-2-5-validation-summary.md:4:This document summarizes the comprehensive audit of PDF export and sharing functionality in the valuation results pipeline, completed per Prompt 2.5 requirements.
src/docs/prompt-2-5-validation-summary.md:8:### 1. Core Validation Logic (`validatePDFShareFunctionality.ts`)
src/docs/prompt-2-5-validation-summary.md:9:- **Purpose**: Comprehensive testing of PDF generation, sharing, QR codes, and fallback handling
src/docs/prompt-2-5-validation-summary.md:14:  - PDF Generation (9 checks)
src/docs/prompt-2-5-validation-summary.md:20:### 2. UI Validation Component (`PDFShareValidationComponent.tsx`)
src/docs/prompt-2-5-validation-summary.md:30:### ‚úÖ PDF Generation
src/docs/prompt-2-5-validation-summary.md:31:- **File**: `src/utils/pdf/generateValuationPdf.ts`
src/docs/prompt-2-5-validation-summary.md:34:  - Accepts `UnifiedValuationResult` object
src/docs/prompt-2-5-validation-summary.md:38:  - Contains timestamp and VIN information
src/docs/prompt-2-5-validation-summary.md:60:### ‚úÖ Share Integration in Results
src/docs/prompt-2-5-validation-summary.md:61:- **File**: `src/pages/ResultsPage.tsx`
src/docs/prompt-2-5-validation-summary.md:64:  - Added proper PDF download functionality
src/docs/prompt-2-5-validation-summary.md:66:  - Handles both VIN and UUID-based routing
src/docs/prompt-2-5-validation-summary.md:71:### Case A: Full Working Valuation (Ford F-150)
src/docs/prompt-2-5-validation-summary.md:72:- **VIN**: `1FTEW1CP7MKD73632`
src/docs/prompt-2-5-validation-summary.md:73:- **Expected Results**:
src/docs/prompt-2-5-validation-summary.md:74:  - ‚úÖ PDF includes 5+ listings
src/docs/prompt-2-5-validation-summary.md:77:  - ‚úÖ PDF download works
src/docs/prompt-2-5-validation-summary.md:81:### Case B: Fallback Valuation (Nissan Altima)
src/docs/prompt-2-5-validation-summary.md:82:- **VIN**: `1N4BL4BV8NN341985`
src/docs/prompt-2-5-validation-summary.md:83:- **Expected Results**:
src/docs/prompt-2-5-validation-summary.md:84:  - ‚úÖ PDF marks fallback methodology
src/docs/prompt-2-5-validation-summary.md:92:### ‚úÖ PDF renders valuation clearly and professionally
src/docs/prompt-2-5-validation-summary.md:105:- PDF includes fallback methodology explanations
src/docs/prompt-2-5-validation-summary.md:110:### ‚úÖ Valuation data consistent across UI, PDF, and share
src/docs/prompt-2-5-validation-summary.md:111:- Same `UnifiedValuationResult` object used throughout
src/docs/prompt-2-5-validation-summary.md:118:1. **No Market Listings**: Fallback PDF generation with synthetic pricing explanations
src/docs/prompt-2-5-validation-summary.md:121:4. **Large Result Sets**: Pagination and truncation in PDF format
src/docs/prompt-2-5-validation-summary.md:122:5. **Network Failures**: Offline PDF generation capabilities
src/docs/prompt-2-5-validation-summary.md:126:- **ResultsPage**: Main entry point for PDF/share actions
src/docs/prompt-2-5-validation-summary.md:127:- **ValuationEngine**: Provides consistent data structure
src/docs/prompt-2-5-validation-summary.md:133:The PDF export and sharing functionality is **FULLY COMPLIANT** with Prompt 2.5 requirements:
src/docs/prompt-2-5-validation-summary.md:135:- ‚úÖ PDF generation works with professional formatting
src/docs/prompt-2-5-validation-summary.md:141:All validation tests pass with 90%+ scores, confirming the system meets enterprise-level requirements for PDF export and social sharing capabilities.
src/enrichment/sources/statvin.ts:30:  console.log(`üîç Fetching auction data for VIN: ${vin}`);
src/enrichment/sources/statvin.ts:55:      console.log(`‚úÖ Found auction data for VIN ${vin}`);
src/enrichment/sources/statvin.ts:62:      console.log(`‚ÑπÔ∏è No auction data found for VIN ${vin}`);
src/docs/prompt-2-3-audit-summary.md:13:- ‚úÖ `input.marketListings` flows correctly from `marketSearchAgent.ts` into `calculateEnhancedValuation()`
src/docs/prompt-2-3-audit-summary.md:130:- ‚úÖ Proper structure matches `EnhancedValuationResult` interface
src/docs/prompt-2-3-audit-summary.md:188:| ‚úÖ All fields passed cleanly to UI/PDF | **PASS** | Lines 177-193: Complete return payload |
src/docs/prompt-2-3-audit-summary.md:192:### Case A: Ford F-150 (VIN: 1FTEW1CP7MKD73632)
src/docs/prompt-2-3-audit-summary.md:200:### Case B: Nissan Altima (VIN: 1N4BL4BV8NN341985)
src/docs/prompt-2-3-audit-summary.md:210:The `enhancedValuationEngine.ts` implementation **PASSES ALL** Prompt 2.3 requirements:
src/docs/prompt-2-3-audit-summary.md:215:4. ‚úÖ **Complete data flow** from market search ‚Üí price anchoring ‚Üí confidence ‚Üí UI/PDF
src/scrapers/types.ts:20:  maxResults: number;
src/services/supabase/feedbackService.ts:1:// Valuation Feedback Service - Handles user feedback on valuations
src/services/supabase/feedbackService.ts:4:export interface ValuationFeedback {
src/services/supabase/feedbackService.ts:18:export async function saveValuationFeedback(feedback: ValuationFeedback) {
src/services/supabase/feedbackService.ts:51:export const submitValuationFeedback = saveValuationFeedback;
src/services/supabase/shareTrackingService.ts:3:export interface SharedValuationData {
src/services/supabase/shareTrackingService.ts:14:export async function saveSharedValuation(data: SharedValuationData) {
src/services/supabase/shareTrackingService.ts:43:export async function getSharedValuation(shareToken: string) {
src/services/supabase/valuationRequestTracker.ts:3:export interface ValuationRequestInput {
src/services/supabase/valuationRequestTracker.ts:15:export interface ValuationRequestRecord {
src/services/supabase/valuationRequestTracker.ts:30:export async function createValuationRequest(input: ValuationRequestInput): Promise<ValuationRequestRecord | null> {
src/services/supabase/valuationRequestTracker.ts:55:    console.log('‚úÖ Valuation request created with ID:', data.id);
src/services/supabase/valuationRequestTracker.ts:66:export async function completeValuationRequest(
src/services/supabase/valuationRequestTracker.ts:92:    console.log('‚úÖ Valuation request completed successfully');
src/services/supabase/valuationRequestTracker.ts:103:export async function failValuationRequest(requestId: string, errorMessage: string): Promise<boolean> {
src/services/supabase/valuationRequestService.ts:3:export interface ValuationRequestData {
src/services/supabase/valuationRequestService.ts:15:export async function saveValuationRequest(data: ValuationRequestData) {
src/services/supabase/valuationRequestService.ts:43:    console.log('‚úÖ Valuation request saved successfully:', result);
src/services/supabase/valuationRequestService.ts:51:export async function getValuationRequest(id: string) {
src/services/supabase/explanationService.ts:3:export interface ValuationExplanationData {
src/services/supabase/explanationService.ts:29:export async function saveValuationExplanation(data: ValuationExplanationData) {
src/services/supabase/explanationService.ts:50:    console.log('‚úÖ Valuation explanation saved to database');
src/services/generateConfidenceScore.ts:71:  // +20 for exact VIN match (highest priority)
src/services/generateConfidenceScore.ts:76:    explanation.push('Confidence boosted for exact VIN match.');
src/services/generateConfidenceScore.ts:77:    console.log(`üìà Confidence: +${boost} for exact VIN match`);
src/components/result/ResultHeader.tsx:14:        <h1 className="text-3xl font-bold">Valuation Results</h1>
src/components/result/ResultHeader.tsx:22:          New Valuation
src/components/result/VehicleDetailsCard.tsx:73:              <DetailItem label="VIN" value={vin} fullWidth />
src/components/result/useValuationId.ts:3:export function useValuationId(searchParamsId?: string | null) {
src/components/result/useValuationId.ts:4:  const [valuationId, setValuationId] = useState<string | undefined>(
src/components/result/useValuationId.ts:11:    const getValuationId = () => {
src/components/result/useValuationId.ts:54:    const id = getValuationId();
src/components/result/useValuationId.ts:56:      setValuationId(id);
src/services/ValuationApiService.ts:2:import type { ValuationResult, AuditLog } from '@/types/valuation';
src/services/ValuationApiService.ts:5:export interface ValuationRequest {
src/services/ValuationApiService.ts:19:// Re-export ValuationResult for backward compatibility
src/services/ValuationApiService.ts:20:export type { ValuationResult };
src/services/ValuationApiService.ts:32: * Comprehensive Valuation API Service
src/services/ValuationApiService.ts:35:export class ValuationApiService {
src/services/ValuationApiService.ts:41:  static async createValuationRequest(requestData: ValuationRequest): Promise<{ 
src/services/ValuationApiService.ts:94:        throw new Error('Valuation request not found');
src/services/ValuationApiService.ts:98:      console.log('‚ÑπÔ∏è Market aggregation feature removed from ValuationApiService');
src/services/ValuationApiService.ts:121:  static async getValuationResult(requestId: string): Promise<ValuationResult | null> {
src/services/ValuationApiService.ts:196:  static async pollValuationProgress(
src/services/ValuationApiService.ts:198:    onProgress?: (result: ValuationResult) => void,
src/services/ValuationApiService.ts:201:  ): Promise<ValuationResult | null> {
src/services/ValuationApiService.ts:204:    const poll = async (): Promise<ValuationResult | null> => {
src/services/ValuationApiService.ts:205:      const result = await this.getValuationResult(requestId);
src/services/ValuationApiService.ts:269:   * Validate VIN format
src/services/ValuationApiService.ts:272:    // Basic VIN validation (17 characters, alphanumeric except I, O, Q)
src/services/ValuationApiService.ts:280:  static async getCachedValuation(vin: string): Promise<ValuationResult | null> {
src/services/ValuationApiService.ts:282:      // Look for recent valuation (within 7 days) for the same VIN
src/services/ValuationApiService.ts:293:        console.log('üéØ Found cached valuation for VIN:', vin);
src/services/ValuationApiService.ts:294:        return await this.getValuationResult(recentRequests[0].id);
src/services/ValuationApiService.ts:305:export default ValuationApiService;
src/services/valuationEngine.ts:4:export interface EnhancedValuationResult {
src/services/valuationEngine.ts:17:  // Valuation metrics
src/services/valuationEngine.ts:31:export interface ValuationInput {
src/services/valuationEngine.ts:46:export async function processValuation(input: ValuationInput): Promise<EnhancedValuationResult> {
src/services/valuationEngine.ts:78:    const result: EnhancedValuationResult = {
src/services/valuationEngine.ts:162:export const runValuation = processValuation;
src/services/valuationAuditLogger.ts:1:// Valuation Audit Logger - Enhanced audit trail system with service role support
src/services/valuationAuditLogger.ts:4:export interface ValuationAuditPayload {
src/services/valuationAuditLogger.ts:18:export async function logValuationAudit(payload: ValuationAuditPayload): Promise<string> {
src/services/valuationAuditLogger.ts:66:      console.log('‚úÖ Valuation audit logged with ID:', data.id);
src/services/valuationAuditLogger.ts:121:export async function logValuationAuditFallback(payload: ValuationAuditPayload): Promise<string> {
src/components/title-ownership/VinInputSection.tsx:23:  // Validate VIN format (17 characters, no I, O, Q)
src/components/title-ownership/VinInputSection.tsx:39:        Vehicle Identification Number (VIN)
src/components/title-ownership/VinInputSection.tsx:44:          placeholder="Enter 17-character VIN"
src/components/title-ownership/VinInputSection.tsx:65:          <span>VIN must be 17 characters (no I, O, or Q)</span>
src/components/title-ownership/VehicleHistorySection.tsx:29:  // Validate VIN format (17 characters, no I, O, Q)
src/components/title-ownership/VehicleHistorySection.tsx:36:      toast.error("Please enter a valid 17-character VIN");
src/components/title-ownership/VehicleHistorySection.tsx:65:          toast.info("No previous history found for this VIN. Starting fresh.");
src/components/title-ownership/VehicleHistorySection.tsx:88:      toast.error("Please enter a valid VIN first");
src/services/adjustmentHelpers.ts:1:// Adjustment Helper Functions for Valuation Engine
src/components/comprehensive/ComprehensiveValuationReport.tsx:5:import { ValuationData } from '@/types/unified';
src/components/comprehensive/ComprehensiveValuationReport.tsx:8:interface ComprehensiveValuationReportProps {
src/components/comprehensive/ComprehensiveValuationReport.tsx:9:  valuationData: ValuationData;
src/components/comprehensive/ComprehensiveValuationReport.tsx:17:export function ComprehensiveValuationReport({ 
src/components/comprehensive/ComprehensiveValuationReport.tsx:21:}: ComprehensiveValuationReportProps) {
src/components/comprehensive/ComprehensiveValuationReport.tsx:53:                <p className="text-sm font-medium text-gray-500">VIN</p>
src/components/comprehensive/ComprehensiveValuationReport.tsx:61:      {/* Valuation Summary Section */}
src/components/comprehensive/ComprehensiveValuationReport.tsx:64:          <CardTitle>Valuation Summary</CardTitle>
src/services/aiExplanationService.ts:1:// AI Explanation Service for Valuation Results
src/services/aiExplanationService.ts:83:  let explanation = `## üìä Valuation Breakdown\n\n`;
src/services/aiExplanationService.ts:105:  explanation += `- VIN Decode (Vehicle Specifications)\n`;
src/services/historyCheckService.ts:4: * NICB VINCheck API Service for Title Status
src/services/historyCheckService.ts:5: * Uses NICB's free VINCheck service to detect stolen vehicles and title issues
src/services/historyCheckService.ts:9:    console.warn('üö® [TITLE_CHECK] Invalid VIN provided:', vin);
src/services/historyCheckService.ts:14:    console.log('üîç [TITLE_CHECK] Checking title status for VIN:', vin);
src/services/historyCheckService.ts:75:    console.warn('üö® [RECALL_CHECK] Invalid VIN provided:', vin);
src/services/historyCheckService.ts:80:    console.log('üîç [RECALL_CHECK] Checking recalls for VIN:', vin);
src/services/historyCheckService.ts:135:    const recallResults = data.Results || [];
src/services/historyCheckService.ts:137:    recallResults.forEach((result: any, index: number) => {
src/components/marketing/AnnouncementBar.tsx:30:          Premium Valuation.
src/services/persistence/persistenceMonitor.ts:13:  lastValuationRequest?: Date;
src/services/persistence/persistenceMonitor.ts:15:  totalValuationRequests: number;
src/services/persistence/persistenceMonitor.ts:52:      lastValuationRequest: requestData?.[0]?.created_at ? new Date(requestData[0].created_at) : undefined,
src/services/persistence/persistenceMonitor.ts:54:      totalValuationRequests: requestCount || 0,
src/services/persistence/persistenceMonitor.ts:74:      totalValuationRequests: 0,
src/services/persistence/persistenceMonitor.ts:126:export async function testValuationRequestCreation(): Promise<{ success: boolean; error?: string; id?: string }> {
src/services/persistence/persistenceMonitor.ts:168:  const requestTest = await testValuationRequestCreation();
src/services/__tests__/photoScoring.test.ts:24:    const mockValuationId = "test-valuation-id";
src/services/__tests__/photoScoring.test.ts:42:    const result = await analyzePhotos(mockPhotoUrls, mockValuationId);
src/services/__tests__/photoScoring.test.ts:46:      body: { photoUrls: mockPhotoUrls, valuationId: mockValuationId },
src/services/__tests__/photoScoring.test.ts:63:    const mockValuationId = "test-valuation-id";
src/services/__tests__/photoScoring.test.ts:72:    await expect(analyzePhotos(mockPhotoUrls, mockValuationId)).rejects.toThrow(
src/services/__tests__/photoScoring.test.ts:76:      body: { photoUrls: mockPhotoUrls, valuationId: mockValuationId },
src/services/__tests__/photoScoring.test.ts:83:    const mockValuationId = "test-valuation-id";
src/services/__tests__/photoScoring.test.ts:91:    await expect(analyzePhotos(mockPhotoUrls, mockValuationId)).rejects.toThrow(
src/services/__tests__/photoScoring.test.ts:95:      body: { photoUrls: mockPhotoUrls, valuationId: mockValuationId },
src/services/__tests__/photoScoring.test.ts:102:    const mockValuationId = "test-valuation-id";
src/services/__tests__/photoScoring.test.ts:110:    const result = await analyzePhotos(mockPhotoUrls, mockValuationId);
src/services/__tests__/photoScoring.test.ts:118:      body: { photoUrls: mockPhotoUrls, valuationId: mockValuationId },
src/components/audit/AuditChecklist.tsx:49:          text: "VIN Lookup ‚Üí Valuation ‚Üí Result",
src/components/audit/AuditChecklist.tsx:56:          text: "Plate Lookup ‚Üí Valuation ‚Üí Result",
src/components/audit/AuditChecklist.tsx:63:          text: "Manual Entry ‚Üí Valuation ‚Üí Result",
src/components/audit/AuditChecklist.tsx:122:          text: "Results saved in photo_condition_scores",
src/components/audit/AuditChecklist.tsx:155:          text: "Injected into downloadable PDF",
src/components/audit/AuditChecklist.tsx:163:      title: "PDF REPORT SYSTEM",
src/components/audit/AuditChecklist.tsx:252:          text: "Valuation list loads cleanly",
src/components/audit/AuditChecklist.tsx:285:          text: "E2E tests cover VIN / Plate / Manual entry flows",
src/components/audit/AuditChecklist.tsx:292:          text: "E2E tests cover PDF generation",
src/components/audit/AuditChecklist.tsx:325:          text: "Valuation fetch test",
src/services/confidenceExplainer.ts:3:export interface ValuationExplanationInput {
src/services/confidenceExplainer.ts:32:export async function generateValuationExplanation(
src/services/confidenceExplainer.ts:33:  input: ValuationExplanationInput
src/services/confidenceExplainer.ts:46:        finalValuation: input.estimated_value,
src/services/confidenceExplainer.ts:74:function generateFallbackExplanation(input: ValuationExplanationInput): string {
src/services/vinForecastService.ts:31:      console.log('üìä Using cached forecast for VIN:', vin);
src/services/vinForecastService.ts:36:    console.log('üîÆ Generating new forecast for VIN:', vin);
src/services/auction.ts:5:export async function fetchAuctionResultsByVin(vin: string): Promise<AuctionResult[]> {
src/components/pdf/PDFPreview.tsx:9:interface PDFPreviewProps {
src/components/pdf/PDFPreview.tsx:23:export const PDFPreview: React.FC<PDFPreviewProps> = ({
src/components/pdf/PDFPreview.tsx:49:      toast.success("Sample PDF downloaded successfully");
src/components/pdf/PDFPreview.tsx:51:      console.error("Error generating sample PDF:", error);
src/components/pdf/PDFPreview.tsx:52:      toast.error("Failed to generate sample PDF");
src/components/pdf/PDFPreview.tsx:63:          PDF Valuation Report
src/components/pdf/PDFPreview.tsx:108:                  <li>‚Ä¢ VIN history verification</li>
src/services/photo/fetchPhotos.ts:7:export async function fetchValuationPhotos(
src/services/UnifiedLookupService.ts:31:        console.error('Invalid VIN format:', vin);
src/services/UnifiedLookupService.ts:36:          error: 'Invalid VIN format. VIN must be 17 characters (letters and numbers only, no I, O, Q)'
src/services/UnifiedLookupService.ts:57:          warning: 'NHTSA API unavailable. Using advanced VIN pattern analysis with enhanced accuracy.'
src/services/UnifiedLookupService.ts:109:        warning: data?.error || 'NHTSA returned incomplete data. Using enhanced VIN pattern analysis with improved accuracy.'
src/services/UnifiedLookupService.ts:113:      console.error("VIN lookup exception:", error);
src/services/UnifiedLookupService.ts:123:        warning: 'Service temporarily unavailable. Using enhanced VIN pattern matching with improved accuracy.'
src/services/UnifiedLookupService.ts:128:  static async lookupByPlate(plate: string, state: string, options: LookupOptions): Promise<UnifiedVehicleLookupResult> {
src/services/UnifiedLookupService.ts:152:        vin: 'MOCK_VIN_FROM_PLATE'
src/services/UnifiedLookupService.ts:163:      console.error("Plate lookup error:", error);
src/services/UnifiedLookupService.ts:168:        error: error instanceof Error ? error.message : 'Plate lookup failed'
src/services/UnifiedLookupService.ts:326:  static startPremiumValuation = (vehicleData: DecodedVehicleInfo): void => {
src/services/UnifiedLookupService.ts:341:// Enhanced lookup by VIN with enrichment
src/services/UnifiedLookupService.ts:347:export async function lookupByPlate(plate: string, state: string, options: LookupOptions = { tier: 'free', mode: 'vpic', includeHistory: false, includeMarketData: false }): Promise<UnifiedVehicleLookupResult> {
src/services/UnifiedLookupService.ts:348:  return UnifiedLookupService.lookupByPlate(plate, state, options);
src/components/form/validation.ts:6:// VIN validation schema
src/components/form/validation.ts:9:    .min(17, { message: "VIN must be 17 characters" })
src/components/form/validation.ts:10:    .max(17, { message: "VIN must be 17 characters" })
src/components/form/validation.ts:12:      message: "VIN contains invalid characters (no I, O, or Q allowed)",
src/components/form/validation.ts:19:// Plate validation schema
src/services/vehicleLookupService.ts:5:  console.log('üîÑ vehicleLookupService: Routing to real NHTSA API via unified-decode for VIN:', vin);
src/services/vehicleLookupService.ts:51:      throw new Error(data?.error || 'Unable to decode VIN');
src/services/vehicleLookupService.ts:55:    throw error instanceof Error ? error : new Error('VIN lookup failed');
src/services/vehicleLookupService.ts:59:export async function fetchVehicleByPlate(plate: string, state: string): Promise<DecodedVehicleInfo> {
src/services/vehicleLookupService.ts:60:  console.log('üîÑ vehicleLookupService: Plate lookup for:', plate, 'state:', state);
src/services/vehicleLookupService.ts:93:  console.log('‚úÖ vehicleLookupService: Plate lookup completed (mock data):', mockVehicle);
src/components/form/index.ts:3:export * from "../valuation/free/FreeValuationForm";
src/services/VinLookupService.ts:8:    console.log("VinLookupService: Redirecting to UnifiedLookupService for VIN", vin);
src/services/VinLookupService.ts:13:  static startPremiumValuation = (vehicleData: UnifiedVehicleData): void => {
src/services/VinLookupService.ts:14:    return UnifiedLookupService.startPremiumValuation(vehicleData);
src/services/ValuationIntegrationService.ts:3:import { ValuationApiService, ValuationRequest, ValuationResult } from './ValuationApiService';
src/services/ValuationIntegrationService.ts:16:export interface ValuationPipelineResult {
src/services/ValuationIntegrationService.ts:21:  valuationResult?: ValuationResult;
src/services/ValuationIntegrationService.ts:33: * Comprehensive service for integrating VIN decode ‚Üí enrichment ‚Üí valuation pipeline
src/services/ValuationIntegrationService.ts:36:export class ValuationIntegrationService {
src/services/ValuationIntegrationService.ts:39:   * Main entry point: Complete VIN to valuation pipeline
src/services/ValuationIntegrationService.ts:41:  static async processVinToValuation(
src/services/ValuationIntegrationService.ts:43:    additionalData?: Partial<ValuationRequest>,
src/services/ValuationIntegrationService.ts:45:  ): Promise<ValuationPipelineResult> {
src/services/ValuationIntegrationService.ts:46:    const auditTrail: ValuationPipelineResult['auditTrail'] = [];
src/services/ValuationIntegrationService.ts:50:      console.log('üöÄ Starting complete VIN to valuation pipeline for:', vin);
src/services/ValuationIntegrationService.ts:52:      // Stage 1: VIN Decode
src/services/ValuationIntegrationService.ts:57:        message: 'Starting VIN decode process'
src/services/ValuationIntegrationService.ts:72:          message: lookupResult.error || 'VIN decode failed'
src/services/ValuationIntegrationService.ts:77:          error: lookupResult.error || 'VIN decode failed',
src/services/ValuationIntegrationService.ts:87:        message: `VIN decoded successfully via ${lookupResult.source}`,
src/services/ValuationIntegrationService.ts:91:      // Stage 2: VIN Enrichment (check if we have enrichment data)
src/services/ValuationIntegrationService.ts:116:            message: 'Using cached VIN enrichment data',
src/services/ValuationIntegrationService.ts:133:            message: 'VIN enrichment job triggered'
src/services/ValuationIntegrationService.ts:141:          message: `VIN enrichment failed: ${error instanceof Error ? error.message : 'Unknown error'}`
src/services/ValuationIntegrationService.ts:145:      // Stage 3: Create Valuation Request using decoded data
src/services/ValuationIntegrationService.ts:146:      const valuationRequest: ValuationRequest = {
src/services/ValuationIntegrationService.ts:170:        message: 'Valuation request prepared with decoded VIN data',
src/services/ValuationIntegrationService.ts:175:      const createResult = await ValuationApiService.createValuationRequest(valuationRequest);
src/services/ValuationIntegrationService.ts:199:        message: `Valuation request created with ID: ${requestId}`
src/services/ValuationIntegrationService.ts:203:      const aggregationResult = await ValuationApiService.triggerAggregation(requestId);
src/services/ValuationIntegrationService.ts:223:      const valuationResult = await ValuationApiService.getValuationResult(requestId);
src/services/ValuationIntegrationService.ts:247:        message: `Valuation completed: $${valuationResult.estimated_value} (${valuationResult.confidence_score}% confidence)`,
src/services/ValuationIntegrationService.ts:269:      console.error('‚ùå VIN to valuation pipeline failed:', error);
src/services/ValuationIntegrationService.ts:287:   * Get enrichment data for a VIN
src/services/ValuationIntegrationService.ts:311:      console.error('Error fetching VIN enrichment data:', error);
src/services/ValuationIntegrationService.ts:317:   * Store enrichment data for a VIN
src/services/ValuationIntegrationService.ts:343:      console.error('Error storing VIN enrichment data:', error);
src/services/ValuationIntegrationService.ts:349:   * Check if we have recent valuation data for a VIN
src/services/ValuationIntegrationService.ts:351:  static async getCachedValuationByVin(vin: string, maxAgeHours: number = 168): Promise<ValuationResult | null> {
src/services/ValuationIntegrationService.ts:366:        return await ValuationApiService.getValuationResult(recentRequest.id);
src/services/ValuationIntegrationService.ts:382:    auditTrail: ValuationPipelineResult['auditTrail']
src/services/ValuationIntegrationService.ts:406:   * Validate VIN format before processing
src/services/ValuationIntegrationService.ts:410:      return { valid: false, error: 'VIN is required' };
src/services/ValuationIntegrationService.ts:414:      return { valid: false, error: 'VIN must be exactly 17 characters' };
src/services/ValuationIntegrationService.ts:419:      return { valid: false, error: 'VIN contains invalid characters (I, O, Q not allowed)' };
src/services/ValuationIntegrationService.ts:423:      return { valid: false, error: 'VIN format is invalid' };
src/services/ValuationIntegrationService.ts:430:export default ValuationIntegrationService;
src/components/admin/SystemHealthDashboard.tsx:65:      name: 'Valuation Pipeline',
src/components/admin/SystemHealthDashboard.tsx:69:        { name: 'VIN Decode', status: 'healthy', value: '99.8% success', lastUpdated: '2025-01-07T12:00:00Z' },
src/services/valuation/vehicleDataService.ts:18:    // First try to get from VIN decoding service
src/services/valuation/vehicleDataService.ts:24:      console.error('VIN decoding error:', vinError);
src/services/valuation/vehicleDataService.ts:74:export async function getVehicleDataByValuationId(valuationId: string): Promise<VehicleData | null> {
src/services/valuation/vehicleDataService.ts:83:      console.error('Valuation lookup error:', error);
src/services/valuation/errorHandler.ts:1:// Enhanced Error Handler for Valuation System
src/services/valuation/errorHandler.ts:2:import { logValuationAuditFallback } from "@/services/valuationAuditLogger";
src/services/valuation/errorHandler.ts:4:export interface ValuationError {
src/services/valuation/errorHandler.ts:13:export class ResilientValuationError extends Error {
src/services/valuation/errorHandler.ts:19:  constructor(error: ValuationError) {
src/services/valuation/errorHandler.ts:25:    this.name = 'ResilientValuationError';
src/services/valuation/errorHandler.ts:32:export async function handleValuationError(
src/services/valuation/errorHandler.ts:37:  const classifiedError = classifyValuationError(error);
src/services/valuation/errorHandler.ts:48:    await logValuationAuditFallback({
src/services/valuation/errorHandler.ts:69:      throw new ResilientValuationError({
src/services/valuation/errorHandler.ts:79:  throw new ResilientValuationError(classifiedError);
src/services/valuation/errorHandler.ts:85:function classifyValuationError(error: any): ValuationError {
src/services/valuation/errorHandler.ts:133:  // VIN decoding errors
src/services/valuation/errorHandler.ts:136:      code: 'VIN_DECODE_ERROR',
src/services/valuation/errorHandler.ts:137:      message: 'VIN decoding failed - using manual vehicle data',
src/services/valuation/marketListingService.ts:85:    // Batch insert with conflict handling (avoid duplicates by URL and VIN within 24h)
src/services/valuation/marketListingService.ts:95:      const fallbackResults = await insertListingsOneByOne(listingsToInsert);
src/services/valuation/marketListingService.ts:97:        success: fallbackResults.savedCount > 0,
src/services/valuation/marketListingService.ts:98:        savedCount: fallbackResults.savedCount,
src/services/valuation/marketListingService.ts:99:        errors: [`Batch insert failed: ${error.message}`, ...fallbackResults.errors]
src/services/valuation/listingAuditService.ts:34:export async function recordValuationOutcome(valuationId: string, final: {
src/services/valuation/enhancedMarketListingService.ts:43:  maxResults?: number;
src/services/valuation/enhancedMarketListingService.ts:87:      const limit = filters.maxResults || 20;
src/services/valuation/enhancedMarketListingService.ts:160:      maxResults: filters.maxResults || 50
src/services/valuation/enhancedMarketListingService.ts:163:    const broaderResults = await this.fetchRealMarketListings(broaderFilters);
src/services/valuation/enhancedMarketListingService.ts:166:    if (filters.year && broaderResults.length > 0) {
src/services/valuation/enhancedMarketListingService.ts:168:      const filteredByYear = broaderResults.filter(listing => 
src/services/valuation/enhancedMarketListingService.ts:177:    console.log(`‚úÖ Found ${broaderResults.length} similar vehicles`);
src/services/valuation/enhancedMarketListingService.ts:178:    return broaderResults;
src/services/valuation/dataValidation.ts:13:    errors.push('VIN is required');
src/services/valuation/dataValidation.ts:20:    errors.push('VIN must be exactly 17 characters');
src/services/valuation/dataValidation.ts:24:    errors.push('VIN contains invalid characters');
src/services/valuation/dataValidation.ts:28:    errors.push('VIN cannot contain letters I, O, or Q');
src/services/valuation/vehicleDecodeService.ts:10: * PHASE 1 FIX: Core VIN decode service that ensures decode results are saved to database
src/services/valuation/vehicleDecodeService.ts:17:        error: 'Invalid VIN format. VIN must be 17 characters long.'
src/services/valuation/vehicleDecodeService.ts:21:    console.log('üîç [VIN DECODE] Starting decode for VIN:', vin);
src/services/valuation/vehicleDecodeService.ts:29:      console.error('‚ùå [VIN DECODE] Edge function error:', error);
src/services/valuation/vehicleDecodeService.ts:32:        error: error.message || 'VIN decode service failed'
src/services/valuation/vehicleDecodeService.ts:37:      console.error('‚ùå [VIN DECODE] Decode failed:', data?.error);
src/services/valuation/vehicleDecodeService.ts:40:        error: data?.error || 'Failed to decode VIN'
src/services/valuation/vehicleDecodeService.ts:44:    console.log('‚úÖ [VIN DECODE] Successfully decoded VIN:', data.decoded);
src/services/valuation/vehicleDecodeService.ts:56:      console.warn('‚ö†Ô∏è [VIN DECODE] Could not verify saved vehicle:', verifyError);
src/services/valuation/vehicleDecodeService.ts:58:      console.log('‚úÖ [VIN DECODE] Verified vehicle saved to database');
src/services/valuation/vehicleDecodeService.ts:60:      console.warn('‚ö†Ô∏è [VIN DECODE] Vehicle may not have been saved to database');
src/services/valuation/vehicleDecodeService.ts:69:    console.error('‚ùå [VIN DECODE] Service error:', error);
src/services/valuation/vehicleDecodeService.ts:72:      error: error instanceof Error ? error.message : 'VIN decode service failed'
src/services/valuation/confidenceEngine.ts:65:  // Check for exact VIN match from REAL data only
src/services/valuation/confidenceEngine.ts:67:    marketDataBonus += 25; // Major confidence boost for exact VIN
src/services/valuation/confidenceEngine.ts:68:    console.log('üéØ EXACT VIN MATCH CONFIDENCE BOOST: +25 points');
src/services/valuation/marketDataService.ts:43:        maxResults: 20
src/services/valuation/marketDataService.ts:57:        maxResults: 30
src/services/valuation/marketDataService.ts:77:        maxResults: 50
src/services/vehicleDecodeService.ts:8:    console.log('üîç Starting VIN decode for:', vin);
src/services/vehicleDecodeService.ts:79:    console.log(`üîÑ Retrying decode (attempt ${retryCount + 1}/${MAX_RETRIES}) for VIN: ${vin}`);
src/services/vehicleDecodeService.ts:104:      error: 'Unable to decode VIN after multiple attempts.'
src/services/vehicleDecodeService.ts:117:    console.log('üîç Starting VIN decode system audit...');
src/services/competitorPriceService.ts:22: * Fetch competitor prices for a specific VIN
src/services/competitorPriceService.ts:35:    console.log(`üîç Fetching competitor prices for VIN: ${vin}`)
src/services/realMarketplaceService.ts:10:  maxResults?: number;
src/services/realMarketplaceService.ts:58:        .limit(params.maxResults || 20);
src/services/realMarketplaceService.ts:60:      // Filter by VIN if available
src/services/realMarketplaceService.ts:118:        .limit(params.maxResults || 20);
src/services/realMarketplaceService.ts:126:      // Filter by VIN if available
src/services/followUpService.ts:3:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/services/followUpService.ts:4:import { calculateCompletionPercentage, validateFormData, transformForValuation } from '@/utils/followUpDataHelpers';
src/services/followUpService.ts:6:export class FollowUpService {
src/services/followUpService.ts:10:  static async saveAnswers(formData: FollowUpAnswers): Promise<{ success: boolean; error?: string }> {
src/services/followUpService.ts:42:   * Get follow-up answers by VIN
src/services/followUpService.ts:44:  static async getAnswersByVin(vin: string): Promise<{ data?: FollowUpAnswers; error?: string }> {
src/services/followUpService.ts:94:  static async submitForValuation(formData: FollowUpAnswers): Promise<{ success: boolean; valuationId?: string; error?: string }> {
src/services/followUpService.ts:116:      const valuationData = transformForValuation(completedData);
src/services/followUpService.ts:123:      console.error('Error in submitForValuation:', error);
src/services/followUpService.ts:131:  static async getUserHistory(userId?: string): Promise<{ data: FollowUpAnswers[]; error?: string }> {
src/services/plateService.ts:3:import { PlateLookupInfo } from '@/types/vehicle';
src/services/plateService.ts:5:export async function lookupPlate(plate: string, state: string): Promise<PlateLookupInfo | null> {
src/components/admin/ValuationDebugDashboard.tsx:1:// Debug Dashboard for Valuation Pipeline Monitoring
src/components/admin/ValuationDebugDashboard.tsx:17:  lastValuation?: any;
src/components/admin/ValuationDebugDashboard.tsx:23:export function ValuationDebugDashboard() {
src/components/admin/ValuationDebugDashboard.tsx:47:        latestValuation,
src/components/admin/ValuationDebugDashboard.tsx:63:        lastValuation: latestValuation.data,
src/components/admin/ValuationDebugDashboard.tsx:122:            Valuation Pipeline Debug Dashboard
src/components/admin/ValuationDebugDashboard.tsx:137:            {/* Valuation Requests */}
src/components/admin/ValuationDebugDashboard.tsx:141:                <span className="text-sm font-medium">Valuation Requests</span>
src/components/admin/ValuationDebugDashboard.tsx:198:        {/* Latest Valuation Request */}
src/components/admin/ValuationDebugDashboard.tsx:201:            <CardTitle className="text-lg">Latest Valuation Request</CardTitle>
src/components/admin/ValuationDebugDashboard.tsx:204:            {stats.lastValuation ? (
src/components/admin/ValuationDebugDashboard.tsx:206:                <div><strong>VIN:</strong> {stats.lastValuation.vin}</div>
src/components/admin/ValuationDebugDashboard.tsx:207:                <div><strong>ZIP:</strong> {stats.lastValuation.zip_code}</div>
src/components/admin/ValuationDebugDashboard.tsx:208:                <div><strong>Final Value:</strong> ${stats.lastValuation.final_value?.toLocaleString() || 'N/A'}</div>
src/components/admin/ValuationDebugDashboard.tsx:209:                <div><strong>Confidence:</strong> {stats.lastValuation.confidence_score}%</div>
src/components/admin/ValuationDebugDashboard.tsx:210:                <div><strong>Created:</strong> {new Date(stats.lastValuation.created_at).toLocaleString()}</div>
src/components/admin/ValuationDebugDashboard.tsx:226:                <div><strong>VIN:</strong> {stats.lastMarketListing.vin || 'N/A'}</div>
src/components/admin/ValuationDebugDashboard.tsx:246:                <div><strong>VIN:</strong> {stats.lastAuditLog.vin}</div>
src/components/admin/ValuationDebugDashboard.tsx:297:                  No valuation requests found. Check if saveValuationRequest() is being called.
src/components/admin/ValuationDebugDashboard.tsx:315:                  No audit logs found. Check if logValuationAudit() is working properly.
src/components/admin/PersistenceHealthDashboard.tsx:12:  const [testResults, setTestResults] = useState<any>(null);
src/components/admin/PersistenceHealthDashboard.tsx:30:      setTestResults(results);
src/components/admin/PersistenceHealthDashboard.tsx:147:          {/* Valuation Requests Status */}
src/components/admin/PersistenceHealthDashboard.tsx:151:                Valuation Requests
src/components/admin/PersistenceHealthDashboard.tsx:158:                  <span className="font-medium">Total Records:</span> {health.totalValuationRequests}
src/components/admin/PersistenceHealthDashboard.tsx:160:                {health.lastValuationRequest && (
src/components/admin/PersistenceHealthDashboard.tsx:162:                    <span className="font-medium">Last Entry:</span> {health.lastValuationRequest.toLocaleString()}
src/components/admin/PersistenceHealthDashboard.tsx:174:      {/* Test Results */}
src/components/admin/PersistenceHealthDashboard.tsx:175:      {testResults && (
src/components/admin/PersistenceHealthDashboard.tsx:178:            <CardTitle>Test Results</CardTitle>
src/components/admin/PersistenceHealthDashboard.tsx:185:                  {getStatusIcon(testResults.auditTest.success)}
src/components/admin/PersistenceHealthDashboard.tsx:187:                {testResults.auditTest.success ? (
src/components/admin/PersistenceHealthDashboard.tsx:189:                    ‚úÖ Successfully created test audit log: {testResults.auditTest.id}
src/components/admin/PersistenceHealthDashboard.tsx:193:                    ‚ùå Failed: {testResults.auditTest.error}
src/components/admin/PersistenceHealthDashboard.tsx:200:                  Valuation Request Test
src/components/admin/PersistenceHealthDashboard.tsx:201:                  {getStatusIcon(testResults.requestTest.success)}
src/components/admin/PersistenceHealthDashboard.tsx:203:                {testResults.requestTest.success ? (
src/components/admin/PersistenceHealthDashboard.tsx:205:                    ‚úÖ Successfully created test request: {testResults.requestTest.id}
src/components/admin/PersistenceHealthDashboard.tsx:209:                    ‚ùå Failed: {testResults.requestTest.error}
src/pages/StatsPage.tsx:7:  const [totalValuations, setTotalValuations] = useState<number>(0);
src/pages/StatsPage.tsx:14:    setTotalValuations(15680);
src/pages/StatsPage.tsx:21:    { label: "Total Valuations", value: totalValuations, trend: "+8%" },
src/pages/DealerProfileSettings.tsx:255:                    PDF, JPG or PNG up to 5MB
src/components/admin/FANGOrchestrationDashboard.tsx:225:              Latest Execution Results
src/pages/admin/ValuationInsightsPage.tsx:4:import ValuationInsights from './ValuationInsights';
src/pages/admin/ValuationInsightsPage.tsx:6:export default function ValuationInsightsPage() {
src/pages/admin/ValuationInsightsPage.tsx:23:  return <ValuationInsights />;
src/pages/admin/ValuationInsights.tsx:44:export default function ValuationInsights() {
src/pages/admin/ValuationInsights.tsx:191:          <h1 className="text-3xl font-bold">Valuation Insights Dashboard</h1>
src/pages/admin/ValuationInsights.tsx:375:                  Audit Failures - Valuations Missing Logs
src/pages/admin/ValuationInsights.tsx:392:                        <div className="text-sm text-muted-foreground">Total Valuations</div>
src/pages/ProfessionalHomePage.tsx:28:  console.log('üè† ProfessionalHomePage rendering - should be inside ValuationProvider');
src/pages/ProfessionalHomePage.tsx:54:                Get Premium Valuation
src/pages/ProfessionalHomePage.tsx:64:                Basic Valuation (FREE)
src/pages/ProfessionalHomePage.tsx:76:              Start Your Free Valuation
src/pages/ProfessionalHomePage.tsx:79:              Enter your VIN or license plate to get an instant vehicle valuation.
src/pages/ProfessionalHomePage.tsx:163:      {/* Premium Valuation Section */}
src/pages/ProfessionalHomePage.tsx:225:                  desc: 'Receive your complete report immediately after purchase, with PDF export option.',
src/pages/ProfessionalHomePage.tsx:259:                Get Premium Valuation - $29.99
src/pages/ProfessionalHomePage.tsx:290:                ['VIN Lookup', true, true, true, true, true, 'Lightning Fast'],
src/pages/ProfessionalHomePage.tsx:291:                ['Plate Lookup', false, true, false, false, false, 'Yes'],
src/pages/ProfessionalHomePage.tsx:296:                ['Report PDF Export', true, true, true, false, true, 'Branded Export'],
src/pages/ProfessionalHomePage.tsx:381:                  Get Premium Valuation
src/pages/ProfessionalHomePage.tsx:535:              Basic Valuation (FREE)
src/pages/DealerInsightsPage.tsx:33:    { action: 'Valuation', time: '2 hours ago' },
src/pages/OffersPage.tsx:4:import { useValuationResult } from '@/hooks/useValuationResult';
src/pages/OffersPage.tsx:11:  const { result, isLoading, error, calculateValuation } = useValuationResult();
src/pages/OffersPage.tsx:13:  const handleCalculateValuation = async () => {
src/pages/OffersPage.tsx:15:      await calculateValuation({
src/pages/OffersPage.tsx:44:                <Button onClick={handleCalculateValuation} disabled={isLoading}>
src/pages/OffersPage.tsx:45:                  {isLoading ? 'Calculating...' : 'Get Valuation'}
src/pages/DealerDashboard.tsx:12:      title: "Valuations This Week",
src/pages/DealerDashboard.tsx:62:            <h3 className="text-lg font-semibold">Valuation Tools</h3>
src/pages/DealerDashboard.tsx:64:              Run VIN, plate, or manual valuations and view saved reports.
src/pages/PremiumPage.tsx:54:                Get Premium Valuation - $29.99
src/pages/PremiumPage.tsx:83:              Start Your Premium Valuation
src/pages/PremiumPage.tsx:86:              Enter your VIN or license plate to begin your comprehensive vehicle analysis.
src/pages/PremiumPage.tsx:154:                  desc: 'Receive your complete report immediately after purchase, with PDF export option.',
src/pages/PremiumPage.tsx:205:                    <h3 className="text-2xl font-bold text-foreground mb-2">Basic Valuation</h3>
src/pages/PremiumPage.tsx:239:                    Start Basic Valuation
src/pages/PremiumPage.tsx:274:                      'Professional PDF export',
src/pages/PremiumPage.tsx:290:                    Get Premium Valuation - $29.99
src/components/referrals/ReferralModal.tsx:31:          title: 'Car Detective - Free Vehicle Valuations',
src/components/SimilarListingsSection.tsx:98:                        VIN Match
src/pages/PrivacyPolicyPage.tsx:23:                Vehicle information (VIN, license plate, make, model, year)
src/components/steps/VehicleLookup.tsx:19:    if (!vinValue) return "VIN is required";
src/components/steps/VehicleLookup.tsx:20:    if (vinValue.length !== 17) return "VIN must be exactly 17 characters";
src/components/steps/VehicleLookup.tsx:22:      return "VIN contains invalid characters";
src/components/steps/VehicleLookup.tsx:64:            <Label htmlFor="vin">Vehicle Identification Number (VIN)</Label>
src/components/steps/VehicleLookup.tsx:68:              placeholder="Enter 17-character VIN"
src/components/steps/VehicleLookup.tsx:82:                Looking Up VIN...
src/components/professional/ProfessionalResultsPage.tsx:25:interface ValuationData {
src/components/professional/ProfessionalResultsPage.tsx:48:export default function ProfessionalResultsPage() {
src/components/professional/ProfessionalResultsPage.tsx:52:  const [valuationData, setValuationData] = useState<ValuationData | null>(null);
src/components/professional/ProfessionalResultsPage.tsx:63:      setValuationData(null);
src/components/professional/ProfessionalResultsPage.tsx:86:            fetchError = new Error(`No valuation found for VIN: ${identifier}`);
src/components/professional/ProfessionalResultsPage.tsx:113:          throw fetchError || new Error('Valuation data not found');
src/components/professional/ProfessionalResultsPage.tsx:121:          const { runValuation } = await import('@/lib/ainClient');
src/components/professional/ProfessionalResultsPage.tsx:123:          const ainResult = await runValuation({
src/components/professional/ProfessionalResultsPage.tsx:184:        setValuationData({
src/components/professional/ProfessionalResultsPage.tsx:201:        console.error('‚ùå Results page error:', error);
src/components/professional/ProfessionalResultsPage.tsx:217:          <h2 className="text-xl font-semibold text-foreground mb-2">Processing Valuation</h2>
src/components/professional/ProfessionalResultsPage.tsx:229:            <CardTitle className="text-red-600">Unable to Load Results</CardTitle>
src/components/professional/ProfessionalResultsPage.tsx:280:      {/* Hero Results Section */}
src/components/professional/ProfessionalResultsPage.tsx:285:              Valuation Complete
src/components/professional/ProfessionalResultsPage.tsx:288:              Your Vehicle Valuation
src/components/professional/ProfessionalResultsPage.tsx:295:          {/* Main Valuation Card */}
src/components/professional/ProfessionalResultsPage.tsx:355:                  Share Results
src/components/professional/ProfessionalResultsPage.tsx:361:          {/* Valuation Insights */}
src/components/professional/ProfessionalResultsPage.tsx:363:            title="Valuation Insights"
src/components/professional/ProfessionalResultsPage.tsx:375:                  Upgrade to premium for comprehensive CARFAX reports, dealer offers, and professional PDF exports.
src/pages/PremiumResultsPage.tsx:5:export default function PremiumResultsPage() {
src/pages/ValuationFollowUpPage.tsx:6:import { TabbedFollowUpForm } from '@/components/followup/TabbedFollowUpForm';
src/pages/ValuationFollowUpPage.tsx:9:import { useValuationContext } from '@/contexts/ValuationContext';
src/pages/ValuationFollowUpPage.tsx:14:export default function ValuationFollowUpPage() {
src/pages/ValuationFollowUpPage.tsx:17:  const { rerunValuation } = useValuationContext();
src/pages/ValuationFollowUpPage.tsx:52:      // FIX #1: Validate VIN first
src/pages/ValuationFollowUpPage.tsx:57:        }, false, 'Invalid VIN format');
src/pages/ValuationFollowUpPage.tsx:58:        toast.error('Invalid VIN. Please go back and enter a valid 17-character VIN.');
src/pages/ValuationFollowUpPage.tsx:71:      const { FollowUpService } = await import('@/services/followUpService');
src/pages/ValuationFollowUpPage.tsx:72:      const { data: followUpData, error: followUpError } = await FollowUpService.getAnswersByVin(vehicleData.vin);
src/pages/ValuationFollowUpPage.tsx:109:      await rerunValuation(valuationInput);
src/pages/ValuationFollowUpPage.tsx:115:      toast.success('Valuation completed successfully!');
src/pages/ValuationFollowUpPage.tsx:174:                Complete Your Comprehensive Valuation
src/pages/ValuationFollowUpPage.tsx:210:            <span className="text-sm font-medium text-gray-500">Final Results</span>
src/pages/ValuationFollowUpPage.tsx:218:              Complete Your Comprehensive Valuation
src/pages/ValuationFollowUpPage.tsx:225:          <TabbedFollowUpForm
src/pages/AuthTestPage.tsx:5:  const [testResults, setTestResults] = useState<any[]>([]);
src/pages/AuthTestPage.tsx:13:      setTestResults([
src/pages/AuthTestPage.tsx:29:        results={testResults}
src/pages/PricingPage.tsx:74:                  <span>PDF download option</span>
src/pages/PremiumValuationPage.tsx:5:export default function PremiumValuationPage() {
src/pages/PremiumValuationPage.tsx:10:          Premium Valuation
src/pages/GetValuationPage.tsx:8:export default function GetValuationPage() {
src/pages/GetValuationPage.tsx:27:              Free Vehicle Valuation
src/pages/GetValuationPage.tsx:30:              Get an instant, basic vehicle valuation at no cost. Enter your VIN or license plate below.
src/pages/GetValuationPage.tsx:50:            Upgrade to Premium Valuation - $29.99
src/pages/ModalShowcase.tsx:6:import { ValuationStepsModal } from '@/components/modals/ValuationStepsModal';
src/pages/ModalShowcase.tsx:12:  const [valuationStepsOpen, setValuationStepsOpen] = useState(false);
src/pages/ModalShowcase.tsx:80:            {/* Valuation Steps Modal Demo */}
src/pages/ModalShowcase.tsx:86:                <CardTitle>Valuation Steps Modal</CardTitle>
src/pages/ModalShowcase.tsx:94:                  onClick={() => setValuationStepsOpen(true)}
src/pages/ModalShowcase.tsx:191:      <ValuationStepsModal
src/pages/ModalShowcase.tsx:193:        onClose={() => setValuationStepsOpen(false)}
src/pages/ModalShowcase.tsx:194:        onStartValuation={(type) => {
src/pages/ModalShowcase.tsx:196:          setValuationStepsOpen(false);
src/pages/NicbVinCheckPage.tsx:15:      <h1 className="text-2xl font-bold mb-2">NICB VIN Check</h1>
src/pages/NicbVinCheckPage.tsx:24:            Enter a VIN to check the National Insurance Crime Bureau (NICB)
src/pages/NicbVinCheckPage.tsx:34:        <h2 className="text-xl font-semibold mb-4">About NICB VIN Check</h2>
src/pages/NicbVinCheckPage.tsx:37:            The NICB VIN Check is a free service provided by the National
src/pages/NicbVinCheckPage.tsx:52:            While the NICB VIN Check is a valuable resource, it should not be
src/pages/api/valuation/submit-followup.ts:3:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/pages/api/valuation/submit-followup.ts:5:export default async function submitFollowUp(followUpData: FollowUpAnswers) {
src/pages/api/valuation/submit-followup.ts:9:      throw new Error('VIN is required');
src/pages/ResultsPage.tsx:1:import ProfessionalResultsPage from '@/components/professional/ProfessionalResultsPage';
src/pages/ResultsPage.tsx:3:export default function ResultsPage() {
src/pages/ResultsPage.tsx:4:  return <ProfessionalResultsPage />;
src/pages/EquipmentPage.tsx:89:          Continue to Valuation
src/pages/ValuationPage.tsx:5:export default function ValuationPage() {
src/pages/ValuationPage.tsx:11:            Get Your Vehicle Valuation
src/pages/ValuationPage.tsx:14:            Enter your VIN or license plate to get an instant, accurate vehicle valuation.
src/pages/PremiumConditionPage.tsx:46:          Continue to Premium Valuation
src/pages/DashboardPage.tsx:38:              New Valuation
src/pages/DashboardPage.tsx:48:                Start Valuation
src/pages/DashboardPage.tsx:58:              Valuation History
src/pages/view-offer/ViewOfferPage.tsx:215:                    <span className="text-muted-foreground">VIN:</span>
src/pages/valuation/result/ValuationResultPage.tsx:5:export default function ValuationResultPage() {
src/pages/valuation/ValuationPage.tsx:6:// ValuationEngineTestComponent removed - engine deleted
src/pages/valuation/ValuationPage.tsx:9:import { UIResultsDisplayValidationComponent } from '@/components/test/UIResultsDisplayValidationComponent';
src/pages/valuation/ValuationPage.tsx:10:import { PDFShareValidationComponent } from '@/components/test/PDFShareValidationComponent';
src/pages/valuation/ValuationPage.tsx:13:export default function ValuationPage() {
src/pages/valuation/ValuationPage.tsx:45:      {/* UI Results Display Validation Test */}
src/pages/valuation/ValuationPage.tsx:48:          <CardTitle className="text-purple-700">üéØ UI Results Page Display Validation (Prompt 2.4)</CardTitle>
src/pages/valuation/ValuationPage.tsx:50:            THIRD: Validate that ResultsPage correctly renders valuation results, market listings, confidence scores, and PDF/share functionality.
src/pages/valuation/ValuationPage.tsx:54:          <UIResultsDisplayValidationComponent />
src/pages/valuation/ValuationPage.tsx:58:      {/* PDF Export & Share Validation Test */}
src/pages/valuation/ValuationPage.tsx:61:          <CardTitle className="text-indigo-700">üìÑ PDF Export & Share Link Verification (Prompt 2.5)</CardTitle>
src/pages/valuation/ValuationPage.tsx:63:            FOURTH: Validate PDF generation, sharing logic, QR code routing, and fallback handling.
src/pages/valuation/ValuationPage.tsx:67:          <PDFShareValidationComponent />
src/pages/valuation/ValuationPage.tsx:74:          <CardTitle className="text-orange-700">üöß Complete Valuation Test</CardTitle>
src/pages/valuation/ValuationPage.tsx:80:          <p className="text-center text-muted-foreground">Valuation engine test component removed - now using AIN API only</p>
src/pages/valuation/ValuationPage.tsx:84:      {/* Main Valuation Interface */}
src/pages/valuation/ValuationPage.tsx:87:          <CardTitle>Vehicle Valuation</CardTitle>
src/pages/valuation/plate/PlateValuationPage.tsx:5:import { UnifiedFollowUpForm } from '@/components/followup/UnifiedFollowUpForm';
src/pages/valuation/plate/PlateValuationPage.tsx:7:import { UnifiedPlateLookup } from '@/components/lookup/UnifiedPlateLookup';
src/pages/valuation/plate/PlateValuationPage.tsx:10:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/pages/valuation/plate/PlateValuationPage.tsx:16:export default function PlateValuationPage() {
src/pages/valuation/plate/PlateValuationPage.tsx:18:  const [showFollowUp, setShowFollowUp] = useState(false);
src/pages/valuation/plate/PlateValuationPage.tsx:21:    console.log('‚úÖ Plate vehicle data:', data);
src/pages/valuation/plate/PlateValuationPage.tsx:47:    setShowFollowUp(true);
src/pages/valuation/plate/PlateValuationPage.tsx:50:  const handleFollowUpSubmit = async (followUpAnswers: FollowUpAnswers) => {
src/pages/valuation/plate/PlateValuationPage.tsx:51:    console.log('‚úÖ Plate follow-up submitted:', followUpAnswers);
src/pages/valuation/plate/PlateValuationPage.tsx:52:    toast.success('Plate valuation completed successfully!');
src/pages/valuation/plate/PlateValuationPage.tsx:59:      {!showFollowUp ? (
src/pages/valuation/plate/PlateValuationPage.tsx:63:            badge="License Plate Lookup"
src/pages/valuation/plate/PlateValuationPage.tsx:65:            subtitle="Identification & Valuation"
src/pages/valuation/plate/PlateValuationPage.tsx:68:              label: 'Start Plate Lookup',
src/pages/valuation/plate/PlateValuationPage.tsx:76:              label: 'Try VIN Lookup',
src/pages/valuation/plate/PlateValuationPage.tsx:87:                  <CardTitle className="text-2xl">License Plate Lookup</CardTitle>
src/pages/valuation/plate/PlateValuationPage.tsx:93:                  <UnifiedPlateLookup 
src/pages/valuation/plate/PlateValuationPage.tsx:118:                <UnifiedFollowUpForm 
src/pages/valuation/plate/PlateValuationPage.tsx:120:                  onComplete={handleFollowUpSubmit}
src/pages/DealerSubscriptionPage.tsx:54:        "Valuation reports PDF export",
src/pages/MyValuationsPage.tsx:11:const MyValuationsPage: React.FC = () => {
src/pages/MyValuationsPage.tsx:12:  const [valuations, setValuations] = useState<any[]>([]);
src/pages/MyValuationsPage.tsx:17:    const fetchSavedValuations = async () => {
src/pages/MyValuationsPage.tsx:28:        setValuations(data || []);
src/pages/MyValuationsPage.tsx:36:    fetchSavedValuations();
src/pages/MyValuationsPage.tsx:42:        <h1 className="text-3xl font-bold mb-6">My Valuations</h1>
src/pages/MyValuationsPage.tsx:67:                  <Link to="/valuation">Create Your First Valuation</Link>
src/pages/MyValuationsPage.tsx:126:export default MyValuationsPage;
src/pages/Privacy.tsx:16:          to make, model, year, VIN, condition, and mileage. We may also collect
src/pages/HomePage.tsx:21:      {/* Main Feature: Valuation Tool - FANG Level */}
src/pages/HomePage.tsx:31:              AI-Powered Valuation Engine
src/pages/HomePage.tsx:42:              Professional-grade valuation in seconds. Enter your VIN or license plate to get started.
src/pages/EquipmentSelectionPage.tsx:87:              Back to Premium Valuation
src/components/ui/no-results.tsx:5:interface NoResultsProps {
src/components/ui/no-results.tsx:15:export const NoResults: React.FC<NoResultsProps> = ({
src/components/ui/no-results.tsx:46:export default NoResults;
src/components/layout/Footer.tsx:18:              <li><a href="/valuation" className="hover:text-gray-900">Free Valuation</a></li>
src/components/layout/Footer.tsx:20:              <li><a href="/vin-lookup" className="hover:text-gray-900">VIN Lookup</a></li>
src/components/ui/index.ts:61:export { NoResults } from './no-results';
src/components/layout/seo/index.tsx:14:  title = 'Car Detective - AI-Powered Vehicle Valuation',
src/components/layout/MobileMenu.tsx:12:    { label: 'Valuation', href: '/valuation' },
src/components/layout/Header.tsx:57:          <Link to="/valuation" className="hover:text-primary">Valuation</Link>
src/components/enriched/PremiumEnrichmentGate.tsx:105:            VIN: {vin} ‚Ä¢ Secure encryption ‚Ä¢ Instant access
src/components/ui/UpgradeCTA.tsx:39:            <span>PDF Reports</span>
src/components/premium/form/PremiumValuationForm.tsx:15:const premiumValuationSchema = z.object({
src/components/premium/form/PremiumValuationForm.tsx:29:type PremiumValuationFormData = z.infer<typeof premiumValuationSchema>;
src/components/premium/form/PremiumValuationForm.tsx:39:export function PremiumValuationForm() {
src/components/premium/form/PremiumValuationForm.tsx:44:  const form = useForm<PremiumValuationFormData>({
src/components/premium/form/PremiumValuationForm.tsx:45:    resolver: zodResolver(premiumValuationSchema),
src/components/premium/form/PremiumValuationForm.tsx:63:  const onSubmit = async (data: PremiumValuationFormData) => {
src/components/premium/form/PremiumValuationForm.tsx:67:      toast.success("Valuation request submitted successfully!");
src/components/premium/form/PremiumValuationForm.tsx:154:              <FormLabel>VIN (Optional)</FormLabel>
src/components/premium/form/PremiumValuationForm.tsx:158:                  placeholder="Enter VIN"
src/components/premium/form/PremiumValuationForm.tsx:172:          {isSubmitting ? "Submitting..." : "Get Premium Valuation"}
src/components/premium/form/steps/PredictionReviewStep.tsx:17:interface ValuationResult {
src/components/premium/form/steps/PredictionReviewStep.tsx:21:  fetchValuationPrediction: (data: any) => Promise<any>;
src/components/premium/form/steps/PredictionReviewStep.tsx:25:const useValuation = (): ValuationResult => {
src/components/premium/form/steps/PredictionReviewStep.tsx:30:  const fetchValuationPrediction = async (data: any) => {
src/components/premium/form/steps/PredictionReviewStep.tsx:81:      console.error('Valuation error:', err);
src/components/premium/form/steps/PredictionReviewStep.tsx:89:  return { isLoading, error, predictionResult, fetchValuationPrediction };
src/components/premium/form/steps/PredictionReviewStep.tsx:100:  const { isLoading, error, predictionResult, fetchValuationPrediction } =
src/components/premium/form/steps/PredictionReviewStep.tsx:101:    useValuation();
src/components/premium/form/steps/PredictionReviewStep.tsx:141:    const result = await fetchValuationPrediction(valuationData);
src/components/premium/form/steps/PredictionReviewStep.tsx:151:        <h2 className="text-2xl font-semibold mb-6">Valuation Prediction</h2>
src/components/premium/form/steps/PredictionReviewStep.tsx:158:                Generating Your Valuation...
src/components/premium/form/steps/prediction-review/GetValuationButton.tsx:6:interface GetValuationButtonProps {
src/components/premium/form/steps/prediction-review/GetValuationButton.tsx:7:  onGetValuation: () => void;
src/components/premium/form/steps/prediction-review/GetValuationButton.tsx:12:export function GetValuationButton({
src/components/premium/form/steps/prediction-review/GetValuationButton.tsx:13:  onGetValuation,
src/components/premium/form/steps/prediction-review/GetValuationButton.tsx:16:}: GetValuationButtonProps) {
src/components/premium/form/steps/prediction-review/GetValuationButton.tsx:19:      onClick={onGetValuation}
src/components/premium/form/steps/prediction-review/GetValuationButton.tsx:27:          Getting Valuation...
src/components/premium/form/steps/prediction-review/GetValuationButton.tsx:30:        "Get My Valuation"
src/components/premium/form/steps/VehicleIdentificationStep.tsx:48:  const handlePlateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
src/components/premium/form/steps/VehicleIdentificationStep.tsx:101:              VIN
src/components/premium/form/steps/VehicleIdentificationStep.tsx:108:              License Plate
src/components/premium/form/steps/VehicleIdentificationStep.tsx:121:              <Label htmlFor="vin">Vehicle Identification Number (VIN)</Label>
src/components/premium/form/steps/VehicleIdentificationStep.tsx:126:                placeholder="Enter 17-character VIN"
src/components/premium/form/steps/VehicleIdentificationStep.tsx:130:                VIN must be exactly 17 characters
src/components/premium/form/steps/VehicleIdentificationStep.tsx:138:                <Label htmlFor="plate">License Plate</Label>
src/components/premium/form/steps/VehicleIdentificationStep.tsx:142:                  onChange={handlePlateChange}
src/components/premium/form/steps/review/ReviewActions.tsx:22:        Get Premium Valuation
src/components/premium/form/steps/review/VehicleSummary.tsx:36:            <span className="text-gray-500 block">VIN</span>
src/components/lookup/scoring/BreakdownList.tsx:15:      <h4 className="font-medium">Valuation Breakdown</h4>
src/components/premium/form/AccuracyMeter.tsx:58:          <span className="font-medium">Valuation Accuracy</span>
src/components/lookup/types/valuation.ts:2:export interface ValuationFormProps {
src/components/lookup/types/valuation.ts:3:  onSubmit?: (data: ManualValuationData) => Promise<void>;
src/components/lookup/types/valuation.ts:9:export interface ManualValuationData {
src/components/premium/features/EnhancedPremiumFeaturesTabs.tsx:30:      description: "Detailed PDF report for sharing",
src/components/lookup/VehicleInfoCard.tsx:69:              <span className="font-medium">VIN:</span>
src/components/premium/features/data/premium-features.ts:44:    title: "Professional PDF Report",
src/components/premium/features/data/premium-features.ts:46:      "Downloadable, shareable PDF report with all valuation details and insights",
src/components/premium/features/ComprehensiveFeatureSelector.tsx:41:        name: "Valuation Insights",
src/components/premium/features/ComprehensiveFeatureSelector.tsx:136:            name: "Full Valuation Report",
src/components/lookup/VehicleDetailsGrid.tsx:15:    { label: 'VIN', value: vehicle.vin },
src/components/premium/lookup/vin/VinDecoderResults.tsx:8:interface VinDecoderResultsProps {
src/components/premium/lookup/vin/VinDecoderResults.tsx:16:  submitValuation: () => Promise<void>;
src/components/premium/lookup/vin/VinDecoderResults.tsx:22:const VinDecoderResults: React.FC<VinDecoderResultsProps> = ({
src/components/premium/lookup/vin/VinDecoderResults.tsx:30:  submitValuation,
src/components/premium/lookup/vin/VinDecoderResults.tsx:46:            Unable to decode vehicle information from the provided VIN.
src/components/premium/lookup/vin/VinDecoderResults.tsx:105:            <CardTitle>Valuation Results</CardTitle>
src/components/premium/lookup/vin/VinDecoderResults.tsx:125:              Download PDF Report
src/components/premium/lookup/vin/VinDecoderResults.tsx:136:              Valuation Error
src/components/premium/lookup/vin/VinDecoderResults.tsx:148:export default VinDecoderResults;
src/components/premium/lookup/VinSubmitButton.tsx:26:            Looking up VIN...
src/components/lookup/UnifiedLookupTabs.tsx:21:  // Plate lookup states
src/components/lookup/UnifiedLookupTabs.tsx:22:  const [plateData, setPlateData] = useState({
src/components/lookup/UnifiedLookupTabs.tsx:29:  // Use the real unified lookup service for plates only, direct service for VIN
src/components/lookup/UnifiedLookupTabs.tsx:32:    lookupByPlate
src/components/lookup/UnifiedLookupTabs.tsx:45:      valuationLogger.vinLookup(vin, 'validation-failed', { reason: 'invalid-format' }, false, 'Invalid VIN format');
src/components/lookup/UnifiedLookupTabs.tsx:46:      toast.error('Please enter a valid 17-character VIN');
src/components/lookup/UnifiedLookupTabs.tsx:78:        toast.success('VIN decoded successfully!');
src/components/lookup/UnifiedLookupTabs.tsx:83:        toast.error('Failed to decode VIN. Please check the VIN and try again.');
src/components/lookup/UnifiedLookupTabs.tsx:89:      toast.error('VIN lookup service temporarily unavailable. Please try again.');
src/components/lookup/UnifiedLookupTabs.tsx:96:  const handlePlateSubmit = async (e: React.FormEvent) => {
src/components/lookup/UnifiedLookupTabs.tsx:104:    logger.log('üè∑Ô∏è Plate Lookup: Processing license plate lookup');
src/components/lookup/UnifiedLookupTabs.tsx:107:      const result = await lookupByPlate(plateData.plate, plateData.state);
src/components/lookup/UnifiedLookupTabs.tsx:110:        logger.log('‚úÖ Plate Lookup: Successfully found vehicle:', result.vehicle);
src/components/lookup/UnifiedLookupTabs.tsx:120:          vin: result.vehicle.vin || `PLATE_${plateData.plate}_${plateData.state}`, // Generate placeholder VIN for plates
src/components/lookup/UnifiedLookupTabs.tsx:133:        console.error('‚ùå Plate Lookup: Failed:', result?.error);
src/components/lookup/UnifiedLookupTabs.tsx:134:        toast.error('Failed to find vehicle by license plate. Please try VIN lookup.');
src/components/lookup/UnifiedLookupTabs.tsx:138:      console.error('‚ùå Plate lookup error:', error);
src/components/lookup/UnifiedLookupTabs.tsx:139:      toast.error('Plate lookup service temporarily unavailable. Please try again.');
src/components/lookup/UnifiedLookupTabs.tsx:157:            VIN Lookup
src/components/lookup/UnifiedLookupTabs.tsx:161:            License Plate
src/components/lookup/UnifiedLookupTabs.tsx:168:              <CardTitle>VIN Lookup</CardTitle>
src/components/lookup/UnifiedLookupTabs.tsx:170:                Enter your vehicle's 17-character VIN for instant identification using real NHTSA data
src/components/lookup/UnifiedLookupTabs.tsx:177:                    <Label htmlFor="vin">Vehicle Identification Number (VIN)</Label>
src/components/lookup/UnifiedLookupTabs.tsx:182:                      placeholder="Enter 17-character VIN"
src/components/lookup/UnifiedLookupTabs.tsx:188:                        VIN must be 17 characters (no I, O, or Q)
src/components/lookup/UnifiedLookupTabs.tsx:202:                      Decoding VIN with NHTSA...
src/components/lookup/UnifiedLookupTabs.tsx:219:              <CardTitle>License Plate Lookup</CardTitle>
src/components/lookup/UnifiedLookupTabs.tsx:225:              <form onSubmit={handlePlateSubmit} className="space-y-4">
src/components/lookup/UnifiedLookupTabs.tsx:227:                  <Label htmlFor="plate">License Plate Number *</Label>
src/components/lookup/UnifiedLookupTabs.tsx:231:                    onChange={(e) => setPlateData(prev => ({ ...prev, plate: e.target.value.toUpperCase() }))}
src/components/lookup/UnifiedLookupTabs.tsx:238:                  <Select value={plateData.state} onValueChange={(value) => setPlateData(prev => ({ ...prev, state: value }))}>
src/components/premium/lookup/shared/ValuationStages.tsx:4:export type ValuationStage =
src/components/premium/lookup/shared/ValuationStages.tsx:11:interface ValuationStagesProps {
src/components/premium/lookup/shared/ValuationStages.tsx:12:  stage: ValuationStage;
src/components/premium/lookup/shared/ValuationStages.tsx:16:export const ValuationStages: React.FC<ValuationStagesProps> = (
src/components/premium/lookup/shared/ValuationStages.tsx:23:    { id: "complete", label: "Valuation Complete", icon: CheckCircle },
src/components/premium/lookup/shared/ValuationErrorState.tsx:12:interface ValuationErrorStateProps {
src/components/premium/lookup/shared/ValuationErrorState.tsx:19:export const ValuationErrorState: React.FC<ValuationErrorStateProps> = ({
src/components/premium/lookup/shared/ValuationErrorState.tsx:21:  title = "Valuation Error",
src/components/premium/lookup/index.ts:4:export * from "./PlateLookup";
src/components/premium/lookup/PlateLookup.tsx:69:interface PlateLookupProps {
src/components/premium/lookup/PlateLookup.tsx:73:  onPlateChange?: (value: string) => void;
src/components/premium/lookup/PlateLookup.tsx:78:export function PlateLookup({
src/components/premium/lookup/PlateLookup.tsx:82:  onPlateChange,
src/components/premium/lookup/PlateLookup.tsx:85:}: PlateLookupProps) {
src/components/premium/lookup/PlateLookup.tsx:90:  const validatePlate = (plate: string): boolean => {
src/components/premium/lookup/PlateLookup.tsx:95:  const isValid = validatePlate(plateValue) && !!stateValue;
src/components/premium/lookup/PlateLookup.tsx:97:  const handlePlateChange = (value: string) => {
src/components/premium/lookup/PlateLookup.tsx:100:    onPlateChange?.(formattedValue);
src/components/premium/lookup/PlateLookup.tsx:103:    if (formattedValue && !validatePlate(formattedValue)) {
src/components/premium/lookup/PlateLookup.tsx:126:            onChange={(e) => handlePlateChange(e.target.value)}
src/components/premium/lookup/PlateLookup.tsx:128:              ? "Enter License Plate"
src/components/premium/lookup/PlateLookup.tsx:129:              : "Enter License Plate (e.g., ABC123)"}
src/components/premium/lookup/PlateLookup.tsx:149:              if (error && validatePlate(plateValue)) {
src/components/premium/lookup/plate/VehicleFoundCard.tsx:32:              License Plate: {plateValue} ({stateValue})
src/components/premium/lookup/plate/VehicleFoundCard.tsx:40:              <p className="text-xs text-gray-500 uppercase tracking-wide">VIN</p>
src/components/premium/lookup/plate/VehicleFoundCard.tsx:68:          Ready for Valuation
src/components/premium/lookup/plate/EnhancedPlateForm.tsx:15:export const EnhancedPlateForm = () => {
src/components/premium/lookup/plate/EnhancedPlateForm.tsx:16:  const [plateNumber, setPlateNumber] = React.useState("");
src/components/premium/lookup/plate/EnhancedPlateForm.tsx:34:        <CardTitle>License Plate Lookup</CardTitle>
src/components/premium/lookup/plate/EnhancedPlateForm.tsx:40:              <Label htmlFor="plate">License Plate</Label>
src/components/premium/lookup/plate/EnhancedPlateForm.tsx:44:                onChange={(e) => setPlateNumber(e.target.value.toUpperCase())}
src/components/premium/lookup/plate/EnhancedPlateForm.tsx:72:            {isLoading ? "Looking up..." : "Lookup Plate"}
src/components/premium/lookup/plate/EnhancedPlateForm.tsx:80:export default EnhancedPlateForm;
src/components/lookup/form-parts/UnifiedFollowUpQuestions.tsx:34:interface UnifiedFollowUpQuestionsProps {
src/components/lookup/form-parts/UnifiedFollowUpQuestions.tsx:39:export function UnifiedFollowUpQuestions({
src/components/lookup/form-parts/UnifiedFollowUpQuestions.tsx:42:}: UnifiedFollowUpQuestionsProps) {
src/components/premium/PremiumHero.tsx:25:            Advanced Vehicle Valuation & Analytics
src/components/premium/checkout/PremiumCheckoutButton.tsx:20:          Get Premium Valuation <ArrowRight className="ml-2 h-4 w-4" />
src/components/lookup/form-parts/ValuationFormActions.tsx:6:interface ValuationFormActionsProps {
src/components/lookup/form-parts/ValuationFormActions.tsx:7:  onGetValuation?: () => void;
src/components/lookup/form-parts/ValuationFormActions.tsx:8:  onGetPremiumValuation?: () => void;
src/components/lookup/form-parts/ValuationFormActions.tsx:25:export function ValuationFormActions({
src/components/lookup/form-parts/ValuationFormActions.tsx:26:  onGetValuation,
src/components/lookup/form-parts/ValuationFormActions.tsx:27:  onGetPremiumValuation,
src/components/lookup/form-parts/ValuationFormActions.tsx:33:}: ValuationFormActionsProps) {
src/components/lookup/form-parts/ValuationFormActions.tsx:36:  const handleContinueToFollowUp = () => {
src/components/lookup/form-parts/ValuationFormActions.tsx:59:  const handleFreeValuation = () => {
src/components/lookup/form-parts/ValuationFormActions.tsx:61:      handleContinueToFollowUp();
src/components/lookup/form-parts/ValuationFormActions.tsx:62:    } else if (onGetValuation) {
src/components/lookup/form-parts/ValuationFormActions.tsx:63:      onGetValuation();
src/components/lookup/form-parts/ValuationFormActions.tsx:67:  const handlePremiumValuation = () => {
src/components/lookup/form-parts/ValuationFormActions.tsx:69:      handleContinueToFollowUp();
src/components/lookup/form-parts/ValuationFormActions.tsx:70:    } else if (onGetPremiumValuation) {
src/components/lookup/form-parts/ValuationFormActions.tsx:71:      onGetPremiumValuation();
src/components/lookup/form-parts/ValuationFormActions.tsx:78:        onClick={handleFreeValuation}
src/components/lookup/form-parts/ValuationFormActions.tsx:90:          onClick={handlePremiumValuation}
src/components/premium/checkout/CheckoutSummary.tsx:22:        <CardTitle className="text-amber-800">Premium Valuation</CardTitle>
src/components/lookup/index.ts:11:export { UnifiedPlateLookup } from './UnifiedPlateLookup';
src/components/lookup/index.ts:22:  lookupByPlate as plateLookup
src/components/premium/PremiumValuationSection.tsx:8:const PremiumValuationSection = () => {
src/components/premium/PremiumValuationSection.tsx:20:          <h3 className="text-lg font-semibold mb-2">Premium Valuation</h3>
src/components/premium/PremiumValuationSection.tsx:35:          Premium Valuation Features
src/components/premium/PremiumValuationSection.tsx:54:export default PremiumValuationSection;
src/components/lookup/followup/FollowupStepManager.tsx:32:        <CardTitle className="text-lg">Valuation Progress</CardTitle>
src/components/premium/index.ts:12:export { PlateLookup } from "./lookup/PlateLookup";
src/components/premium/index.ts:32:// Valuation Tabs
src/components/premium/index.ts:41:// VIN Lookup
src/components/premium/ValuationBreakdown.tsx:4:import { ValuationHistory, ValuationBreakdownItem } from "@/types/valuation-history";
src/components/premium/ValuationBreakdown.tsx:7:interface ValuationBreakdownProps {
src/components/premium/ValuationBreakdown.tsx:8:  valuation: ValuationHistory;
src/components/premium/ValuationBreakdown.tsx:9:  breakdown?: ValuationBreakdownItem[];
src/components/premium/ValuationBreakdown.tsx:12:export const ValuationBreakdown = ({ valuation, breakdown = [] }: ValuationBreakdownProps) => {
src/components/premium/ValuationBreakdown.tsx:28:        <CardTitle>Valuation Breakdown</CardTitle>
src/components/premium/ValuationBreakdown.tsx:36:            <p className="text-sm text-muted-foreground">Final Valuation</p>
src/components/premium/ValuationBreakdown.tsx:76:export default ValuationBreakdown;
src/components/lookup/UnifiedPlateLookup.tsx:10:import { usePlateLookup } from "@/hooks/usePlateLookup";
src/components/lookup/UnifiedPlateLookup.tsx:12:interface UnifiedPlateLookupProps {
src/components/lookup/UnifiedPlateLookup.tsx:18:export function UnifiedPlateLookup({ 
src/components/lookup/UnifiedPlateLookup.tsx:22:}: UnifiedPlateLookupProps) {
src/components/lookup/UnifiedPlateLookup.tsx:23:  const [plateNumber, setPlateNumber] = useState("");
src/components/lookup/UnifiedPlateLookup.tsx:26:  const { lookupVehicle, isLoading, error } = usePlateLookup();
src/components/lookup/UnifiedPlateLookup.tsx:41:      console.error('Plate lookup failed:', err);
src/components/lookup/UnifiedPlateLookup.tsx:52:        <CardTitle>License Plate Lookup</CardTitle>
src/components/lookup/UnifiedPlateLookup.tsx:57:            <Label htmlFor="plate">License Plate Number</Label>
src/components/lookup/UnifiedPlateLookup.tsx:63:              onChange={(e) => setPlateNumber(e.target.value.toUpperCase())}
src/components/premium/sections/ValueEstimateCard.tsx:40:            Download PDF Report
src/components/premium/sections/PremiumFeaturesSection.tsx:10:  "PDF Report Download + QR Code",
src/components/premium/sections/PremiumFeaturesSection.tsx:11:  "AI-Powered VIN/Photo/Service Analysis",
src/components/lookup/plate/PlateInfoCard.tsx:3:import { PlateLookupInfo } from "@/types/lookup";
src/components/lookup/plate/PlateInfoCard.tsx:15:interface PlateInfoCardProps {
src/components/lookup/plate/PlateInfoCard.tsx:16:  vehicleInfo: PlateLookupInfo;
src/components/lookup/plate/PlateInfoCard.tsx:18:  onSaveValuation?: () => void;
src/components/lookup/plate/PlateInfoCard.tsx:23:export const PlateInfoCard = ({
src/components/lookup/plate/PlateInfoCard.tsx:26:  onSaveValuation,
src/components/lookup/plate/PlateInfoCard.tsx:29:}: PlateInfoCardProps) => {
src/components/lookup/plate/PlateInfoCard.tsx:93:            onClick={onSaveValuation}
src/components/premium/sections/FreeVsPremiumComparison.tsx:18:            <td className="py-2 px-4 border">Base Valuation</td>
src/components/premium/sections/FreeVsPremiumComparison.tsx:28:            <td className="py-2 px-4 border">PDF Report</td>
src/components/premium/sections/PremiumPricing.tsx:25:              <CardTitle>Single Valuation</CardTitle>
src/components/premium/sections/PremiumPricing.tsx:34:                  'Detailed PDF report',
src/components/premium/sections/PremiumPricing.tsx:70:                  'Detailed PDF reports',
src/components/premium/sections/PremiumPricing.tsx:105:                  'Detailed PDF reports',
src/components/premium/sections/PremiumFaq.tsx:14:      answer: "Our premium valuation offers a comprehensive analysis that includes feature-by-feature value impact, CARFAX report integration, detailed condition assessment, market trend analysis, and a professional PDF report. The free valuation gives you a basic estimate without these detailed insights."
src/components/premium/sections/PremiumFaq.tsx:26:      answer: "No, our system integrates with CARFAX and automatically retrieves the relevant history when you enter your VIN. This history is factored into your valuation without any additional steps required."
src/components/service-history/FileDropzone.tsx:56:              Supports PDF, JPG, JPEG, PNG
src/components/service-history/ServiceHistoryUploader.tsx:44:      toast.error("Please enter a valid 17-character VIN");
src/components/service-history/ServiceHistoryUploader.tsx:169:            <Label htmlFor="vin">Vehicle Identification Number (VIN)</Label>
src/components/service-history/ServiceHistoryUploader.tsx:174:              placeholder="Enter 17-character VIN"
src/components/premium/sections/valuation-tabs/hooks/useValuationState.ts:17:export function useValuationState() {
src/components/premium/sections/valuation-tabs/hooks/useValuationState.ts:20:  const [plateData, setPlateData] = useState({ plate: "", state: "" });
src/components/premium/sections/valuation-tabs/hooks/useValuationState.ts:39:  const handlePlateLookup = async () => {
src/components/premium/sections/valuation-tabs/hooks/useValuationState.ts:55:    setPlateData,
src/components/premium/sections/valuation-tabs/hooks/useValuationState.ts:63:    handlePlateLookup,
src/components/dashboard/DashboardRouter.tsx:22:      title: 'New Valuation',
src/components/dashboard/DashboardRouter.tsx:28:      title: 'My Valuations',
src/components/dashboard/DashboardRouter.tsx:96:            { label: 'Total Valuations', value: '12', icon: <Car className="w-5 h-5" /> },
src/components/dashboard/DashboardRouter.tsx:140:                New Valuation
src/components/index.ts:52:export { NoResults } from './ui/no-results';
src/components/index.ts:82:export { ValuationEmptyState } from './valuation/ValuationEmptyState';
src/components/index.ts:83:export { PhotoUploadAndScore as ValuationPhotoUpload } from './valuation/PhotoUploadAndScore';
src/components/premium/sections/valuation-tabs/CarfaxReportTab.tsx:24:    console.log("Downloading CARFAX report for VIN:", vin);
src/components/premium/sections/valuation-tabs/CarfaxReportTab.tsx:31:        description="Enter a VIN to access the complete vehicle history report"
src/components/premium/sections/valuation-tabs/CarfaxReportTab.tsx:36:            VIN required for CARFAX¬Æ report access
src/components/premium/sections/valuation-tabs/services.ts:13:export type ValuationServiceId =
src/components/premium/sections/valuation-tabs/services.ts:23:export interface ValuationService {
src/components/premium/sections/valuation-tabs/services.ts:24:  id: ValuationServiceId;
src/components/premium/sections/valuation-tabs/services.ts:30:export const valuationServices: ValuationService[] = [
src/components/premium/sections/valuation-tabs/services.ts:33:    title: "VIN Lookup",
src/components/premium/sections/valuation-tabs/services.ts:36:      "Enter your Vehicle Identification Number (VIN) for the most accurate identification.",
src/components/premium/sections/valuation-tabs/services.ts:40:    title: "Plate Lookup",
src/components/saved/SavedValuationsList.tsx:3:import { useSavedValuations } from "@/hooks/useValuationData";
src/components/saved/SavedValuationsList.tsx:18:export const SavedValuationsList = () => {
src/components/saved/SavedValuationsList.tsx:19:  const { valuations, isLoading, error, deleteValuation } =
src/components/saved/SavedValuationsList.tsx:20:    useSavedValuations();
src/components/saved/SavedValuationsList.tsx:26:          <CardTitle>Your Saved Valuations</CardTitle>
src/components/saved/SavedValuationsList.tsx:44:          <CardTitle>Your Saved Valuations</CardTitle>
src/components/saved/SavedValuationsList.tsx:57:          <CardTitle>Your Saved Valuations</CardTitle>
src/components/saved/SavedValuationsList.tsx:64:            <Button variant="outline">Start a New Valuation</Button>
src/components/saved/SavedValuationsList.tsx:89:      await deleteValuation(id);
src/components/saved/SavedValuationsList.tsx:96:        <CardTitle>Your Saved Valuations</CardTitle>
src/components/saved/SavedValuationsList.tsx:103:              <TableHead>Valuation</TableHead>
src/components/premium/sections/valuation-tabs/TabHeader.tsx:10:        Premium Vehicle Valuation
src/components/premium/sections/valuation-tabs/TabHeader.tsx:18:          accurate valuation, we recommend using the VIN lookup which provides
src/components/premium/sections/valuation-tabs/DealerOffersTab.tsx:70:        {/* Current Valuation Summary */}
src/components/premium/sections/valuation-tabs/DealerOffersTab.tsx:75:                <h3 className="text-lg font-semibold">Current Valuation</h3>
src/components/home/ComparisonTable.tsx:11:    { name: "VIN/Plate/Manual Lookup", free: true, premium: true },
src/components/home/ComparisonTable.tsx:21:    { name: "Professional PDF Report", free: "Basic", premium: "Complete" },
src/components/home/ComparisonTable.tsx:153:              Get Premium Valuation Now
src/components/home/PdfPreview.tsx:17:          PDF Report Preview
src/components/home/PdfPreview.tsx:29:            Download PDF Report
src/components/home/FinalCTA.tsx:7:  const scrollToValuation = () => {
src/components/home/FinalCTA.tsx:28:            onClick={scrollToValuation}
src/components/home/FinalCTA.tsx:30:            Start Free Valuation
src/components/home/EnhancedFeatures.tsx:7:    title: 'Instant Valuation',
src/components/home/PremiumServicesGrid.tsx:9:    title: "Premium Valuation",
src/components/home/PremiumServicesGrid.tsx:15:    description: "Comprehensive PDF reports with market analysis and insights."
src/components/premium/sections/valuation-tabs/services.tsx:5:export type ValuationServiceId = 'vin' | 'plate' | 'manual' | 'photo';
src/components/premium/sections/valuation-tabs/services.tsx:7:export interface ValuationService {
src/components/premium/sections/valuation-tabs/services.tsx:8:  id: ValuationServiceId;
src/components/premium/sections/valuation-tabs/services.tsx:15:export const services: ValuationService[] = [
src/components/premium/sections/valuation-tabs/services.tsx:18:    title: 'VIN Lookup',
src/components/premium/sections/valuation-tabs/services.tsx:24:    title: 'License Plate',
src/components/home/AiAssistantPreview.tsx:27:          AI Valuation Assistant
src/components/home/ValuePropositionSection.tsx:9:    title: "Free Basic Valuation",
src/components/home/ValuePropositionSection.tsx:14:    title: "Quick Results",
src/components/home/ValuePropositionGrid.tsx:9:      title: "Instant Results",
src/components/premium/types.ts:2:import { ValuationResult } from '@/types/valuation';
src/components/premium/types.ts:4:export interface ValuationSummaryProps {
src/components/premium/types.ts:5:  valuation?: ValuationResult;
src/components/premium/FeaturesSection.tsx:77:      title: "Professional PDF Report",
src/components/premium/FeaturesSection.tsx:104:            Premium Valuation Features
src/components/home/EnterpriseHeroSection.tsx:8:  onFreeValuationClick?: () => void;
src/components/home/EnterpriseHeroSection.tsx:12:  onFreeValuationClick,
src/components/home/EnterpriseHeroSection.tsx:18:    } else if (onFreeValuationClick) {
src/components/home/EnterpriseHeroSection.tsx:19:      onFreeValuationClick();
src/components/home/EnterpriseHeroSection.tsx:104:                  Start Professional Valuation
src/components/home/EnterpriseHeroSection.tsx:149:                        <span className="text-slate-300">Market Valuation</span>
src/components/premium/hero/PremiumValuationCard.tsx:7:interface PremiumValuationCardProps {
src/components/premium/hero/PremiumValuationCard.tsx:18:export function PremiumValuationCard({
src/components/premium/hero/PremiumValuationCard.tsx:23:}: PremiumValuationCardProps) {
src/components/home/InstantTrustBar.tsx:9:      text: "30 Second Results"
src/components/home/OnboardingTour.tsx:39:                  "Enter VIN, plate, or manual details to get started",
src/components/home/OnboardingTour.tsx:44:                description: "Download detailed PDF reports with full analysis",
src/components/home/OnboardingTour.tsx:48:                title: "Accurate Valuations",
src/components/premium/insights/AINSummary.tsx:37:        const prompt = `Analyze this vehicle valuation data for VIN ${vin}. 
src/components/home/LookupTabs.tsx:14:  // UnifiedLookupTabs doesn't accept these props, so we'll handle the VIN submission internally
src/components/home/FangHeroSection.tsx:7:  const scrollToValuation = () => {
src/components/home/FangHeroSection.tsx:52:                  <div className="text-sm font-medium">30 Second Results</div>
src/components/home/FangHeroSection.tsx:73:                  onClick={scrollToValuation}
src/components/home/FangHeroSection.tsx:75:                  Get Instant Valuation
src/components/home/KeyFeatures.tsx:8:      <li>Feature 1: Fast License Plate Lookup</li>
src/components/home/CoreValueProps.tsx:9:      title: "Instant Results",
src/components/home/FeaturesOverview.tsx:5:    title: "Basic Valuation (Free)",
src/components/home/FeaturesOverview.tsx:7:      "Instantly estimate your vehicle's worth using VIN, plate, or manual entry ‚Äî powered by real-time market analytics.",
src/components/home/FeaturesOverview.tsx:13:      "Includes CARFAX¬Æ history, 12-month trend forecast, dealer offers, confidence score, and branded PDF export.",
src/components/home/EnterpriseStatsSection.tsx:10:      label: "Valuations Completed",
src/components/home/PremiumHeroSection.tsx:22:  const scrollToValuation = () => {
src/components/home/PremiumHeroSection.tsx:53:              Professional-Grade Valuation Engine
src/components/home/PremiumHeroSection.tsx:75:                onClick={scrollToValuation}
src/components/home/PremiumHeroSection.tsx:78:                  Get Instant Valuation
src/components/home/PremiumHeroSection.tsx:97:              <h3 className="text-xl font-semibold mb-2">Instant Results</h3>
src/components/premium/ComparisonSection.tsx:11:    { name: "VIN/Plate/Manual Lookup", free: true, premium: true },
src/components/premium/ComparisonSection.tsx:21:    { name: "Professional PDF Report", free: "Basic", premium: "Complete" },
src/components/premium/ComparisonSection.tsx:125:            Get Premium Valuation Now
src/components/common/CarFinderQaherHeader.tsx:30:          <span>Instant Results</span>
src/components/sharing/SocialShareButtons.tsx:94:    const title = encodeURIComponent(`Vehicle Valuation Report`);
src/components/sharing/SocialShareButtons.tsx:103:    const subject = encodeURIComponent(`Vehicle Valuation Report - ${vehicleInfo.year} ${vehicleInfo.make} ${vehicleInfo.model}`);
src/components/sharing/SocialShareButtons.tsx:164:          Share Valuation
src/components/common/SEO.tsx:16:  title = 'Car Detective ‚Äî AI-Powered Vehicle Valuation',
src/components/modals/index.ts:4:export * from './ValuationStepsModal';
src/components/test/PDFShareValidationComponent.tsx:2: * Prompt 2.5 Validation Component: PDF Export & Share Link Verification
src/components/test/PDFShareValidationComponent.tsx:4: * Tests PDF generation, sharing logic, QR code routing, and fallback handling
src/components/test/PDFShareValidationComponent.tsx:14:  validatePDFShareFunctionality, 
src/components/test/PDFShareValidationComponent.tsx:15:  validateAllPDFShareTestCases, 
src/components/test/PDFShareValidationComponent.tsx:16:  PDFShareValidationResult,
src/components/test/PDFShareValidationComponent.tsx:17:  PDF_SHARE_TEST_CASES 
src/components/test/PDFShareValidationComponent.tsx:18:} from '@/utils/valuation/validatePDFShareFunctionality';
src/components/test/PDFShareValidationComponent.tsx:31:export function PDFShareValidationComponent() {
src/components/test/PDFShareValidationComponent.tsx:33:  const [results, setResults] = useState<PDFShareValidationResult[]>([]);
src/components/test/PDFShareValidationComponent.tsx:39:      const result = await validatePDFShareFunctionality(vin);
src/components/test/PDFShareValidationComponent.tsx:40:      setResults([result]);
src/components/test/PDFShareValidationComponent.tsx:43:      console.error('PDF Share validation test failed:', error);
src/components/test/PDFShareValidationComponent.tsx:52:      const allResults = await validateAllPDFShareTestCases();
src/components/test/PDFShareValidationComponent.tsx:53:      setResults(allResults);
src/components/test/PDFShareValidationComponent.tsx:56:      console.error('PDF Share validation tests failed:', error);
src/components/test/PDFShareValidationComponent.tsx:86:          üìÑ Prompt 2.5: PDF Export & Share Link Verification
src/components/test/PDFShareValidationComponent.tsx:89:          Audits PDF generation, sharing logic, QR code routing, and fallback handling 
src/components/test/PDFShareValidationComponent.tsx:96:        {PDF_SHARE_TEST_CASES.map((testCase) => (
src/components/test/PDFShareValidationComponent.tsx:160:          {isRunning ? 'Running All Tests...' : 'Run All PDF & Share Validation Tests'}
src/components/test/PDFShareValidationComponent.tsx:164:      {/* Results Summary */}
src/components/test/PDFShareValidationComponent.tsx:170:              Prompt 2.5 Validation Results
src/components/test/PDFShareValidationComponent.tsx:194:                <p className="text-sm text-muted-foreground">PDFs Generated</p>
src/components/test/PDFShareValidationComponent.tsx:204:                  <span>PDF renders valuation clearly and professionally</span>
src/components/test/PDFShareValidationComponent.tsx:216:                  <span>Valuation data consistent across UI, PDF, and share</span>
src/components/test/PDFShareValidationComponent.tsx:224:      {/* Detailed Results */}
src/components/test/PDFShareValidationComponent.tsx:227:          <h3 className="text-lg font-semibold">Detailed Test Results</h3>
src/components/test/PDFShareValidationComponent.tsx:251:                    {/* PDF Generation */}
src/components/test/PDFShareValidationComponent.tsx:255:                        1. PDF Generation
src/components/test/PDFShareValidationComponent.tsx:259:                          <span>PDF Generation Works</span>
src/components/test/PDFShareValidationComponent.tsx:404:          <p><strong>Step 1:</strong> Run individual tests to validate specific PDF export scenarios</p>
src/components/test/PDFShareValidationComponent.tsx:405:          <p><strong>Step 2:</strong> Click "View" to manually inspect the UI and test PDF downloads</p>
src/components/test/PDFShareValidationComponent.tsx:408:          <p><strong>Expected:</strong> PDF generation, share links, QR codes, and fallback handling all work correctly</p>
src/components/test/UIResultsDisplayValidationComponent.tsx:2: * Prompt 2.4 Validation Component: UI Results Page Display Validation
src/components/test/UIResultsDisplayValidationComponent.tsx:4: * Tests that the ResultsPage and child components correctly render:
src/components/test/UIResultsDisplayValidationComponent.tsx:10: * - Share & PDF export options
src/components/test/UIResultsDisplayValidationComponent.tsx:19:  validateUIResultsDisplay, 
src/components/test/UIResultsDisplayValidationComponent.tsx:23:} from '@/utils/valuation/validateUIResultsDisplay';
src/components/test/UIResultsDisplayValidationComponent.tsx:26:export function UIResultsDisplayValidationComponent() {
src/components/test/UIResultsDisplayValidationComponent.tsx:28:  const [results, setResults] = useState<UIValidationResult[]>([]);
src/components/test/UIResultsDisplayValidationComponent.tsx:34:      const result = await validateUIResultsDisplay(vin);
src/components/test/UIResultsDisplayValidationComponent.tsx:35:      setResults([result]);
src/components/test/UIResultsDisplayValidationComponent.tsx:47:      const allResults = await validateAllUITestCases();
src/components/test/UIResultsDisplayValidationComponent.tsx:48:      setResults(allResults);
src/components/test/UIResultsDisplayValidationComponent.tsx:81:          üéØ Prompt 2.4: UI Results Page Display Validation
src/components/test/UIResultsDisplayValidationComponent.tsx:84:          Validates that ResultsPage correctly renders valuation results, market listings, 
src/components/test/UIResultsDisplayValidationComponent.tsx:85:          confidence scores, fallback messaging, and PDF/share functionality.
src/components/test/UIResultsDisplayValidationComponent.tsx:128:                View Results Page
src/components/test/UIResultsDisplayValidationComponent.tsx:148:      {/* Results Summary */}
src/components/test/UIResultsDisplayValidationComponent.tsx:154:              Prompt 2.4 Validation Results
src/components/test/UIResultsDisplayValidationComponent.tsx:200:                  <span>PDF and share features are live and interactive</span>
src/components/test/UIResultsDisplayValidationComponent.tsx:212:      {/* Detailed Results */}
src/components/test/UIResultsDisplayValidationComponent.tsx:215:          <h3 className="text-lg font-semibold">Detailed Test Results</h3>
src/components/test/UIResultsDisplayValidationComponent.tsx:242:                        <span>1. Valuation Output</span>
src/components/test/UIResultsDisplayValidationComponent.tsx:254:                        <span>4. PDF/Share Actions</span>
src/components/test/UIResultsDisplayValidationComponent.tsx:310:          <p><strong>Step 1:</strong> Run individual tests to validate specific VIN scenarios</p>
src/components/test/UIResultsDisplayValidationComponent.tsx:311:          <p><strong>Step 2:</strong> Click "View Results Page" to manually inspect the UI components</p>
src/components/modals/ValuationStepsModal.tsx:7:interface ValuationStepsModalProps {
src/components/modals/ValuationStepsModal.tsx:10:  onStartValuation: (type: 'basic' | 'premium') => void;
src/components/modals/ValuationStepsModal.tsx:13:export function ValuationStepsModal({
src/components/modals/ValuationStepsModal.tsx:16:  onStartValuation
src/components/modals/ValuationStepsModal.tsx:17:}: ValuationStepsModalProps) {
src/components/modals/ValuationStepsModal.tsx:30:      title="Get Your Vehicle Valuation"
src/components/modals/ValuationStepsModal.tsx:52:            <h3 className="text-xl font-bold text-foreground mb-2">Basic Valuation</h3>
src/components/modals/ValuationStepsModal.tsx:149:              <p className="text-xs text-muted-foreground">VIN or license plate</p>
src/components/modals/ValuationStepsModal.tsx:180:          onClick={() => onStartValuation('basic')}
src/components/modals/ValuationStepsModal.tsx:184:          Start Basic Valuation (FREE)
src/components/modals/ValuationStepsModal.tsx:190:          onClick={() => onStartValuation('premium')}
src/components/modals/ConfirmOfferModal.tsx:22:  vinOrPlate: string;
src/components/modals/ConfirmOfferModal.tsx:38:    vinOrPlate: '',
src/components/modals/ConfirmOfferModal.tsx:113:              Enter your VIN OR License Plate Number
src/components/modals/ConfirmOfferModal.tsx:118:                { label: 'VIN #', value: 'vin' },
src/components/modals/ConfirmOfferModal.tsx:119:                { label: 'License Plate', value: 'plate' }
src/components/modals/ConfirmOfferModal.tsx:130:                value={formData.vinOrPlate}
src/components/modals/ConfirmOfferModal.tsx:131:                onChange={(e) => setFormData(prev => ({ ...prev, vinOrPlate: e.target.value }))}
src/components/modals/ConfirmOfferModal.tsx:137:                How do I find my VIN?
src/components/modals/ConfirmOfferModal.tsx:192:              disabled={!formData.vinOrPlate}
src/components/followup/UnifiedFollowUpForm.tsx:10:import { useFollowUpForm } from "@/hooks/useFollowUpForm";
src/components/followup/UnifiedFollowUpForm.tsx:12:import { FollowUpAnswers } from "@/types/follow-up-answers";
src/components/followup/UnifiedFollowUpForm.tsx:14:interface UnifiedFollowUpFormProps {
src/components/followup/UnifiedFollowUpForm.tsx:16:  onComplete: (data: FollowUpAnswers) => void;
src/components/followup/UnifiedFollowUpForm.tsx:20:export function UnifiedFollowUpForm({ vehicleData, onComplete, tier }: UnifiedFollowUpFormProps) {
src/components/followup/UnifiedFollowUpForm.tsx:21:  const { formData, updateFormData, submitForm, isLoading, formMethods } = useFollowUpForm(vehicleData.vin);
src/components/followup/UnifiedFollowUpForm.tsx:326:              {isLoading ? "Submitting..." : "Complete Valuation"}
src/components/followup/FollowUpProgress.tsx:6:interface FollowUpProgressProps {
src/components/followup/FollowUpProgress.tsx:12:export function FollowUpProgress({ completionPercentage, isComplete, isSaving }: FollowUpProgressProps) {
src/e2e/free-valuation.spec.ts:3:test.describe("Free Valuation Flow", () => {
src/e2e/free-valuation.spec.ts:4:  test("Complete Free Valuation Flow as Guest", async ({ page }) => {
src/e2e/valuation-flow.test.ts:4:test.describe("Valuation Flow", () => {
src/e2e/valuation-flow.test.ts:48:    // Look for premium PDF button
src/e2e/valuation-flow.test.ts:93:  test("VIN lookup should validate and process valid input", async ({ page }) => {
src/e2e/valuation-flow.test.ts:94:    // Go to VIN lookup page
src/e2e/valuation-flow.test.ts:97:    // Test validation: Empty VIN
src/e2e/valuation-flow.test.ts:101:    // Test validation: Invalid VIN format
src/e2e/valuation-flow.test.ts:106:    // Test with valid VIN (sample VIN)
src/e2e/valuation-flow.test.ts:124:  test("Plate lookup should validate state selection", async ({ page }) => {
src/components/followup/tabs/PerformancePackagesTab.tsx:7:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/tabs/PerformancePackagesTab.tsx:11:  formData: FollowUpAnswers;
src/components/followup/tabs/PerformancePackagesTab.tsx:12:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/components/followup/tabs/ServiceHistoryTab.tsx:12:import { FollowUpAnswers, ServiceHistoryDetails } from '@/types/follow-up-answers';
src/components/followup/tabs/ServiceHistoryTab.tsx:16:  formData: FollowUpAnswers;
src/components/followup/tabs/ServiceHistoryTab.tsx:17:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/components/followup/tabs/ServiceHistoryTab.tsx:18:  onServiceHistoryChange?: (updates: Partial<FollowUpAnswers>) => void;
src/components/followup/tabs/LuxuryMaterialsTab.tsx:7:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/tabs/LuxuryMaterialsTab.tsx:11:  formData: FollowUpAnswers;
src/components/followup/tabs/LuxuryMaterialsTab.tsx:12:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/components/followup/tabs/ConditionTab.tsx:5:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/tabs/ConditionTab.tsx:10:  formData: FollowUpAnswers;
src/components/followup/tabs/ConditionTab.tsx:11:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/components/followup/tabs/ConditionTab.tsx:16:    key: 'tire_condition' as keyof FollowUpAnswers,
src/components/followup/tabs/ConditionTab.tsx:55:    key: 'exterior_condition' as keyof FollowUpAnswers,
src/components/followup/tabs/ConditionTab.tsx:94:    key: 'interior_condition' as keyof FollowUpAnswers,
src/components/followup/tabs/ConditionTab.tsx:133:    key: 'brake_condition' as keyof FollowUpAnswers,
src/components/followup/tabs/ConditionTab.tsx:200:  const handleConditionChange = (key: keyof FollowUpAnswers, value: string) => {
src/components/followup/tabs/ConditionTab.tsx:206:  const getConditionValue = (key: keyof FollowUpAnswers): string => {
src/components/followup/tabs/ConditionTab.tsx:216:  const createSetValueWrapper = (fieldKey: keyof FollowUpAnswers) => (name: string, value: string) => {
src/components/followup/tabs/ConditionTab.tsx:220:  const createWatchWrapper = (fieldKey: keyof FollowUpAnswers) => (name: string) => {
src/components/followup/tabs/VehicleBasicsTab.tsx:7:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/tabs/VehicleBasicsTab.tsx:10:  formData: FollowUpAnswers;
src/components/followup/tabs/VehicleBasicsTab.tsx:11:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/utils/forecasting/valuation-forecast.ts:45:export async function generateValuationForecast(valuationId: string): Promise<ForecastResult> {
src/utils/forecasting/generateVinForecast.ts:23:    console.log('üîÆ Generating AIN forecast for VIN:', vin);
src/components/followup/tabs/SafetySecurityTab.tsx:7:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/tabs/SafetySecurityTab.tsx:11:  formData: FollowUpAnswers;
src/components/followup/tabs/SafetySecurityTab.tsx:12:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/components/followup/tabs/AccidentHistoryTab.tsx:10:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/tabs/AccidentHistoryTab.tsx:13:  formData: FollowUpAnswers;
src/components/followup/tabs/AccidentHistoryTab.tsx:14:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/components/followup/tabs/ModificationsTab.tsx:9:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/tabs/ModificationsTab.tsx:12:  formData: FollowUpAnswers;
src/components/followup/tabs/ModificationsTab.tsx:13:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/utils/diagnostics/valuationAudit.ts:13:export async function runValuationAudit(vin: string): Promise<AuditResult> {
src/utils/diagnostics/valuationAudit.ts:18:  console.log(`üîç Starting diagnostic audit for VIN: ${vin}`);
src/utils/diagnostics/valuationAudit.ts:21:    // 1. Verify VIN format and valuation record
src/utils/diagnostics/valuationAudit.ts:23:      errors.push('‚ùå Invalid VIN format - must be 17 alphanumeric characters');
src/utils/diagnostics/valuationAudit.ts:37:      errors.push(`‚ùå No valuation record found for VIN: ${vin}`);
src/utils/diagnostics/valuationAudit.ts:59:      warnings.push(`‚ö†Ô∏è No decoded vehicle data found for VIN: ${vin}`);
src/utils/diagnostics/valuationAudit.ts:78:      warnings.push(`‚ö†Ô∏è No follow-up answers found for VIN: ${vin}`);
src/utils/diagnostics/valuationAudit.ts:82:    const { data: auctionResults } = await supabase
src/utils/diagnostics/valuationAudit.ts:88:    if (auctionResults && auctionResults.length > 0) {
src/utils/diagnostics/valuationAudit.ts:89:      dataPoints.auctionResults = auctionResults;
src/utils/diagnostics/valuationAudit.ts:90:      console.log(`‚úÖ Found ${auctionResults.length} auction records`);
src/utils/diagnostics/valuationAudit.ts:92:      warnings.push(`‚ö†Ô∏è No auction data found for VIN: ${vin}`);
src/utils/diagnostics/valuationAudit.ts:106:      warnings.push(`‚ö†Ô∏è No marketplace listings found for VIN: ${vin}`);
src/utils/diagnostics/valuationAudit.ts:123:    // 7. Check VIN forecast data
src/utils/diagnostics/valuationAudit.ts:134:      console.log(`‚úÖ Found VIN forecast data`);
src/utils/diagnostics/valuationAudit.ts:136:      warnings.push(`‚ö†Ô∏è No current forecast data found for VIN: ${vin}`);
src/utils/diagnostics/valuationAudit.ts:151:      warnings.push(`‚ö†Ô∏è No competitor pricing data found for VIN: ${vin}`);
src/utils/diagnostics/valuationAudit.ts:157:        warnings.push(`‚ö†Ô∏è Make mismatch: Valuation(${valuation.make}) vs Decoded(${decodedVehicle?.make})`);
src/utils/diagnostics/valuationAudit.ts:160:        warnings.push(`‚ö†Ô∏è Model mismatch: Valuation(${valuation.model}) vs Decoded(${decodedVehicle?.model})`);
src/utils/diagnostics/valuationAudit.ts:163:        warnings.push(`‚ö†Ô∏è Year mismatch: Valuation(${valuation.year}) vs Decoded(${decodedVehicle?.year})`);
src/utils/diagnostics/valuationAudit.ts:187:    const result = await runValuationAudit(vin);
src/utils/diagnostics/valuationAudit.ts:198:  console.log(`\nüîç DIAGNOSTIC AUDIT REPORT FOR VIN: ${result.vin}`);
src/utils/diagnostics/valuationAudit.ts:213:  console.log(`  ‚Ä¢ Valuation Record: ${result.dataPoints.valuation ? '‚úÖ' : '‚ùå'}`);
src/utils/diagnostics/valuationAudit.ts:216:  console.log(`  ‚Ä¢ Auction Results: ${result.dataPoints.auctionResults ? `‚úÖ (${result.dataPoints.auctionResults.length})` : '‚ö†Ô∏è'}`);
src/utils/diagnostics/valuationAudit.ts:219:  console.log(`  ‚Ä¢ VIN Forecast: ${result.dataPoints.vinForecast ? '‚úÖ' : '‚ö†Ô∏è'}`);
src/utils/diagnostics/valuationAudit.ts:223:    console.log(`\nüéâ ALL SYSTEMS OPERATIONAL FOR VIN: ${result.vin}`);
src/utils/diagnostics/valuationAudit.ts:225:    console.log(`\n‚ö†Ô∏è  SYSTEM FUNCTIONAL BUT HAS WARNINGS FOR VIN: ${result.vin}`);
src/utils/diagnostics/valuationAudit.ts:227:    console.log(`\nüö® SYSTEM ERRORS DETECTED FOR VIN: ${result.vin}`);
src/utils/diagnostics/marketDataDiagnostics.ts:11:    hasResults: boolean;
src/utils/diagnostics/marketDataDiagnostics.ts:16:    hasResults: boolean;
src/utils/diagnostics/marketDataDiagnostics.ts:21:    hasResults: boolean;
src/utils/diagnostics/marketDataDiagnostics.ts:34:  console.log('üîç Starting market data diagnostics for VIN:', testVin);
src/utils/diagnostics/marketDataDiagnostics.ts:38:    auctionData: { hasResults: false, count: 0, sampleEntries: [] },
src/utils/diagnostics/marketDataDiagnostics.ts:39:    marketListings: { hasResults: false, count: 0, sources: [] },
src/utils/diagnostics/marketDataDiagnostics.ts:40:    competitorPrices: { hasResults: false, count: 0, sources: [], samplePrices: [] },
src/utils/diagnostics/marketDataDiagnostics.ts:80:    console.log('üèÅ Checking auction results for test VIN...');
src/utils/diagnostics/marketDataDiagnostics.ts:81:    const { data: auctionResults } = await supabase
src/utils/diagnostics/marketDataDiagnostics.ts:87:    if (auctionResults && auctionResults.length > 0) {
src/utils/diagnostics/marketDataDiagnostics.ts:88:      result.auctionData.hasResults = true;
src/utils/diagnostics/marketDataDiagnostics.ts:89:      result.auctionData.count = auctionResults.length;
src/utils/diagnostics/marketDataDiagnostics.ts:90:      result.auctionData.sampleEntries = auctionResults.map(item => ({
src/utils/diagnostics/marketDataDiagnostics.ts:97:      console.log('‚ùå No auction results found for VIN:', testVin);
src/utils/diagnostics/marketDataDiagnostics.ts:108:      result.marketListings.hasResults = true;
src/utils/diagnostics/marketDataDiagnostics.ts:125:      result.competitorPrices.hasResults = true;
src/utils/diagnostics/marketDataDiagnostics.ts:147:      console.log('‚ùå No competitor price data found for VIN:', testVin);
src/utils/diagnostics/marketDataDiagnostics.ts:239:  console.log(`üèÅ Auction Data: ${result.auctionData.hasResults ? '‚úÖ ACTIVE' : '‚ùå MISSING'}`);
src/utils/diagnostics/marketDataDiagnostics.ts:240:  if (result.auctionData.hasResults) {
src/utils/diagnostics/marketDataDiagnostics.ts:244:  console.log(`üõí Market Listings: ${result.marketListings.hasResults ? '‚úÖ ACTIVE' : '‚ùå MISSING'}`);
src/utils/diagnostics/marketDataDiagnostics.ts:245:  if (result.marketListings.hasResults) {
src/utils/diagnostics/marketDataDiagnostics.ts:250:  console.log(`üí≤ Competitor Prices: ${result.competitorPrices.hasResults ? '‚úÖ ACTIVE' : '‚ùå MISSING'}`);
src/utils/diagnostics/marketDataDiagnostics.ts:251:  if (result.competitorPrices.hasResults) {
src/components/followup/tabs/ServiceMaintenanceTab.tsx:10:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/tabs/ServiceMaintenanceTab.tsx:13:  formData: FollowUpAnswers;
src/components/followup/tabs/ServiceMaintenanceTab.tsx:14:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/components/followup/tabs/ClimateControlTab.tsx:7:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/tabs/ClimateControlTab.tsx:11:  formData: FollowUpAnswers;
src/components/followup/tabs/ClimateControlTab.tsx:12:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/utils/formatters/formatVin.ts:2: * Formats a VIN (Vehicle Identification Number)
src/utils/formatters/formatVin.ts:3: * @param vin The VIN to format
src/utils/formatters/formatVin.ts:4: * @returns The formatted VIN
src/components/followup/tabs/TiresBrakesTab.tsx:3:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/tabs/TiresBrakesTab.tsx:8:  formData: FollowUpAnswers;
src/components/followup/tabs/TiresBrakesTab.tsx:9:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/components/followup/tabs/TitleOwnershipTab.tsx:6:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/tabs/TitleOwnershipTab.tsx:10:  formData: FollowUpAnswers;
src/components/followup/tabs/TitleOwnershipTab.tsx:11:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/components/followup/tabs/ExteriorFeaturesTab.tsx:7:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/tabs/ExteriorFeaturesTab.tsx:11:  formData: FollowUpAnswers;
src/components/followup/tabs/ExteriorFeaturesTab.tsx:12:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/components/followup/tabs/FinalReviewTab.tsx:5:import { FollowUpAnswers, AccidentDetails, ServiceHistoryDetails } from '@/types/follow-up-answers';
src/components/followup/tabs/FinalReviewTab.tsx:8:  formData: FollowUpAnswers;
src/components/followup/tabs/FinalReviewTab.tsx:9:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/components/followup/tabs/FinalReviewTab.tsx:184:          Your vehicle information has been reviewed. Click "Submit Valuation" to get your detailed vehicle valuation report.
src/components/followup/tabs/VehicleIssuesTab.tsx:7:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/tabs/VehicleIssuesTab.tsx:11:  formData: FollowUpAnswers;
src/components/followup/tabs/VehicleIssuesTab.tsx:12:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/utils/valuation.ts:5:export interface ValuationDetails {
src/utils/valuation.ts:18:export interface ValuationResult {
src/utils/valuation.ts:38:export async function getValuationById(id: string): Promise<ValuationResult | null> {
src/utils/valuation.ts:51:    return data as ValuationResult;
src/utils/valuation.ts:53:    console.error('Error in getValuationById:', error);
src/utils/valuation.ts:59: * Creates a valuation for a VIN
src/utils/valuation.ts:61:export async function createVinValuation(vin: string, userId?: string | null): Promise<ValuationResult | null> {
src/utils/valuation.ts:63:    // Decode VIN using the unified-decode edge function
src/utils/valuation.ts:69:      console.error('Error decoding VIN:', decodeError);
src/utils/valuation.ts:75:      console.error('No vehicle data returned from VIN decode');
src/utils/valuation.ts:118:      console.error('Error creating VIN valuation:', error);
src/utils/valuation.ts:122:    return data as ValuationResult;
src/utils/valuation.ts:124:    console.error('Error in createVinValuation:', error);
src/utils/valuation.ts:132:export async function createPlateValuation(plate: string, state: string, userId?: string | null): Promise<ValuationResult | null> {
src/utils/valuation.ts:136:    console.log('Plate lookup not yet implemented for production use');
src/utils/valuation.ts:139:    console.error('Error in createPlateValuation:', error);
src/utils/valuation.ts:147:export async function createManualValuation(details: ValuationDetails, userId?: string | null): Promise<ValuationResult | null> {
src/utils/valuation.ts:177:    return data as ValuationResult;
src/utils/valuation.ts:179:    console.error('Error in createManualValuation:', error);
src/utils/valuation.ts:187:function calculateEstimatedValue(details: ValuationDetails): number {
src/components/followup/tabs/SimplifiedBasicInfoTab.tsx:7:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/tabs/SimplifiedBasicInfoTab.tsx:12:  formData: FollowUpAnswers;
src/components/followup/tabs/SimplifiedBasicInfoTab.tsx:13:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/components/followup/tabs/FeaturesTab.tsx:9:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/tabs/FeaturesTab.tsx:12:  formData: FollowUpAnswers;
src/components/followup/tabs/FeaturesTab.tsx:13:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/utils/pdf/index.ts:2:// Re-export everything from the consolidated PDF service
src/utils/pdf/index.ts:7:  generateValuationPdf,
src/utils/pdf/index.ts:8:  downloadValuationPdf,
src/utils/pdf/index.ts:9:  uploadValuationPdf,
src/components/followup/tabs/ReviewTab.tsx:5:import { FollowUpAnswers, AccidentDetails, ModificationDetails } from '@/types/follow-up-answers';
src/components/followup/tabs/ReviewTab.tsx:8:  formData: FollowUpAnswers;
src/components/followup/tabs/ReviewTab.tsx:9:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/components/followup/tabs/ReviewTab.tsx:177:          Your vehicle information has been reviewed. Click "Submit Valuation" to get your detailed vehicle valuation report.
src/utils/pdf/styles.ts:1:import { PDFPage, RGB, rgb } from "pdf-lib";
src/utils/pdf/styles.ts:68:  page: PDFPage,
src/utils/pdf/styles.ts:98:  page: PDFPage,
src/utils/pdf/styles.ts:133:  page: PDFPage,
src/components/followup/tabs/InteriorMaterialsTab.tsx:7:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/tabs/InteriorMaterialsTab.tsx:11:  formData: FollowUpAnswers;
src/components/followup/tabs/InteriorMaterialsTab.tsx:12:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/utils/pdf/generateDebugInfo.ts:36:    - VIN decode accuracy: 90%`,
src/components/followup/tabs/DriverAssistanceTab.tsx:7:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/tabs/DriverAssistanceTab.tsx:11:  formData: FollowUpAnswers;
src/components/followup/tabs/DriverAssistanceTab.tsx:12:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/utils/pdf/generateValuationPdf.ts:1:import { PDFDocument, PDFPage, rgb, StandardFonts } from 'pdf-lib';
src/utils/pdf/generateValuationPdf.ts:4:import type { UnifiedValuationResult } from '@/types/valuation';
src/utils/pdf/generateValuationPdf.ts:7:export async function generateValuationPdf(result: UnifiedValuationResult): Promise<Blob> {
src/utils/pdf/generateValuationPdf.ts:8:  const pdfDoc = await PDFDocument.create();
src/utils/pdf/generateValuationPdf.ts:288:  // Valuation Summary
src/utils/pdf/generateValuationPdf.ts:448:export async function downloadValuationPdf(result: UnifiedValuationResult): Promise<void> {
src/utils/pdf/generateValuationPdf.ts:449:  const pdfBlob = await generateValuationPdf(result);
src/components/followup/tabs/TechnologyTab.tsx:7:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/tabs/TechnologyTab.tsx:11:  formData: FollowUpAnswers;
src/components/followup/tabs/TechnologyTab.tsx:12:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/utils/getValuationContext.ts:3:import { LegacyValuationResult } from "@/types/valuation";
src/utils/getValuationContext.ts:5:export async function getValuationContext(
src/utils/getValuationContext.ts:7:): Promise<Partial<LegacyValuationResult> | null> {
src/components/followup/tabs/PhysicalFeaturesTab.tsx:6:import { FollowUpAnswers, ConditionOption, TireConditionOption } from '@/types/follow-up-answers';
src/components/followup/tabs/PhysicalFeaturesTab.tsx:9:  formData: FollowUpAnswers;
src/components/followup/tabs/PhysicalFeaturesTab.tsx:10:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/utils/valuationAuditLogger.ts:1:// Enhanced Valuation Audit Logger with Full Metadata Support
src/utils/valuationAuditLogger.ts:25:export interface ValuationStepMetadata {
src/utils/valuationAuditLogger.ts:40:export async function logValuationAudit(
src/utils/valuationAuditLogger.ts:103:export async function logValuationStep(
src/utils/valuationAuditLogger.ts:129:    const cleanValuationRequestId = isValidUUID ? valuationRequestId : null;
src/utils/valuationAuditLogger.ts:142:      valuation_request_id: cleanValuationRequestId,
src/utils/valuationAuditLogger.ts:196:export async function logValuationError(
src/utils/valuationAuditLogger.ts:207:  await logValuationAudit('ERROR', {
src/utils/valuationAuditLogger.ts:234:  await logValuationStep(adjustment.label, vin, valuationRequestId, {
src/components/followup/tabs/VehicleConditionTab.tsx:3:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/tabs/VehicleConditionTab.tsx:7:  formData: FollowUpAnswers;
src/components/followup/tabs/VehicleConditionTab.tsx:8:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/components/followup/tabs/VehicleConditionTab.tsx:44:    key: 'condition' as keyof FollowUpAnswers,
src/components/followup/tabs/VehicleConditionTab.tsx:50:    key: 'exterior_condition' as keyof FollowUpAnswers,
src/components/followup/tabs/VehicleConditionTab.tsx:56:    key: 'interior_condition' as keyof FollowUpAnswers,
src/components/followup/tabs/VehicleConditionTab.tsx:62:    key: 'tire_condition' as keyof FollowUpAnswers,
src/components/followup/tabs/VehicleConditionTab.tsx:70:  const handleConditionChange = (key: keyof FollowUpAnswers, value: 'excellent' | 'good' | 'fair' | 'poor') => {
src/components/followup/tabs/AccidentsTab.tsx:10:import { FollowUpAnswers, AccidentDetails } from '@/types/follow-up-answers';
src/components/followup/tabs/AccidentsTab.tsx:14:  formData: FollowUpAnswers;
src/components/followup/tabs/AccidentsTab.tsx:15:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/utils/validation.ts:5:  if (!vin) return 'VIN is required';
src/utils/validation.ts:6:  if (vin.length !== 17) return 'VIN must be exactly 17 characters';
src/utils/validation.ts:8:  // Additional VIN validation logic
src/utils/validation.ts:11:    return 'VIN contains invalid characters (I, O, Q are not used in VINs)';
src/utils/validation.ts:17:export const validatePlate = (plate: string): string | undefined => {
src/components/followup/tabs/AudioEntertainmentTab.tsx:7:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/tabs/AudioEntertainmentTab.tsx:11:  formData: FollowUpAnswers;
src/components/followup/tabs/AudioEntertainmentTab.tsx:12:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/components/followup/tabs/BasicInfoTab.tsx:8:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/tabs/BasicInfoTab.tsx:14:  formData: FollowUpAnswers;
src/components/followup/tabs/BasicInfoTab.tsx:15:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/components/followup/TabNavigation.tsx:125:            {isLoading ? 'Completing Valuation...' : 'Complete Valuation'}
src/utils/confidenceCalculator.test.ts:51:    // Expect a lower score without VIN, ZIP, Carfax, etc.
src/utils/types/unifiedTypes.ts:4:export interface ValuationInput {
src/utils/types/unifiedTypes.ts:19:export interface ValuationResult {
src/utils/vehicleMetaParser.ts:1:// VIN Metadata Parser - Extract trim, fuel type, and engine from decoded VIN data
src/utils/vehicleMetaParser.ts:10: * Parses vehicle metadata from decoded VIN data
src/components/followup/validation/TabValidation.ts:2:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/validation/TabValidation.ts:11:  static validateBasicInfo(formData: FollowUpAnswers): TabValidationResult {
src/components/followup/validation/TabValidation.ts:44:  static validateCondition(formData: FollowUpAnswers): TabValidationResult {
src/components/followup/validation/TabValidation.ts:76:  static validateIssues(formData: FollowUpAnswers): TabValidationResult {
src/components/followup/validation/TabValidation.ts:91:  static validateServiceHistory(formData: FollowUpAnswers): TabValidationResult {
src/components/followup/validation/TabValidation.ts:112:  static validateAccidents(formData: FollowUpAnswers): TabValidationResult {
src/components/followup/validation/TabValidation.ts:152:  static validateModifications(formData: FollowUpAnswers): TabValidationResult {
src/components/followup/validation/TabValidation.ts:179:  static validateFeatures(formData: FollowUpAnswers): TabValidationResult {
src/components/followup/validation/TabValidation.ts:188:  static validateTab(tabName: string, formData: FollowUpAnswers): TabValidationResult {
src/components/followup/validation/TabValidation.ts:206:  static validateAllTabs(formData: FollowUpAnswers): Record<string, TabValidationResult> {
src/components/followup/validation/TabValidation.ts:218:  static getOverallCompletion(formData: FollowUpAnswers): number {
src/components/followup/index.ts:4:export { UnifiedFollowUpForm } from './UnifiedFollowUpForm';
src/components/followup/index.ts:10:export { UnifiedFollowUpForm as FollowUpForm } from './UnifiedFollowUpForm';
src/components/followup/TabProgressHeader.tsx:20:        <h3 className="text-lg font-semibold text-gray-900">Complete Your Valuation</h3>
src/components/followup/TabbedFollowUpForm.tsx:6:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/TabbedFollowUpForm.tsx:7:import { useSimpleFollowUpForm } from '@/hooks/useSimpleFollowUpForm';
src/components/followup/TabbedFollowUpForm.tsx:22:interface TabbedFollowUpFormProps {
src/components/followup/TabbedFollowUpForm.tsx:91:export function TabbedFollowUpForm({
src/components/followup/TabbedFollowUpForm.tsx:94:}: TabbedFollowUpFormProps) {
src/components/followup/TabbedFollowUpForm.tsx:102:    submitFollowUpAndStartValuation,
src/components/followup/TabbedFollowUpForm.tsx:108:  } = useSimpleFollowUpForm({
src/components/followup/TabbedFollowUpForm.tsx:203:      console.log('üöÄ [TabbedFollowUpForm] Starting form submission...');
src/components/followup/TabbedFollowUpForm.tsx:206:      const result = await submitFollowUpAndStartValuation();
src/components/followup/TabbedFollowUpForm.tsx:207:      console.log('üîç [TabbedFollowUpForm] Submission result:', result);
src/components/followup/TabbedFollowUpForm.tsx:210:        console.log('‚úÖ [TabbedFollowUpForm] Existing valuation found, navigating to results');
src/components/followup/TabbedFollowUpForm.tsx:213:      } else if (result.requiresValuation) {
src/components/followup/TabbedFollowUpForm.tsx:214:        console.log('üöÄ [TabbedFollowUpForm] No valuation exists, calling parent to create valuation');
src/components/followup/TabbedFollowUpForm.tsx:216:        // This allows the parent (ValuationFollowUpPage) to create the valuation
src/components/followup/TabbedFollowUpForm.tsx:219:        console.error('‚ùå [TabbedFollowUpForm] Submission failed:', result.message);
src/components/followup/TabbedFollowUpForm.tsx:226:      console.error('‚ùå [TabbedFollowUpForm] Submit error:', error);
src/components/followup/TabbedFollowUpForm.tsx:230:  }, [progressData.canSubmit, submitFollowUpAndStartValuation, onSubmit]);
src/utils/rules/calculators/colorCalculator.ts:3:import { ValuationData, Adjustment } from '../types';
src/utils/rules/calculators/colorCalculator.ts:9:  calculate(data: ValuationData): Adjustment | null {
src/components/followup/QuickOverviewCard.tsx:8:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/components/followup/QuickOverviewCard.tsx:11:  formData: FollowUpAnswers;
src/components/followup/QuickOverviewCard.tsx:12:  updateFormData: (updates: Partial<FollowUpAnswers>) => void;
src/components/followup/QuickOverviewCard.tsx:106:            {isLoading ? 'Processing...' : 'Complete Valuation with Basic Info'}
src/utils/rules/calculators/fuelTypeCalculator.ts:3:import { ValuationData, Adjustment } from '../types';
src/utils/rules/calculators/fuelTypeCalculator.ts:9:  calculate(data: ValuationData): Adjustment | null {
src/utils/rules/calculators/featuresCalculator.ts:3:import { ValuationData, Adjustment } from '../types';
src/utils/rules/calculators/featuresCalculator.ts:9:  calculate(data: ValuationData): Adjustment | null {
src/utils/rules/calculators/warrantyCalculator.ts:3:import { ValuationData, Adjustment } from '../types';
src/utils/rules/calculators/warrantyCalculator.ts:9:  calculate(data: ValuationData): Adjustment | null {
src/utils/rules/calculators/photoScoreCalculator.ts:3:import { ValuationData, Adjustment } from '../types';
src/utils/rules/calculators/photoScoreCalculator.ts:9:  calculate(data: ValuationData): Adjustment | null {
src/components/valuation/result/EnhancedValuationResult.tsx:8:interface EnhancedValuationResultProps {
src/components/valuation/result/EnhancedValuationResult.tsx:17:export const EnhancedValuationResult: React.FC<EnhancedValuationResultProps> = ({
src/components/valuation/result/EnhancedValuationResult.tsx:36:          <CardTitle>Enhanced Valuation Result</CardTitle>
src/components/valuation/result/EnhancedValuationResult.tsx:75:export default EnhancedValuationResult;
src/components/valuation/result/PremiumFeatures.tsx:22:            <p className="font-medium">Detailed PDF Report</p>
src/components/valuation/result/ValuationTransparency.tsx:10:interface ValuationTransparencyProps {
src/components/valuation/result/ValuationTransparency.tsx:26:export const ValuationTransparency: React.FC<ValuationTransparencyProps> = ({
src/components/valuation/result/ValuationTransparency.tsx:54:          Valuation Transparency
src/components/valuation/result/ValuationTransparency.tsx:150:          {/* Location and VIN Info */}
src/components/valuation/result/ValuationTransparency.tsx:154:              {vin && ` ‚Ä¢ VIN: ${vin.substring(0, 8)}...`}
src/components/valuation/result/ValuationActions.tsx:5:interface ValuationActionsProps {
src/components/valuation/result/ValuationActions.tsx:6:  onGeneratePDF: () => void;
src/components/valuation/result/ValuationActions.tsx:10:export function ValuationActions({ onGeneratePDF, onShare }: ValuationActionsProps) {
src/components/valuation/result/ValuationActions.tsx:13:      <Button onClick={onGeneratePDF} variant="outline" className="flex-1">
src/components/valuation/result/ValuationActions.tsx:15:        Download PDF
src/components/valuation/result/ValuationActions.tsx:19:        Share Results
src/utils/rules/calculators/mileageCalculator.ts:3:import { ValuationData, Adjustment } from '../types';
src/utils/rules/calculators/mileageCalculator.ts:9:  calculate(data: ValuationData): Adjustment | null {
src/components/valuation/result/index.ts:2:export { default as UnifiedValuationResult } from '../UnifiedValuationResult';
src/components/valuation/result/index.ts:3:export { ValuationActions } from './ValuationActions';
src/utils/rules/calculators/trimCalculator.ts:3:import { ValuationData, Adjustment } from '../types';
src/utils/rules/calculators/trimCalculator.ts:9:  calculate(data: ValuationData): Adjustment | null {
src/components/valuation/result/sections/PDFActions.tsx:8:interface PDFActionsProps {
src/components/valuation/result/sections/PDFActions.tsx:17:export const PDFActions: React.FC<PDFActionsProps> = ({
src/components/valuation/result/sections/PDFActions.tsx:32:          PDF Actions Component (Premium: {isPremium ? 'Yes' : 'No'})
src/components/valuation/result/sections/PDFActions.tsx:36:        <CardTitle className="text-lg">Valuation Report</CardTitle>
src/components/valuation/result/sections/PDFActions.tsx:50:                  Generating PDF...
src/components/valuation/result/sections/PDFActions.tsx:55:                  Download PDF Report
src/components/valuation/result/sections/PDFActions.tsx:83:                Premium members can download or email a comprehensive PDF report
src/components/valuation/result/sections/PDFActions.tsx:96:export default PDFActions;
src/utils/rules/calculators/transmissionCalculator.ts:3:import { ValuationData, Adjustment } from '../types';
src/utils/rules/calculators/transmissionCalculator.ts:9:  calculate(data: ValuationData): Adjustment | null {
src/utils/rules/calculators/carfaxCalculator.ts:3:import { ValuationData, Adjustment } from '../types';
src/utils/rules/calculators/carfaxCalculator.ts:9:  calculate(data: ValuationData): Adjustment | null {
src/utils/rules/calculators/recallCalculator.ts:3:import { ValuationData, Adjustment } from '../types';
src/utils/rules/calculators/recallCalculator.ts:9:  calculate(data: ValuationData): Adjustment | null {
src/utils/rules/RulesEngine.ts:3:import { RulesEngineInput, ValuationData, Adjustment } from '../valuation/rules/types';
src/utils/rules/RulesEngine.ts:23:        calculate: (data: ValuationData) => {
src/utils/rules/RulesEngine.ts:36:        calculate: (data: ValuationData) => {
src/utils/rules/RulesEngine.ts:50:  private convertToRulesEngineInput(data: ValuationData): RulesEngineInput {
src/utils/rules/RulesEngine.ts:74:  public calculateAdjustments(data: ValuationData): Adjustment[] {
src/components/valuation/result/ValuationSummary.tsx:9:export interface ValuationSummaryProps {
src/components/valuation/result/ValuationSummary.tsx:40:export const ValuationSummary: React.FC<ValuationSummaryProps> = ({
src/components/valuation/result/ValuationSummary.tsx:75:  // HONEST badge logic - only show VIN Match if we actually have market data
src/components/valuation/result/ValuationSummary.tsx:110:                VIN Match
src/components/valuation/result/ValuationSummary.tsx:169:          {confidenceLevel} Confidence Valuation
src/components/valuation/result/ValuationSummary.tsx:183:              Valuation based on fallback MSRP model.
src/components/valuation/result/ValuationSummary.tsx:200:              <h4 className="text-sm font-medium text-blue-800 mb-2">AI Valuation Insight</h4>
src/components/valuation/result/useValuationPdf.ts:6:interface UseValuationPdfProps {
src/components/valuation/result/useValuationPdf.ts:12:export function useValuationPdf({ valuationId, valuationData, conditionData }: UseValuationPdfProps) {
src/components/valuation/result/useValuationPdf.ts:43:        // Include MSRP data for PDF
src/components/valuation/result/useValuationPdf.ts:102:      toast.success('Valuation report downloaded successfully');
src/components/valuation/result/useValuationPdf.ts:105:      console.error('Error generating PDF:', error);
src/components/valuation/result/useValuationPdf.ts:122:      console.error('Error emailing PDF:', error);
src/components/valuation/result/useValuationPdf.ts:169:      // Generate PDF
src/components/valuation/result/useValuationPdf.ts:175:      console.error('Error generating sample PDF:', error);
src/utils/rules/types.ts:6:  ValuationData,
src/utils/rules/interfaces/Calculator.ts:2:import { ValuationData, Adjustment } from '../../valuation/rules/types';
src/utils/rules/interfaces/Calculator.ts:7:  calculate(data: ValuationData): Adjustment | null;
src/utils/getListingsWithCondition.ts:2:import { Valuation } from "@/types/dealer";
src/utils/getListingsWithCondition.ts:10:export interface ValuationWithCondition extends Valuation {
src/utils/getListingsWithCondition.ts:23:): Promise<ValuationWithCondition[]> {
src/utils/getListingsWithCondition.ts:65:  const transformedData: ValuationWithCondition[] = data.map((item: any) => {
src/utils/generateValuationExplanation.ts:14:export async function generateValuationExplanation(params: ExplanationParams): Promise<string> {
src/components/valuation/detail/VehicleDataTable.tsx:30:  manualValuation?: ManualVehicleInfo;
src/components/valuation/detail/VehicleDataTable.tsx:34:  { vehicleInfo, manualValuation }: VehicleDataTableProps,
src/components/valuation/detail/VehicleDataTable.tsx:38:    ...manualValuation,
src/utils/assistantContext.ts:115:          response = `As a premium member, you're enjoying our complete suite of valuation tools for your ${vehicleInfo}. Your benefits include: full CARFAX¬Æ vehicle history integration, 12-month price forecast projections, detailed market analysis across multiple platforms, depreciation curves, personalized selling recommendations, and dealer comparison tools. You can also generate unlimited comprehensive PDF reports. Is there a specific premium feature you'd like to explore further?`;
src/utils/assistantContext.ts:117:          response = `Our premium valuation package unlocks powerful insights for your ${vehicleInfo}. For just $29.99, you'll receive: complete CARFAX¬Æ vehicle history integration, 12-month value forecasting, comprehensive market analysis across dealer and private platforms, depreciation projections, personalized selling strategies, unlimited PDF reports, and direct dealer offers. This typically helps sellers get 8-12% more for their vehicles. Would you like to upgrade to premium today?`;
src/utils/valuationErrorHandler.ts:5:export interface ValuationError {
src/utils/valuationErrorHandler.ts:13:export class ValuationErrorHandler {
src/utils/valuationErrorHandler.ts:14:  static handleVinDecodeError(error: any): ValuationError {
src/utils/valuationErrorHandler.ts:15:    if (error?.message?.includes('Invalid VIN format')) {
src/utils/valuationErrorHandler.ts:17:        code: 'INVALID_VIN',
src/utils/valuationErrorHandler.ts:21:        userMessage: 'Please enter a valid 17-character VIN (letters and numbers only, no I, O, or Q).'
src/utils/valuationErrorHandler.ts:31:        userMessage: 'VIN decode service is temporarily unavailable. Please try again in a moment.'
src/utils/valuationErrorHandler.ts:50:      userMessage: 'Failed to decode VIN. Please try again or use manual entry.'
src/utils/valuationErrorHandler.ts:54:  static handleValuationError(error: any): ValuationError {
src/utils/valuationErrorHandler.ts:90:      userMessage: 'Valuation process failed. Please try again or contact support.'
src/utils/valuationErrorHandler.ts:94:  static shouldRetry(error: ValuationError, attemptCount: number): boolean {
src/utils/valuationErrorHandler.ts:122:        ? ValuationErrorHandler.handleVinDecodeError(error)
src/utils/valuationErrorHandler.ts:123:        : ValuationErrorHandler.handleValuationError(error);
src/utils/valuationErrorHandler.ts:125:      if (!ValuationErrorHandler.shouldRetry(valuationError, attempt)) {
src/utils/valuationErrorHandler.ts:130:        const delay = ValuationErrorHandler.getRetryDelay(attempt);
src/components/valuation/comprehensive/ComprehensiveValuationForm.tsx:2:import { useValuationApi } from '@/hooks/useValuationApi';
src/components/valuation/comprehensive/ComprehensiveValuationForm.tsx:13:interface ComprehensiveValuationFormProps {
src/components/valuation/comprehensive/ComprehensiveValuationForm.tsx:29:export function ComprehensiveValuationForm({ onResult }: ComprehensiveValuationFormProps) {
src/components/valuation/comprehensive/ComprehensiveValuationForm.tsx:30:  const { isLoading, result, error, startFullValuation, sources, loadSources } = useValuationApi();
src/components/valuation/comprehensive/ComprehensiveValuationForm.tsx:90:    await startFullValuation(valuationRequest);
src/components/valuation/comprehensive/ComprehensiveValuationForm.tsx:107:            Comprehensive Market Valuation
src/components/valuation/comprehensive/ComprehensiveValuationForm.tsx:242:                  Get Comprehensive Valuation
src/components/valuation/comprehensive/ComprehensiveValuationForm.tsx:279:              Valuation Complete
src/components/valuation/hooks/useValuationData.ts:5:interface ValuationData {
src/components/valuation/hooks/useValuationData.ts:18:export function useValuationData(valuationId: string) {
src/components/valuation/hooks/useValuationData.ts:19:  const [valuationData, setValuationData] = useState<ValuationData | null>(null);
src/components/valuation/hooks/useValuationData.ts:24:    const fetchValuationData = async () => {
src/components/valuation/hooks/useValuationData.ts:41:          const realData: ValuationData = {
src/components/valuation/hooks/useValuationData.ts:54:          setValuationData(realData);
src/components/valuation/hooks/useValuationData.ts:62:        setValuationData(null);
src/components/valuation/hooks/useValuationData.ts:69:      fetchValuationData();
src/components/valuation/MarketDataWarning.tsx:85:              Valuation accuracy is good but could be improved with additional market data.`;
src/components/valuation/valuation-core/ValuationResult.tsx:5:interface FreeValuationResultProps {
src/components/valuation/valuation-core/ValuationResult.tsx:20:const UnifiedValuationResult: React.FC<FreeValuationResultProps> = ({
src/components/valuation/valuation-core/ValuationResult.tsx:32:          <CardTitle>Vehicle Valuation</CardTitle>
src/components/valuation/valuation-core/ValuationResult.tsx:77:export default UnifiedValuationResult;
src/components/valuation/valuation-core/ValuationScoreBar.tsx:6:interface ValuationScoreBarProps {
src/components/valuation/valuation-core/ValuationScoreBar.tsx:13:export function ValuationScoreBar({
src/components/valuation/valuation-core/ValuationScoreBar.tsx:18:}: ValuationScoreBarProps) {
src/components/valuation/valuation-core/ValuationReport.tsx:3:const ValuationReport = () => {
src/components/valuation/valuation-core/ValuationReport.tsx:6:      <h2>Valuation Report</h2>
src/components/valuation/valuation-core/ValuationReport.tsx:12:export default ValuationReport;
src/components/valuation/valuation-core/ValuationReportHeader.tsx:3:const ValuationReportHeader = () => {
src/components/valuation/valuation-core/ValuationReportHeader.tsx:6:      <h1>Vehicle Valuation Report</h1>
src/components/valuation/valuation-core/ValuationReportHeader.tsx:12:export default ValuationReportHeader;
src/components/valuation/valuation-core/ValuationFactorsGrid.tsx:5:export interface ValuationFactors {
src/components/valuation/valuation-core/ValuationFactorsGrid.tsx:12:export interface ValuationFactorsGridProps {
src/components/valuation/valuation-core/ValuationFactorsGrid.tsx:13:  values: ValuationFactors;
src/components/valuation/valuation-core/ValuationFactorsGrid.tsx:14:  onChange: (id: keyof ValuationFactors, value: any) => void;
src/components/valuation/valuation-core/ValuationFactorsGrid.tsx:17:export const ValuationFactorsGrid: React.FC<ValuationFactorsGridProps> = ({
src/components/valuation/valuation-core/ValuationFactorsGrid.tsx:63:export default ValuationFactorsGrid;
src/components/valuation/ValuationResultsProps.ts:2:export interface ValuationResultsProps {
src/components/valuation/VehicleFoundCard.tsx:56:                <span className="text-sm font-medium text-gray-500">VIN</span>
src/components/valuation/VehicleFoundCard.tsx:129:              Continue to Enhanced Valuation
src/components/valuation/ValuationProgressDisplay.tsx:6:import { ValuationStep, EngineeringPhase, ENGINEERING_PHASES, getOverallEngineeringProgress } from '@/utils/valuation/progressTracker';
src/components/valuation/ValuationProgressDisplay.tsx:8:interface ValuationProgressDisplayProps {
src/components/valuation/ValuationProgressDisplay.tsx:10:  currentStep?: ValuationStep;
src/components/valuation/ValuationProgressDisplay.tsx:11:  steps: ValuationStep[];
src/components/valuation/ValuationProgressDisplay.tsx:15:export function ValuationProgressDisplay({ 
src/components/valuation/ValuationProgressDisplay.tsx:20:}: ValuationProgressDisplayProps) {
src/components/valuation/ValuationProgressDisplay.tsx:21:  const getStepIcon = (status: ValuationStep['status']) => {
src/components/valuation/ValuationProgressDisplay.tsx:34:  const getStepColor = (status: ValuationStep['status']) => {
src/components/valuation/ValuationProgressDisplay.tsx:55:            <CardTitle className="text-lg">Valuation Progress</CardTitle>
src/components/valuation/ValuationProgressDisplay.tsx:83:          <CardTitle className="text-base">Valuation Steps</CardTitle>
src/components/valuation/ValuationProgressDisplay.tsx:147:export default ValuationProgressDisplay;
src/components/valuation/FollowUpQuestions.tsx:12:interface FollowUpQuestionsProps {
src/components/valuation/FollowUpQuestions.tsx:17:export const FollowUpQuestions: React.FC<FollowUpQuestionsProps> = ({ 
src/components/valuation/FollowUpQuestions.tsx:103:        <CardTitle>Complete Your Accurate Valuation</CardTitle>
src/components/valuation/FollowUpQuestions.tsx:290:            {isLoading ? 'Calculating Accurate Valuation...' : 'Get 100% Accurate Valuation'}
src/components/valuation/AuctionResults.tsx:8:interface AuctionResultsProps {
src/components/valuation/AuctionResults.tsx:9:  auctionResults: AuctionResult[];
src/components/valuation/AuctionResults.tsx:12:export function AuctionResults({ auctionResults }: AuctionResultsProps) {
src/components/valuation/AuctionResults.tsx:13:  if (!auctionResults || auctionResults.length === 0) {
src/components/valuation/AuctionResults.tsx:17:          <CardTitle className="text-lg">Auction Results</CardTitle>
src/components/valuation/AuctionResults.tsx:42:        <CardTitle className="text-lg">Recent Auction Results</CardTitle>
src/components/valuation/AuctionResults.tsx:44:          {auctionResults.length} recent sale{auctionResults.length !== 1 ? 's' : ''} found
src/components/valuation/AuctionResults.tsx:48:        {auctionResults.map((result, index) => (
src/components/valuation/AuctionIntelligenceCard.tsx:87:            No auction intelligence data available for this VIN.
src/components/valuation/AuctionIntelligenceCard.tsx:125:          Advanced auction analysis and flip detection for this VIN
src/components/valuation/AuctionIntelligenceCard.tsx:203:                Multiple auction sources reported conflicting data for this VIN. Verify details carefully.
src/components/valuation/MarketBreakdownPanel.tsx:7:import type { UnifiedValuationResult } from '@/types/valuation';
src/components/valuation/MarketBreakdownPanel.tsx:10:  result: UnifiedValuationResult;
src/components/valuation/MarketBreakdownPanel.tsx:40:            üìä Market Listings Used in Valuation
src/components/valuation/MarketBreakdownPanel.tsx:123:          üìä Market Listings Used in Valuation
src/components/valuation/ListingProcessAuditForm.tsx:57:  hasVinPlatePhoto?: boolean;
src/components/valuation/ListingProcessAuditForm.tsx:238:              <Label htmlFor="vin">VIN</Label>
src/components/valuation/ListingProcessAuditForm.tsx:311:            <Label htmlFor="matchToSubject">Match to Subject VIN?</Label>
src/components/valuation/ListingProcessAuditForm.tsx:443:                id="vinPlatePhoto"
src/components/valuation/ListingProcessAuditForm.tsx:444:                checked={formData.hasVinPlatePhoto || false}
src/components/valuation/ListingProcessAuditForm.tsx:445:                onCheckedChange={(checked) => setFormData({...formData, hasVinPlatePhoto: checked as boolean})}
src/components/valuation/ListingProcessAuditForm.tsx:448:              <Label htmlFor="vinPlatePhoto">VIN plate photo?</Label>
src/components/valuation/ListingProcessAuditForm.tsx:574:            <Label htmlFor="finalMethod">Final Method for Valuation</Label>
src/components/valuation/BidCarsResults.tsx:22:interface BidCarsResultsProps {
src/components/valuation/BidCarsResults.tsx:26:export function BidCarsResults({ vin }: BidCarsResultsProps) {
src/components/valuation/BidCarsResults.tsx:95:            Found {records.length} auction record{records.length !== 1 ? 's' : ''} for this VIN
src/components/valuation/MarketListingCard.tsx:28:  // Sort listings to show exact VIN match first
src/components/valuation/MarketListingCard.tsx:48:            VIN Match Found
src/components/valuation/MarketListingCard.tsx:88:                      Exact VIN
src/components/valuation/MarketListingCard.tsx:139:                VIN: {listing.vin}
src/components/valuation/RerunValuationButton.tsx:4:import { useValuationContext } from '@/contexts/ValuationContext';
src/components/valuation/RerunValuationButton.tsx:6:export function RerunValuationButton() {
src/components/valuation/RerunValuationButton.tsx:7:  const { valuationData } = useValuationContext();
src/components/valuation/RerunValuationButton.tsx:40:        {isRerunning ? 'Rerunning...' : 'Update Valuation'}
src/components/valuation/CarFinderQaherCard.tsx:54:                VIN: {vehicle.vin}
src/components/valuation/report/ValuationReport.tsx:4:interface ValuationReportProps {
src/components/valuation/report/ValuationReport.tsx:8:export const ValuationReport: React.FC<ValuationReportProps> = ({ data }) => {
src/components/valuation/report/ValuationReport.tsx:11:      <h3 className="text-lg font-semibold mb-2">Valuation Report</h3>
src/components/valuation/report/ValuationReport.tsx:17:export default ValuationReport;
src/components/valuation/report/ValuationReportHeader.tsx:4:interface ValuationReportHeaderProps {
src/components/valuation/report/ValuationReportHeader.tsx:9:export const ValuationReportHeader: React.FC<ValuationReportHeaderProps> = ({ title, subtitle }) => {
src/components/valuation/report/ValuationReportHeader.tsx:18:export default ValuationReportHeader;
src/utils/lookupService.ts:2:// Consolidated lookup service combining VIN, plate, and manual lookup functionality
src/utils/lookupService.ts:3:import { DecodedVehicleInfo, PlateLookupInfo, UnifiedVehicleData } from '@/types/vehicle';
src/utils/lookupService.ts:17:export interface PlateLookupOptions {
src/utils/lookupService.ts:22:// VIN Lookup functionality
src/utils/lookupService.ts:25:    // Simulate VIN lookup API call
src/utils/lookupService.ts:58:      error: error instanceof Error ? error.message : 'VIN lookup failed',
src/utils/lookupService.ts:64:// Plate Lookup functionality
src/utils/lookupService.ts:65:export async function lookupByPlate(plate: string, options: PlateLookupOptions): Promise<LookupResult> {
src/utils/lookupService.ts:101:      error: error instanceof Error ? error.message : 'Plate lookup failed',
src/utils/lookupService.ts:107:// Unified lookup function that can handle VIN and plate lookups
src/utils/lookupService.ts:117:      return lookupByPlate(identifier, options);
src/utils/lookupService.ts:129:export const plateLookup = lookupByPlate;
src/components/valuation/report/index.ts:2:export { default as ValuationReport } from "./ValuationReport";
src/components/valuation/report/index.ts:3:export { default as ValuationReportHeader } from "./ValuationReportHeader";
src/components/valuation/ValuationDetailsForm.tsx:13:interface ValuationDetailsFormProps {
src/components/valuation/ValuationDetailsForm.tsx:32:export function ValuationDetailsForm({ onSubmit, isLoading = false }: ValuationDetailsFormProps) {
src/components/valuation/ValuationDetailsForm.tsx:192:            loadingText="Getting Valuation..."
src/components/valuation/ValuationDetailsForm.tsx:195:            Get Valuation
src/utils/validation/validateCorrectedPipeline.ts:53:    // Check if PDF can be generated
src/utils/validation/validateCorrectedPipeline.ts:70:    ['Valuation Record Updated', validation.valuationRecord],
src/utils/validation/validateCorrectedPipeline.ts:74:    ['PDF Generation Ready', validation.pdfGenerated]
src/utils/validation/plate-validation-helpers.ts:2:export type PlateFormat = {
src/utils/validation/plate-validation-helpers.ts:8:  [stateCode: string]: PlateFormat;
src/utils/validation/plate-validation-helpers.ts:62: * @returns Plate format rules for the state
src/utils/validation/plate-validation-helpers.ts:64:export function getStateFormat(stateCode: string): PlateFormat {
src/utils/validation/plate-validation-helpers.ts:75:export function validateStatePlate(plate: string, stateCode: string): {
src/utils/validation/plate-validation-helpers.ts:88:  const cleanPlate = plate.replace(/\s/g, "").toUpperCase();
src/utils/validation/plate-validation-helpers.ts:90:  if (!format.regex.test(cleanPlate)) {
src/components/valuation/AutoAuctionsResults.tsx:23:interface AutoAuctionsResultsProps {
src/components/valuation/AutoAuctionsResults.tsx:27:export function AutoAuctionsResults({ vin }: AutoAuctionsResultsProps) {
src/components/valuation/AutoAuctionsResults.tsx:96:            Found {records.length} auction record{records.length !== 1 ? 's' : ''} for this VIN
src/utils/validation/vin-validation-helpers.tsx:5: * Informational component to explain VIN format
src/utils/validation/vin-validation-helpers.tsx:12:        Find your 17-character VIN on your vehicle registration, insurance card,
src/components/valuation/premium/PDFDownloadSection.tsx:6:interface PDFDownloadSectionProps {
src/components/valuation/premium/PDFDownloadSection.tsx:10:const PDFDownloadSection: React.FC<PDFDownloadSectionProps> = ({ valuationId }) => {
src/components/valuation/premium/PDFDownloadSection.tsx:12:    console.log('Downloading PDF for valuation:', valuationId);
src/components/valuation/premium/PDFDownloadSection.tsx:18:      Download PDF Report
src/components/valuation/premium/PDFDownloadSection.tsx:23:export default PDFDownloadSection;
src/utils/validation/vin-validation.ts:10:    return { isValid: false, message: "VIN is required", error: "VIN is required" };
src/utils/validation/vin-validation.ts:14:    return { isValid: false, message: "VIN must be exactly 17 characters", error: "VIN must be exactly 17 characters" };
src/utils/validation/vin-validation.ts:18:    return { isValid: false, message: "VIN contains invalid characters", error: "VIN contains invalid characters" };
src/utils/validation/vin-validation.ts:25:export const validateVIN = validateVin;
src/utils/validation/vin-validation.ts:26:export const isValidVIN = (vin: string): boolean => validateVin(vin).isValid;
src/utils/validation/enhanced-vin-validation.ts:4:// Export the VIN regex for reuse
src/utils/validation/enhanced-vin-validation.ts:5:export const VIN_REGEX = /^[A-HJ-NPR-Z0-9]{17}$/;
src/utils/validation/enhanced-vin-validation.ts:24:  vin: z.string().regex(/^[A-HJ-NPR-Z0-9]{17}$/, "Invalid VIN format").optional(),
src/utils/validation/enhanced-vin-validation.ts:35:    return { isValid: false, message: "VIN is required", error: "VIN is required" };
src/utils/validation/enhanced-vin-validation.ts:39:    return { isValid: false, message: "VIN must be exactly 17 characters", error: "VIN must be exactly 17 characters" };
src/utils/validation/enhanced-vin-validation.ts:43:    return { isValid: false, message: "VIN contains invalid characters", error: "VIN contains invalid characters" };
src/utils/validation/enhanced-vin-validation.ts:50:export const validateVIN = validateVin;
src/utils/validation/enhanced-vin-validation.ts:51:export const isValidVIN = (vin: string): boolean => validateVin(vin).isValid;
src/utils/valuationLogger.ts:6:export interface ValuationLogEntry {
src/utils/valuationLogger.ts:16:class ValuationLogger {
src/utils/valuationLogger.ts:17:  private static instance: ValuationLogger;
src/utils/valuationLogger.ts:19:  static getInstance(): ValuationLogger {
src/utils/valuationLogger.ts:20:    if (!ValuationLogger.instance) {
src/utils/valuationLogger.ts:21:      ValuationLogger.instance = new ValuationLogger();
src/utils/valuationLogger.ts:23:    return ValuationLogger.instance;
src/utils/valuationLogger.ts:26:  private formatLog(entry: ValuationLogEntry): void {
src/utils/valuationLogger.ts:32:    console.log(`üöó VIN: ${entry.vin}`);
src/utils/valuationLogger.ts:56:  log(entry: Omit<ValuationLogEntry, 'timestamp'>): void {
src/utils/valuationLogger.ts:57:    const logEntry: ValuationLogEntry = {
src/utils/valuationLogger.ts:111:export const valuationLogger = ValuationLogger.getInstance();
src/components/valuation/redesign/TabbedResultsPanels.tsx:15:import type { UnifiedValuationResult } from '@/types/valuation';
src/components/valuation/redesign/TabbedResultsPanels.tsx:24:interface TabbedResultsPanelsProps {
src/components/valuation/redesign/TabbedResultsPanels.tsx:25:  result: UnifiedValuationResult;
src/components/valuation/redesign/TabbedResultsPanels.tsx:31:export function TabbedResultsPanels({ result, onUpgrade, isPremium, valuationId }: TabbedResultsPanelsProps) {
src/components/valuation/redesign/TabbedResultsPanels.tsx:171:function OverviewTab({ result }: { result: UnifiedValuationResult }) {
src/components/valuation/redesign/TabbedResultsPanels.tsx:213:          <h3 className="font-semibold mb-4">Valuation Summary</h3>
src/components/valuation/redesign/TabbedResultsPanels.tsx:238:function AnalysisTab({ result }: { result: UnifiedValuationResult }) {
src/components/valuation/redesign/TabbedResultsPanels.tsx:271:function MarketTab({ result }: { result: UnifiedValuationResult }) {
src/components/valuation/redesign/TabbedResultsPanels.tsx:319:function SourcesTab({ result }: { result: UnifiedValuationResult }) {
src/components/valuation/redesign/TabbedResultsPanels.tsx:352:  result: UnifiedValuationResult; 
src/components/valuation/redesign/TabbedResultsPanels.tsx:377:function EnhancedListingsTab({ result }: { result: UnifiedValuationResult }) {
src/components/valuation/redesign/InteractiveValueBreakdown.tsx:293:                <p className="font-medium">About This Valuation</p>
src/utils/confidenceScore.ts:25:  // VIN provides the highest confidence boost as it's a unique identifier
src/components/valuation/redesign/MarketListingsGrid.tsx:109:                Valuation based on depreciation model and regional market adjustments.
src/utils/schemas.ts:22:export const PlateSchema = plateSchema;
src/utils/index.ts:9:  generateValuationPdf as generatePdf,
src/utils/index.ts:10:  downloadValuationPdf as downloadPdf,
src/utils/index.ts:11:  uploadValuationPdf as uploadPdf 
src/utils/index.ts:16:  lookupByPlate as plateLookup
src/utils/pdfService.ts:2:import { PDFDocument, rgb, StandardFonts, degrees } from 'pdf-lib';
src/utils/pdfService.ts:38:  auctionResults?: any[];
src/utils/pdfService.ts:71:  const vinPart = vin ? vin.slice(-6) : 'NOVIN';
src/utils/pdfService.ts:78:// Add watermark and tracking to PDF
src/utils/pdfService.ts:85:    const pdfDoc = await PDFDocument.load(pdfBytes);
src/utils/pdfService.ts:90:      ? 'CarPerfector Premium Valuation ‚Äì For Dealer Use Only'
src/utils/pdfService.ts:91:      : 'CarPerfector Valuation Report';
src/utils/pdfService.ts:119:    console.error('Error adding watermark to PDF:', error);
src/utils/pdfService.ts:124:// Log PDF generation
src/utils/pdfService.ts:143:      console.error('Failed to log PDF generation:', error);
src/utils/pdfService.ts:146:    console.error('Error logging PDF generation:', error);
src/utils/pdfService.ts:150:// Core PDF generation function
src/utils/pdfService.ts:151:export async function generateValuationPdf(data: ReportData, options: PdfOptions = {}): Promise<Buffer> {
src/utils/pdfService.ts:152:  const pdfDoc = await PDFDocument.create();
src/utils/pdfService.ts:163:  page.drawText('Vehicle Valuation Report', {
src/utils/pdfService.ts:174:    ['VIN:', data.vin || 'N/A'],
src/utils/pdfService.ts:203:  // Valuation Results
src/utils/pdfService.ts:205:  page.drawText('Valuation Results', {
src/utils/pdfService.ts:266:    page.drawText('Valuation Breakdown', {
src/utils/pdfService.ts:462:// Download PDF function
src/utils/pdfService.ts:463:export async function downloadValuationPdf(data: ReportData, options: PdfOptions = {}): Promise<void> {
src/utils/pdfService.ts:464:  const pdfBuffer = await generateValuationPdf(data, options);
src/utils/pdfService.ts:479:// Upload PDF to Supabase Storage
src/utils/pdfService.ts:480:export async function uploadValuationPdf(
src/utils/pdfService.ts:485:    const pdfBuffer = await generateValuationPdf(data, options);
src/utils/pdfService.ts:498:      console.error('Error uploading PDF to Supabase:', uploadError);
src/utils/pdfService.ts:507:      console.error('Error getting public URL for PDF');
src/utils/pdfService.ts:513:    console.error('Error uploading PDF:', error);
src/utils/pdfService.ts:519:export const downloadPdf = downloadValuationPdf;
src/utils/pdfService.ts:520:export const generateReport = generateValuationPdf;
src/components/valuation/redesign/PremiumFeatureOverlay.tsx:44:      title: 'PDF Reports',
src/components/valuation/redesign/PremiumFeatureOverlay.tsx:47:      preview: 'Professional PDF with charts and insights'
src/components/valuation/redesign/PremiumFeatureOverlay.tsx:218:                  <span>PDF Reports</span>
src/components/valuation/redesign/LinearProgressStepper.tsx:129:                <h2 className="text-xl font-semibold">Improve Your Valuation Accuracy</h2>
src/components/valuation/redesign/LinearProgressStepper.tsx:270:                      Complete Valuation
src/components/valuation/redesign/LinearProgressStepper.tsx:290:                    Please fill in the required information in the Basic Info and Condition steps to enable the Complete Valuation button.
src/components/valuation/redesign/VehicleHeroCard.tsx:100:                  Premium Valuation
src/components/valuation/redesign/VehicleHeroCard.tsx:106:          {/* Valuation Summary */}
src/components/valuation/redesign/ConfidenceRing.tsx:28:    { name: 'VIN Accuracy', score: factors.vinAccuracy, icon: CheckCircle },
src/components/valuation/UnifiedValuationResult.tsx:10:import type { UnifiedValuationResult as ValuationResultType } from '@/types/valuation';
src/components/valuation/UnifiedValuationResult.tsx:13:interface UnifiedValuationResultProps {
src/components/valuation/UnifiedValuationResult.tsx:14:  result: ValuationResultType;
src/components/valuation/UnifiedValuationResult.tsx:17:export const UnifiedValuationResult: React.FC<UnifiedValuationResultProps> = ({ result }) => {
src/components/valuation/UnifiedValuationResult.tsx:23:    console.log('UnifiedValuationResult received data:', {
src/components/valuation/UnifiedValuationResult.tsx:74:    recommendations.push('Provide a valid 17-character VIN for the most accurate valuation');
src/components/valuation/UnifiedValuationResult.tsx:89:            <CardTitle>Valuation Error</CardTitle>
src/components/valuation/UnifiedValuationResult.tsx:118:              Retry Valuation
src/components/valuation/UnifiedValuationResult.tsx:179:                Valuation Summary
src/components/valuation/UnifiedValuationResult.tsx:252:              <CardTitle>Valuation Breakdown</CardTitle>
src/components/valuation/UnifiedValuationResult.tsx:308:export default UnifiedValuationResult;
src/components/valuation/ValuationEmptyState.tsx:6:interface ValuationEmptyStateProps {
src/components/valuation/ValuationEmptyState.tsx:12:export const ValuationEmptyState: React.FC<ValuationEmptyStateProps> = ({
src/components/valuation/ValuationEmptyState.tsx:22:      <h3 className="text-lg font-medium mb-2">Valuation Error</h3>
src/components/valuation/ValuationEmptyState.tsx:33:export { ValuationEmptyState as EmptyState };
src/components/valuation/free/FreeValuationForm.tsx:25:import { useValuationContext } from '@/contexts/ValuationContext';
src/components/valuation/free/FreeValuationForm.tsx:47:type ValuationFormData = z.infer<typeof valuationSchema>;
src/components/valuation/free/FreeValuationForm.tsx:49:export const FreeValuationForm = () => {
src/components/valuation/free/FreeValuationForm.tsx:52:  const { rerunValuation } = useValuationContext();
src/components/valuation/free/FreeValuationForm.tsx:61:  } = useForm<ValuationFormData>({
src/components/valuation/free/FreeValuationForm.tsx:73:  const onSubmit = async (data: ValuationFormData) => {
src/components/valuation/free/FreeValuationForm.tsx:78:      await rerunValuation({
src/components/valuation/free/FreeValuationForm.tsx:90:      toast.success("Valuation completed successfully!");
src/components/valuation/free/FreeValuationForm.tsx:93:      console.error("Valuation error:", err);
src/components/valuation/free/FreeValuationForm.tsx:111:            Free Basic Valuation
src/components/valuation/free/FreeValuationForm.tsx:259:                Generating Valuation...
src/components/valuation/free/FreeValuationForm.tsx:263:              "Get Free Valuation"
src/components/valuation/free/FreeValuationForm.tsx:272:export default FreeValuationForm;
src/components/valuation/index.ts:2:// Valuation Components - Consolidated Export
src/components/valuation/index.ts:5:// to avoid conflicts. Use PhotoUploadAndScore or ValuationPhotoUpload from the main index.
src/components/valuation/index.ts:7:export { ValuationEmptyState } from './ValuationEmptyState';
src/components/valuation/index.ts:10:export { ValuationEmptyState as EmptyState } from './ValuationEmptyState';
src/components/valuation/index.ts:13:export { ValuationEmptyState as ErrorState } from './ValuationEmptyState';
src/components/valuation/AuctionInsightCard.tsx:47:            Past appearances in Copart, IAAI, and other auction sites for this VIN.
src/components/valuation/PredictionResult.tsx:31:        <CardTitle>Prediction Results</CardTitle>
src/components/valuation/NicbVinCheck.tsx:16:        <p>A VIN (Vehicle Identification Number) is a unique 17-character code that identifies your vehicle.</p>
src/components/valuation/NicbVinCheck.tsx:55:            NICB Check Results
src/components/valuation/NicbVinCheck.tsx:105:          <Label htmlFor="vin">Vehicle Identification Number (VIN)</Label>
src/components/valuation/NicbVinCheck.tsx:110:            placeholder="Enter 17-character VIN"
src/components/valuation/NicbVinCheck.tsx:125:              Checking VIN...
src/components/valuation/NicbVinCheck.tsx:128:            "Check VIN"
src/components/valuation/PhotoUploadAndScore.tsx:58:                  <li>‚Ä¢ VIN plate/sticker</li>
src/components/valuation/AuditAndSourcesAccordion.tsx:5:import { EnhancedValuationResult } from '@/types/valuation';
src/components/valuation/AuditAndSourcesAccordion.tsx:9:  result: EnhancedValuationResult;
src/components/valuation/types.ts:2:export interface ValuationResultProps {
src/components/valuation/types.ts:4:  isManualValuation?: boolean;
src/components/valuation/types.ts:5:  manualValuationData?: any;
src/components/valuation/types.ts:8:export interface ValuationData {
src/components/valuation/PremiumPdfSection.tsx:8:import { ReportData, downloadValuationPdf } from '@/utils/pdfService';
src/components/valuation/PremiumPdfSection.tsx:47:      await downloadValuationPdf(reportData);
src/components/valuation/PremiumPdfSection.tsx:48:      toast.success('PDF downloaded successfully!');
src/components/valuation/PremiumPdfSection.tsx:50:      console.error('PDF download failed:', error);
src/components/valuation/PremiumPdfSection.tsx:51:      toast.error('Failed to download PDF');
src/components/valuation/PremiumPdfSection.tsx:95:          <h3 className="text-lg font-semibold text-orange-900">Premium PDF Report</h3>
src/components/valuation/PremiumPdfSection.tsx:97:            Upgrade to access detailed PDF reports with market analysis and dealer notifications.
src/components/valuation/PremiumPdfSection.tsx:125:            {isDownloading ? 'Generating PDF...' : 'Download Detailed Report'}
src/components/valuation/PremiumPdfSection.tsx:162:          <p>‚Ä¢ Professional PDF formatting</p>
src/components/valuation/enhanced-followup/EnhancedVehicleCard.tsx:73:              {/* VIN */}
src/components/valuation/enhanced-followup/EnhancedVehicleCard.tsx:80:                    <span className="text-sm font-medium text-gray-500">VIN</span>
src/components/valuation/enhanced-followup/EnhancedVehicleCard.tsx:186:              Continue to Enhanced Valuation Assessment
src/components/valuation/NhtsaRecalls.tsx:129:        {/* Valuation impact tip */}
src/components/valuation/MissingInfoPrompt.tsx:15:  onCompleteValuation?: () => void;
src/components/valuation/MissingInfoPrompt.tsx:57:  onCompleteValuation,
src/components/valuation/MissingInfoPrompt.tsx:69:              <p className="font-semibold text-success">Valuation Complete</p>
src/components/valuation/MissingInfoPrompt.tsx:74:            {onCompleteValuation && (
src/components/valuation/MissingInfoPrompt.tsx:76:                onClick={onCompleteValuation}
src/components/valuation/MissingInfoPrompt.tsx:80:                View Final Valuation
src/components/valuation/MissingInfoPrompt.tsx:149:            onClick={onCompleteValuation}
src/components/valuation/MissingInfoPrompt.tsx:153:            Complete My Valuation Now
src/components/valuation/ValuationResultCard.tsx:47:interface ValuationResultCardProps {
src/components/valuation/ValuationResultCard.tsx:54:export function ValuationResultCard({ result, onDownloadPdf, onShareReport, vin = 'unknown' }: ValuationResultCardProps) {
src/components/valuation/ValuationResultCard.tsx:140:              Results may be less accurate than usual.
src/components/valuation/ValuationResultCard.tsx:145:        {/* Valuation Summary */}
src/components/valuation/ValuationResultCard.tsx:151:                Valuation Summary
src/components/valuation/ValuationResultCard.tsx:486:                Download PDF
src/components/valuation/header/index.ts:2:export * from "./UnifiedValuationHeader";
src/components/valuation/header/index.ts:3:export { default as ValuationHeader } from "./UnifiedValuationHeader";
src/components/valuation/header/index.ts:4:export { default as UnifiedValuationHeader } from "./UnifiedValuationHeader";
src/components/valuation/header/UnifiedValuationHeader.tsx:18:interface UnifiedValuationHeaderProps {
src/components/valuation/header/UnifiedValuationHeader.tsx:40:export function UnifiedValuationHeader({
src/components/valuation/header/UnifiedValuationHeader.tsx:53:}: UnifiedValuationHeaderProps) {
src/components/valuation/header/UnifiedValuationHeader.tsx:139:                  <span className="hidden sm:inline">PDF</span>
src/components/valuation/header/UnifiedValuationHeader.tsx:187:export default UnifiedValuationHeader;
src/components/valuation/header/types.ts:1:export interface ValuationHeaderProps {
src/components/valuation/ValuationAuditTrail.tsx:17:interface ValuationAuditTrailProps {
src/components/valuation/ValuationAuditTrail.tsx:22:export const ValuationAuditTrail: React.FC<ValuationAuditTrailProps> = ({
src/components/valuation/ValuationAuditTrail.tsx:55:          Valuation Audit Trail
src/components/valuation/ValuationAuditTrail.tsx:114:export default ValuationAuditTrail;
src/utils/auctionFetcher.ts:44:export async function getAuctionResultsByVin(vin: string): Promise<AuctionResult[]> {
src/utils/auctionFetcher.ts:62:    // First check if we already have data for this VIN
src/utils/auctionFetcher.ts:104:    console.log('Fetching Bid.Cars data for VIN:', vin);
src/utils/auctionFetcher.ts:125:    console.log('Fetching AutoAuctions.io data for VIN:', vin);
src/utils/confidence-documentation.md:14:### 1. VIN Accuracy (30% weight)
src/utils/confidence-documentation.md:15:- **Valid VIN**: A valid 17-character VIN increases confidence
src/utils/confidence-documentation.md:16:- **Exact VIN Match**: Finding an exact match for the VIN in market listings provides the highest confidence
src/utils/confidence-documentation.md:17:- **VIN Decoding**: Successfully decoding make/model/year from VIN increases confidence
src/utils/confidence-documentation.md:22:- **Exact Match**: Finding the exact vehicle (by VIN) in listings provides highest confidence
src/utils/confidence-documentation.md:46:1. Providing a valid VIN
src/utils/confidenceCalculator.ts:20:  // VIN and ZIP provide strong location and vehicle specific data
src/components/valuation/valuation-complete/ValuationComplete.tsx:5:interface ValuationCompleteProps {
src/components/valuation/valuation-complete/ValuationComplete.tsx:9:export const ValuationComplete: React.FC<ValuationCompleteProps> = ({ estimatedValue }) => {
src/components/valuation/valuation-complete/ValuationComplete.tsx:13:        <h2 className="text-2xl font-bold mb-4">Valuation Complete!</h2>
src/components/valuation/valuation-complete/ValuationComplete.tsx:22:export default ValuationComplete;
src/components/valuation/DrivingBehaviorInput.tsx:93:                <p className="font-medium">How This Affects Your Valuation</p>
src/components/valuation/ConfidenceExplanationBadge.tsx:51:      suggestions.push('VIN decoding may improve accuracy');
src/components/valuation/QrCodeDownload.tsx:14:  title = "Scan to view PDF report", 
src/components/valuation/enterprise/EnterpriseValuationPanel.tsx:11:interface ValuationRequest {
src/components/valuation/enterprise/EnterpriseValuationPanel.tsx:22:interface EnterpriseValuationPanelProps {
src/components/valuation/enterprise/EnterpriseValuationPanel.tsx:23:  vehicleData: ValuationRequest;
src/components/valuation/enterprise/EnterpriseValuationPanel.tsx:37:interface ValuationResult {
src/components/valuation/enterprise/EnterpriseValuationPanel.tsx:46:export const EnterpriseValuationPanel = ({ vehicleData }: EnterpriseValuationPanelProps) => {
src/components/valuation/enterprise/EnterpriseValuationPanel.tsx:86:      await loadResults(newRequestId);
src/components/valuation/enterprise/EnterpriseValuationPanel.tsx:106:  const loadResults = async (id: string) => {
src/components/valuation/enterprise/EnterpriseValuationPanel.tsx:208:      {/* Results */}
src/utils/valuation/aggregateValuationSources.ts:2:import { LegacyValuationResult } from "@/types/valuation";
src/utils/valuation/aggregateValuationSources.ts:3:import { EnhancedValuationParams } from "@/utils/valuation/types";
src/utils/valuation/aggregateValuationSources.ts:14:export async function aggregateValuationSources(
src/utils/valuation/aggregateValuationSources.ts:15:  params: EnhancedValuationParams,
src/utils/valuation/aggregateValuationSources.ts:17:): Promise<LegacyValuationResult> {
src/utils/valuation/aggregateValuationSources.ts:91:function estimateBaseValue(params: EnhancedValuationParams): number {
src/utils/valuation/aggregateValuationSources.ts:139:function calculateConfidenceScore(params: EnhancedValuationParams, sources: EnrichedDataSource[]): number {
src/utils/valuation/progressTracker.ts:2:export interface ValuationStep {
src/utils/valuation/progressTracker.ts:21:export class ValuationProgressTracker {
src/utils/valuation/progressTracker.ts:22:  private steps: ValuationStep[] = [
src/utils/valuation/progressTracker.ts:23:    { id: 'vin_decode', name: 'VIN Decode & MSRP', weight: 5, status: 'pending' },
src/utils/valuation/progressTracker.ts:34:  private listeners: ((progress: number, currentStep: ValuationStep) => void)[] = [];
src/utils/valuation/progressTracker.ts:36:  onProgress(callback: (progress: number, currentStep: ValuationStep) => void) {
src/utils/valuation/progressTracker.ts:70:  private notifyProgress(currentStep: ValuationStep) {
src/utils/valuation/progressTracker.ts:115:    steps: ['processValuation()', 'Adjustment modules', 'Type safety']
src/utils/valuation/progressTracker.ts:120:    description: 'EIA fuel costs, OpenAI market search, VIN decode',
src/utils/valuation/progressTracker.ts:122:    steps: ['EIA API', 'OpenAI integration', 'VIN decoder', 'Error handling']
src/utils/valuation/progressTracker.ts:150:    steps: ['Unit tests', 'Integration tests', 'Real VIN testing', 'Performance optimization']
src/components/valuation/ConfidenceScore.tsx:77:          Valuation based on limited market data
src/components/valuation/CorrectionTrigger.tsx:5:import { useCorrectedValuation } from '@/hooks/useCorrectedValuation';
src/components/valuation/CorrectionTrigger.tsx:28:  const { runCorrection, isRunning, results } = useCorrectedValuation();
src/components/valuation/CorrectionTrigger.tsx:32:      const correctionResults = await runCorrection({
src/components/valuation/CorrectionTrigger.tsx:43:        onCorrectionComplete(correctionResults);
src/components/valuation/CorrectionTrigger.tsx:54:        <span className="text-sm font-medium">Valuation Corrected</span>
src/components/valuation/CorrectionTrigger.tsx:75:          Force Correct Valuation
src/utils/valuation/updateValuationData.ts:5: * @param valuationId Valuation ID
src/utils/valuation/updateValuationData.ts:9:export async function updateValuationDataField(
src/utils/valuation/updateValuationData.ts:45:    console.error("Error in updateValuationDataField:", err);
src/utils/valuation/updateValuationData.ts:52: * @param valuationId Valuation ID
src/utils/valuation/updateValuationData.ts:55:export async function updateValuationDataFields(
src/utils/valuation/updateValuationData.ts:85:    console.error("Error in updateValuationDataFields:", err);
src/utils/valuation/updateValuationData.ts:92: * @param valuationId Valuation ID
src/utils/valuation/updateValuationData.ts:96:export async function getValuationDataField<T>(
src/utils/valuation/updateValuationData.ts:121:    console.error("Error in getValuationDataField:", err);
src/utils/valuation/emergencyFallbackUtils.ts:356:export async function trackValuationFallback(
src/utils/valuation/validateUnifiedPipeline.ts:1:// Final validation script for unified MarketListing type across ResultsPage and PDF Export
src/utils/valuation/validateUnifiedPipeline.ts:72:  console.log('\nüìÑ Step 3: Test PDF export compatibility...');
src/utils/valuation/validateUnifiedPipeline.ts:74:  // Validation 3: PDF export can process all normalized listings
src/utils/valuation/validateUnifiedPipeline.ts:76:    // Simulate PDF field access patterns
src/utils/valuation/validateUnifiedPipeline.ts:84:  console.log('‚úÖ PDF compatibility validation:', pdfCompatible ? 'PASSED' : 'FAILED');
src/utils/valuation/validateUnifiedPipeline.ts:107:  console.log(`üìÑ PDF Compatibility: ${pdfCompatible ? 'PASSED' : 'FAILED'}`);
src/utils/valuation/validateUnifiedPipeline.ts:113:    console.log('‚úÖ ResultsPage.tsx properly displays normalized listings');
src/utils/valuation/validateUnifiedPipeline.ts:114:    console.log('‚úÖ PDF export correctly processes canonical MarketListing fields');
src/utils/valuation/rules/types.ts:36:export type ValuationData = RulesEngineInput & {
src/utils/valuation/rules/types.ts:66:  calculate(data: ValuationData): Adjustment | null;
src/utils/valuation/generateConfidenceExplanation.ts:8:    return `High confidence valuation based on ${marketListingsCount} market listings from ${sources.length} sources${exactVinMatch ? ' with exact VIN match' : ''}.`;
src/utils/valuation/generateConfidenceExplanation.ts:10:    return `Good confidence valuation with ${marketListingsCount} comparable listings${exactVinMatch ? ' including exact VIN match' : ''}.`;
src/utils/valuation/testResultsAndPdfIntegration.ts:1:// Integration test for ResultsPage and PDF Export with unified MarketListing type
src/utils/valuation/testResultsAndPdfIntegration.ts:3:import { EnhancedValuationResult } from '@/types/valuation';
src/utils/valuation/testResultsAndPdfIntegration.ts:7: * Test that ResultsPage displays and PDF export handles unified MarketListing correctly
src/utils/valuation/testResultsAndPdfIntegration.ts:9:export function testResultsPageAndPdfIntegration() {
src/utils/valuation/testResultsAndPdfIntegration.ts:10:  console.log('üß™ Testing ResultsPage and PDF Export Integration');
src/utils/valuation/testResultsAndPdfIntegration.ts:13:  const mockEnhancedResult: EnhancedValuationResult = {
src/utils/valuation/testResultsAndPdfIntegration.ts:64:    // Test 1: Validate normalization for ResultsPage display
src/utils/valuation/testResultsAndPdfIntegration.ts:65:    console.log('\nüìä Testing ResultsPage listing normalization...');
src/utils/valuation/testResultsAndPdfIntegration.ts:91:    // Test 3: Test PDF export data preparation
src/utils/valuation/testResultsAndPdfIntegration.ts:92:    console.log('\nüìÑ Testing PDF Export data preparation...');
src/utils/valuation/testResultsAndPdfIntegration.ts:102:    const mockValuationData = {
src/utils/valuation/testResultsAndPdfIntegration.ts:114:      ...mockValuationData,
src/utils/valuation/testResultsAndPdfIntegration.ts:118:    console.log('‚úÖ PDF Report Data prepared:', {
src/utils/valuation/testResultsAndPdfIntegration.ts:126:    // Test 4: Validate PDF listings are properly typed
src/utils/valuation/testResultsAndPdfIntegration.ts:139:    console.log('üìÑ PDF Listings Validation:', pdfListingsValid ? 'PASSED' : 'FAILED');
src/utils/valuation/testResultsAndPdfIntegration.ts:156:    console.log('\nüéØ Integration Test Results:', {
src/utils/valuation/testResultsAndPdfIntegration.ts:164:      console.log('‚úÖ ResultsPage and PDF Export integration with unified MarketListing type: SUCCESS');
src/utils/valuation/testResultsAndPdfIntegration.ts:167:      console.log('‚ùå ResultsPage and PDF Export integration: FAILED');
src/utils/valuation/legacyConverter.ts:2:import type { UnifiedValuationResult } from '@/types/valuation';
src/utils/valuation/legacyConverter.ts:4:interface LegacyValuationData {
src/utils/valuation/legacyConverter.ts:37:  valuationData: LegacyValuationData
src/utils/valuation/legacyConverter.ts:38:): UnifiedValuationResult {
src/utils/valuation/photoUtils.ts:36:export async function getValuationPhotos(valuationId: string): Promise<any[]> {
src/utils/valuation/photoUtils.ts:59:export async function updateValuationWithPhotoMetadata(
src/components/valuation/condition/ValuationFactorTransmission.tsx:7:interface ValuationFactorTransmissionProps {
src/components/valuation/condition/ValuationFactorTransmission.tsx:12:export function ValuationFactorTransmission({ value, onChange }: ValuationFactorTransmissionProps) {
src/utils/valuation/confidenceExplainer.ts:41:  // VIN availability
src/utils/valuation/confidenceExplainer.ts:44:      reasons.push('Exact VIN match found in market listings');
src/utils/valuation/confidenceExplainer.ts:46:      reasons.push('VIN provided for detailed analysis');
src/utils/valuation/confidenceExplainer.ts:49:    reasons.push('No VIN provided - estimates based on general vehicle data');
src/utils/valuation/confidenceExplainer.ts:50:    suggestions.push('Provide VIN for more accurate valuation');
src/components/valuation/condition/ValuationFactorInterior.tsx:7:interface ValuationFactorInteriorProps {
src/components/valuation/condition/ValuationFactorInterior.tsx:12:export function ValuationFactorInterior({ value, onChange }: ValuationFactorInteriorProps) {
src/components/valuation/condition/ValuationFactorEngine.tsx:7:interface ValuationFactorEngineProps {
src/components/valuation/condition/ValuationFactorEngine.tsx:12:export function ValuationFactorEngine({ value, onChange }: ValuationFactorEngineProps) {
src/components/valuation/condition/ValuationFactorPaint.tsx:7:interface ValuationFactorPaintProps {
src/components/valuation/condition/ValuationFactorPaint.tsx:12:export function ValuationFactorPaint({ value, onChange }: ValuationFactorPaintProps) {
src/utils/valuation/testMarketSearchNormalization.ts:72:    console.log('\nüéØ Normalization Test Results:', {
src/components/valuation/condition/ValuationFactorTires.tsx:7:interface ValuationFactorTiresProps {
src/components/valuation/condition/ValuationFactorTires.tsx:12:export function ValuationFactorTires({ value, onChange }: ValuationFactorTiresProps) {
src/utils/valuation/missingFieldAnalyzer.ts:1:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/utils/valuation/missingFieldAnalyzer.ts:149:  formData: FollowUpAnswers,
src/utils/valuation/missingFieldAnalyzer.ts:279:    message += `**Tip:** Uploading 3‚Äì8 clear photos (interior, exterior, VIN plate) enables our AI condition scoring ‚Äî one of the most accurate in the industry.\n\n`;
src/utils/valuation/calculateUnifiedConfidence.ts:32:  // Exact VIN match bonus
src/utils/valuation/calculateUnifiedConfidence.ts:35:    console.log('üéØ Exact VIN match bonus: +25 points');
src/utils/valuation/types.ts:1:// Define the base ValuationAdjustment interface
src/utils/valuation/types.ts:2:export interface ValuationAdjustment {
src/utils/valuation/types.ts:13:// Define ValuationParams interface
src/utils/valuation/types.ts:14:export interface ValuationParams {
src/utils/valuation/types.ts:38:// Define ValuationResult interface
src/utils/valuation/types.ts:39:export interface ValuationResult {
src/utils/valuation/types.ts:46:  adjustments: ValuationAdjustment[];
src/utils/valuation/types.ts:66:// Define EnhancedValuationParams interface
src/utils/valuation/types.ts:67:export interface EnhancedValuationParams extends ValuationParams {
src/utils/valuation/types.ts:87:// Define FinalValuationResult interface
src/utils/valuation/types.ts:88:export interface FinalValuationResult extends ValuationResult {
src/utils/valuation/types.ts:105:// Define ValuationInput interface for compatibility
src/utils/valuation/types.ts:106:export interface ValuationInput {
src/utils/valuation/validateUIResultsDisplay.ts:2: * Prompt 2.4 Validation: UI Results Page Display Validation
src/utils/valuation/validateUIResultsDisplay.ts:4: * Validates that ResultsPage and child components correctly render:
src/utils/valuation/validateUIResultsDisplay.ts:10: * - Share & PDF export options
src/utils/valuation/validateUIResultsDisplay.ts:31:    description: "Should show listings, high confidence, no fallback banner, working PDF/share"
src/utils/valuation/validateUIResultsDisplay.ts:47:  // 1. Valuation Output Rendering
src/utils/valuation/validateUIResultsDisplay.ts:66:  // 4. PDF + Share Actions
src/utils/valuation/validateUIResultsDisplay.ts:81:export async function validateUIResultsDisplay(vin: string): Promise<UIValidationResult> {
src/utils/valuation/validateUIResultsDisplay.ts:82:  console.log(`üîç [Prompt 2.4] Validating UI Results Display for VIN: ${vin}`);
src/utils/valuation/validateUIResultsDisplay.ts:86:    throw new Error(`No test case defined for VIN: ${vin}`);
src/utils/valuation/validateUIResultsDisplay.ts:127:    console.log("‚úÖ 1. Validating Valuation Output Rendering...");
src/utils/valuation/validateUIResultsDisplay.ts:129:    // Check if ValuationSummary component would receive proper props
src/utils/valuation/validateUIResultsDisplay.ts:130:    const mockValuationData = {
src/utils/valuation/validateUIResultsDisplay.ts:152:    result.estimatedValueShown = mockValuationData.estimatedValue > 0;
src/utils/valuation/validateUIResultsDisplay.ts:153:    result.confidenceScoreShown = mockValuationData.confidenceScore > 0;
src/utils/valuation/validateUIResultsDisplay.ts:154:    result.badgeDisplayed = mockValuationData.confidenceScore >= 85 || mockValuationData.marketListings.length > 0;
src/utils/valuation/validateUIResultsDisplay.ts:155:    result.fallbackWarningShown = mockValuationData.isUsingFallbackMethod;
src/utils/valuation/validateUIResultsDisplay.ts:161:    result.listingsCount = mockValuationData.marketListings.length;
src/utils/valuation/validateUIResultsDisplay.ts:162:    result.listingsDisplayCorrectly = mockValuationData.marketListings.length > 0 ? 
src/utils/valuation/validateUIResultsDisplay.ts:163:      mockValuationData.marketListings.every(l => l.price && l.source) : true;
src/utils/valuation/validateUIResultsDisplay.ts:164:    result.emptyStateHandled = mockValuationData.marketListings.length === 0;
src/utils/valuation/validateUIResultsDisplay.ts:170:    result.confidenceColorCorrect = validateConfidenceColor(mockValuationData.confidenceScore);
src/utils/valuation/validateUIResultsDisplay.ts:172:    result.fallbackDisclosureShown = mockValuationData.isUsingFallbackMethod && mockValuationData.marketListings.length === 0;
src/utils/valuation/validateUIResultsDisplay.ts:174:    // 4. VALIDATE PDF + SHARE ACTIONS
src/utils/valuation/validateUIResultsDisplay.ts:175:    console.log("‚úÖ 4. Validating PDF + Share Actions...");
src/utils/valuation/validateUIResultsDisplay.ts:177:    result.pdfDownloadAvailable = true; // ResultsPage has download button
src/utils/valuation/validateUIResultsDisplay.ts:178:    result.shareButtonAvailable = true; // ResultsPage has share button  
src/utils/valuation/validateUIResultsDisplay.ts:184:    result.errorHandling = true; // ResultsPage has error state handling
src/utils/valuation/validateUIResultsDisplay.ts:185:    result.loadingStateHandled = true; // ResultsPage has loading state
src/utils/valuation/validateUIResultsDisplay.ts:212:    if (!result.valuationDisplayed) result.issues.push("Valuation data not displayed");
src/utils/valuation/validateUIResultsDisplay.ts:223:    if (!result.pdfDownloadAvailable) result.issues.push("PDF download not available");
src/utils/valuation/validateUIResultsDisplay.ts:231:    console.log(`   VIN: ${result.vin}`);
src/utils/valuation/validateUIResultsDisplay.ts:240:    console.log("üìã Detailed Results:");
src/utils/valuation/validateUIResultsDisplay.ts:241:    console.log(`   1. Valuation Output: ${result.valuationDisplayed ? '‚úÖ' : '‚ùå'}`);
src/utils/valuation/validateUIResultsDisplay.ts:244:    console.log(`   4. PDF/Share Actions: ${result.pdfDownloadAvailable && result.shareButtonAvailable ? '‚úÖ' : '‚ùå'}`);
src/utils/valuation/validateUIResultsDisplay.ts:268:  console.log("üöÄ [Prompt 2.4] Running ALL UI Results Display Validation Tests");
src/utils/valuation/validateUIResultsDisplay.ts:274:    const result = await validateUIResultsDisplay(testCase.vin);
src/utils/valuation/validateUIResultsDisplay.ts:299:  console.log(`   ‚úÖ PDF and share features are live and interactive: ${results.every(r => r.pdfDownloadAvailable && r.shareButtonAvailable)}`);
src/utils/valuation/validatePDFShareFunctionality.ts:2: * Prompt 2.5 Validation: PDF Export & Share Link Verification
src/utils/valuation/validatePDFShareFunctionality.ts:4: * Audits and tests the PDF generation, sharing logic, QR code routing, 
src/utils/valuation/validatePDFShareFunctionality.ts:8:import type { UnifiedValuationResult } from '@/types/valuation';
src/utils/valuation/validatePDFShareFunctionality.ts:9:import { generateValuationPdf } from '@/utils/pdf/generateValuationPdf';
src/utils/valuation/validatePDFShareFunctionality.ts:11:export interface PDFShareTestCase {
src/utils/valuation/validatePDFShareFunctionality.ts:20:export const PDF_SHARE_TEST_CASES: PDFShareTestCase[] = [
src/utils/valuation/validatePDFShareFunctionality.ts:22:    name: "Full Working Valuation - Ford F-150",
src/utils/valuation/validatePDFShareFunctionality.ts:27:    description: "PDF includes listings, value, confidence score; QR code scans to correct result page; Share buttons work with real data"
src/utils/valuation/validatePDFShareFunctionality.ts:30:    name: "Fallback Valuation - Nissan Altima", 
src/utils/valuation/validatePDFShareFunctionality.ts:35:    description: "PDF marks fallback; No listings shown; Confidence score capped; QR and Share still work"
src/utils/valuation/validatePDFShareFunctionality.ts:39:export interface PDFShareValidationResult {
src/utils/valuation/validatePDFShareFunctionality.ts:43:  // 1. PDF Generation
src/utils/valuation/validatePDFShareFunctionality.ts:48:  pdfContainsValuationMethod: boolean;
src/utils/valuation/validatePDFShareFunctionality.ts:56:  shareUrlContainsValuationId: boolean;
src/utils/valuation/validatePDFShareFunctionality.ts:85:export async function validatePDFShareFunctionality(vin: string): Promise<PDFShareValidationResult> {
src/utils/valuation/validatePDFShareFunctionality.ts:86:  console.log(`üîç [Prompt 2.5] Validating PDF Export & Share for VIN: ${vin}`);
src/utils/valuation/validatePDFShareFunctionality.ts:88:  const testCase = PDF_SHARE_TEST_CASES.find(tc => tc.vin === vin);
src/utils/valuation/validatePDFShareFunctionality.ts:90:    throw new Error(`No test case defined for VIN: ${vin}`);
src/utils/valuation/validatePDFShareFunctionality.ts:93:  const result: PDFShareValidationResult = {
src/utils/valuation/validatePDFShareFunctionality.ts:102:    pdfContainsValuationMethod: false,
src/utils/valuation/validatePDFShareFunctionality.ts:109:    shareUrlContainsValuationId: false,
src/utils/valuation/validatePDFShareFunctionality.ts:136:    const mockValuationResult: UnifiedValuationResult = {
src/utils/valuation/validatePDFShareFunctionality.ts:193:    // 1. VALIDATE PDF GENERATION
src/utils/valuation/validatePDFShareFunctionality.ts:194:    console.log("‚úÖ 1. Validating PDF Generation...");
src/utils/valuation/validatePDFShareFunctionality.ts:197:      const pdfBlob = await generateValuationPdf(mockValuationResult);
src/utils/valuation/validatePDFShareFunctionality.ts:199:      result.pdfContainsEstimatedValue = true; // PDF function includes finalValue
src/utils/valuation/validatePDFShareFunctionality.ts:200:      result.pdfContainsConfidenceScore = true; // PDF function includes confidenceScore
src/utils/valuation/validatePDFShareFunctionality.ts:201:      result.pdfContainsListingSummary = mockValuationResult.listingCount > 0;
src/utils/valuation/validatePDFShareFunctionality.ts:202:      result.pdfContainsValuationMethod = true; // PDF includes sources
src/utils/valuation/validatePDFShareFunctionality.ts:204:      result.pdfFormattingProfessional = true; // Professional styling in PDF
src/utils/valuation/validatePDFShareFunctionality.ts:205:      result.pdfContainsTimestamp = true; // PDF includes timestamp
src/utils/valuation/validatePDFShareFunctionality.ts:206:      result.pdfContainsVin = true; // VIN included in vehicle info
src/utils/valuation/validatePDFShareFunctionality.ts:208:      console.log(`   PDF Generated: ${pdfBlob.size} bytes`);
src/utils/valuation/validatePDFShareFunctionality.ts:210:      console.error("   PDF Generation failed:", error);
src/utils/valuation/validatePDFShareFunctionality.ts:211:      result.issues.push("PDF generation failed");
src/utils/valuation/validatePDFShareFunctionality.ts:218:    const shareUrl = `${baseUrl}/results/${mockValuationResult.id}`;
src/utils/valuation/validatePDFShareFunctionality.ts:219:    const shareText = `Check out my ${mockValuationResult.vehicle.year} ${mockValuationResult.vehicle.make} ${mockValuationResult.vehicle.model} valuation: $${mockValuationResult.finalValue.toLocaleString()}`;
src/utils/valuation/validatePDFShareFunctionality.ts:221:    result.shareUrlConstructed = shareUrl.includes('/results/') && shareUrl.includes(mockValuationResult.id);
src/utils/valuation/validatePDFShareFunctionality.ts:222:    result.shareUrlContainsValuationId = shareUrl.includes(mockValuationResult.id);
src/utils/valuation/validatePDFShareFunctionality.ts:226:    result.shareContentPreFilled = shareText.includes(mockValuationResult.vehicle.make) && shareText.includes('$');
src/utils/valuation/validatePDFShareFunctionality.ts:250:    result.fallbackPdfExplanation = testCase.expectedFallback ? true : true; // PDF includes explanation
src/utils/valuation/validatePDFShareFunctionality.ts:261:      result.pdfContainsValuationMethod,
src/utils/valuation/validatePDFShareFunctionality.ts:266:      result.shareUrlContainsValuationId,
src/utils/valuation/validatePDFShareFunctionality.ts:289:    if (!result.pdfGenerationWorks) result.issues.push("PDF generation failed");
src/utils/valuation/validatePDFShareFunctionality.ts:290:    if (!result.pdfContainsEstimatedValue) result.issues.push("PDF missing estimated value");
src/utils/valuation/validatePDFShareFunctionality.ts:294:      result.issues.push("PDF missing fallback warning when expected");
src/utils/valuation/validatePDFShareFunctionality.ts:300:    console.log("üìä PDF & SHARE VALIDATION RESULTS:");
src/utils/valuation/validatePDFShareFunctionality.ts:302:    console.log(`   VIN: ${result.vin}`);
src/utils/valuation/validatePDFShareFunctionality.ts:311:    console.log("üìã Detailed Results:");
src/utils/valuation/validatePDFShareFunctionality.ts:312:    console.log(`   1. PDF Generation: ${result.pdfGenerationWorks ? '‚úÖ' : '‚ùå'}`);
src/utils/valuation/validatePDFShareFunctionality.ts:321:    console.error("‚ùå PDF & Share Validation failed:", error);
src/utils/valuation/validatePDFShareFunctionality.ts:328:export async function validateAllPDFShareTestCases(): Promise<PDFShareValidationResult[]> {
src/utils/valuation/validatePDFShareFunctionality.ts:329:  console.log("üöÄ [Prompt 2.5] Running ALL PDF Export & Share Validation Tests");
src/utils/valuation/validatePDFShareFunctionality.ts:331:  const results: PDFShareValidationResult[] = [];
src/utils/valuation/validatePDFShareFunctionality.ts:333:  for (const testCase of PDF_SHARE_TEST_CASES) {
src/utils/valuation/validatePDFShareFunctionality.ts:335:    const result = await validatePDFShareFunctionality(testCase.vin);
src/utils/valuation/validatePDFShareFunctionality.ts:357:  console.log(`   ‚úÖ PDF renders valuation clearly and professionally: ${results.every(r => r.pdfGenerationWorks && r.pdfFormattingProfessional)}`);
src/utils/valuation/validatePDFShareFunctionality.ts:360:  console.log(`   ‚úÖ Valuation data consistent across UI, PDF, and share: ${results.every(r => r.shareDataMatches)}`);
src/utils/valuation/quickValidateMarketSearch.ts:41:    console.log('‚úÖ Market Search Agent Validation Results:', {
src/components/valuation/condition/ValuationFactorExterior.tsx:7:interface ValuationFactorExteriorProps {
src/components/valuation/condition/ValuationFactorExterior.tsx:12:export function ValuationFactorExterior({ value, onChange }: ValuationFactorExteriorProps) {
src/utils/valuation/validateMarketListingIntegration.ts:134:  // Test exact VIN matches
src/utils/valuation/validateMarketListingIntegration.ts:136:  console.log(`üéØ Found ${exactMatches.length} exact VIN matches`);
src/utils/valuation/examples.ts:2:  EnhancedValuationParams,
src/utils/valuation/examples.ts:3:  FinalValuationResult,
src/utils/valuation/examples.ts:4:  ValuationParams,
src/utils/valuation/examples.ts:5:  ValuationResult,
src/utils/valuation/examples.ts:23:// Example ValuationParams object
src/utils/valuation/examples.ts:24:export const valuationParams: ValuationParams = {
src/utils/valuation/examples.ts:35:// Example ValuationResult object
src/utils/valuation/examples.ts:36:export const valuationResult: ValuationResult = {
src/utils/valuation/examples.ts:86:// Example EnhancedValuationParams object
src/utils/valuation/examples.ts:87:export const enhancedValuationParams: EnhancedValuationParams = {
src/utils/valuation/examples.ts:109:// Example FinalValuationResult object
src/utils/valuation/examples.ts:110:export const finalValuationResult: FinalValuationResult = {
src/components/valuation/condition/ConditionEvaluationGrid.tsx:13:  useValuationFactors,
src/components/valuation/condition/ConditionEvaluationGrid.tsx:14:} from "@/hooks/useValuationFactors";
src/components/valuation/condition/ConditionEvaluationGrid.tsx:34:  const { categoryFactors, isLoading, error } = useValuationFactors();
src/utils/ain/generateSummaryForPdf.ts:41:  if (reportData.auctionResults && reportData.auctionResults.length > 0) {
src/utils/ain/generateSummaryForPdf.ts:42:    const auctionCount = reportData.auctionResults.length;
src/utils/publicShareService.ts:3:export interface SharedValuation {
src/utils/publicShareService.ts:17:export async function getValuationByToken(token: string) {
src/utils/publicShareService.ts:68:      } as SharedValuation
src/utils/publicShareService.ts:69:      : data.valuations as SharedValuation;
src/utils/publicShareService.ts:78:    console.error("Error in getValuationByToken:", err);
src/utils/confidenceRules.ts:6:    vin: 25, // VIN presence adds 25 points
src/utils/unifiedConfidenceCalculator.ts:81:  // VIN Accuracy calculation (0-100)
src/utils/unifiedConfidenceCalculator.ts:83:    breakdown.vinAccuracy = 85; // Base VIN presence
src/utils/unifiedConfidenceCalculator.ts:85:    // Exact VIN match is a strong positive
src/utils/unifiedConfidenceCalculator.ts:89:    // Deduct if basic vehicle data doesn't match VIN
src/utils/unifiedConfidenceCalculator.ts:95:    breakdown.recommendations.push("Enter a valid 17-character VIN for improved accuracy");
src/utils/unifiedConfidenceCalculator.ts:111:    // Add additional value for exact VIN match
src/utils/unifiedConfidenceCalculator.ts:197:      explanation += " with exact VIN match in our market database.";
src/utils/unifiedConfidenceCalculator.ts:219:    explanation += " Exact VIN match provides high-quality market data.";
src/utils/followUpDataHelpers.ts:3:import { FollowUpAnswers } from '@/types/follow-up-answers';
src/utils/followUpDataHelpers.ts:5:export function getCompletionPercentage(formData: FollowUpAnswers): number {
src/utils/followUpDataHelpers.ts:14:    if (formData[field as keyof FollowUpAnswers]) {
src/utils/followUpDataHelpers.ts:21:    if (formData[field as keyof FollowUpAnswers]) {
src/utils/followUpDataHelpers.ts:49:export function shouldShowNextStep(formData: FollowUpAnswers, currentStep: number): boolean {
src/utils/followUpDataHelpers.ts:64:export function getStepValidation(formData: FollowUpAnswers): Record<number, boolean> {
src/utils/followUpDataHelpers.ts:74:export function calculateAdjustments(formData: FollowUpAnswers): Array<{factor: string, impact: number, description: string}> {
src/utils/followUpDataHelpers.ts:117:export function calculateCompletionPercentage(formData: FollowUpAnswers): number {
src/utils/followUpDataHelpers.ts:121:export function validateFormData(formData: FollowUpAnswers): boolean {
src/utils/followUpDataHelpers.ts:125:export function transformForValuation(formData: FollowUpAnswers): any {
src/utils/auditLogger.ts:6:export interface ValuationAuditEntry {
src/utils/auditLogger.ts:22:export class ValuationAuditLogger {
src/utils/auditLogger.ts:23:  private static instance: ValuationAuditLogger;
src/utils/auditLogger.ts:24:  private auditQueue: ValuationAuditEntry[] = [];
src/utils/auditLogger.ts:26:  static getInstance(): ValuationAuditLogger {
src/utils/auditLogger.ts:27:    if (!ValuationAuditLogger.instance) {
src/utils/auditLogger.ts:28:      ValuationAuditLogger.instance = new ValuationAuditLogger();
src/utils/auditLogger.ts:30:    return ValuationAuditLogger.instance;
src/utils/auditLogger.ts:36:  logValuationStep(entry: Omit<ValuationAuditEntry, 'id' | 'timestamp'>): void {
src/utils/auditLogger.ts:37:    const auditEntry: ValuationAuditEntry = {
src/utils/auditLogger.ts:46:    console.log('üîç Valuation Audit:', {
src/utils/auditLogger.ts:65:    this.logValuationStep({
src/utils/auditLogger.ts:89:    this.logValuationStep({
src/utils/auditLogger.ts:118:    this.logValuationStep({
src/utils/auditLogger.ts:142:  getAuditTrail(valuationId: string): ValuationAuditEntry[] {
src/utils/auditLogger.ts:182:export const auditLogger = ValuationAuditLogger.getInstance();
src/lib/notifications/UserValuationAlert.ts:27:          message: `${dealerName} has submitted an offer of $${offerPrice.toLocaleString()} for your vehicle (VIN: ${vin}). Log in to review and potentially accept the offer.`
src/lib/notifications/UserValuationAlert.ts:68:          message: `Great news! Your offer of $${offerPrice.toLocaleString()} for vehicle VIN: ${vin} has been accepted. Contact the owner at ${userEmail} to finalize the transaction.`
src/lib/notifications/DealerNotification.ts:4:export async function notifyDealersOfNewValuation(
src/lib/ainClient.ts:20:export async function runValuation(payload: {
src/utils/scrapers/fetchBidCarsData.ts:38:    if (!hasResult) throw new Error(`No results found on Bid.Cars for VIN: ${vin}`);
src/utils/scrapers/fetchBidCarsData.ts:81:    console.error(`‚ùå Error fetching Bid.Cars data for VIN ${vin}:`, err);
src/modules/valuation-result/MobileLayout.tsx:58:                  Get PDF
src/modules/valuation-result/hooks/useValuationPdfHelper.ts:3:import { ValuationResult } from "@/types/valuation";
src/modules/valuation-result/hooks/useValuationPdfHelper.ts:6:export interface UseValuationPdfHelperProps {
src/modules/valuation-result/hooks/useValuationPdfHelper.ts:12:export function useValuationPdfHelper({
src/modules/valuation-result/hooks/useValuationPdfHelper.ts:15:}: UseValuationPdfHelperProps) {
src/modules/valuation-result/hooks/useValuationPdfHelper.ts:20:      console.error("Cannot download PDF: No valuation data");
src/modules/valuation-result/hooks/useValuationPdfHelper.ts:27:      // Simulating PDF download for now
src/modules/valuation-result/hooks/useValuationPdfHelper.ts:29:      console.log("PDF would be downloaded for:", valuationData.id);
src/modules/valuation-result/hooks/useValuationPdfHelper.ts:31:      // In a real implementation, this would call an API to generate and download a PDF
src/modules/valuation-result/hooks/useValuationPdfHelper.ts:33:      console.error("Error downloading PDF:", error);
src/modules/valuation-result/hooks/useValuationPdfHelper.ts:45:export default useValuationPdfHelper;
src/modules/valuation-result/logic.ts:4:// ValuationData type declaration
src/modules/valuation-result/logic.ts:5:export type ValuationData = {
src/modules/valuation-result/logic.ts:53:export const useValuationLogic = (data?: ValuationData) => {
src/modules/valuation-result/sections/Breakdown.tsx:106:          <BodyM className="font-bold">Final Valuation</BodyM>
src/modules/valuation-result/types.ts:3:import { ValuationResult } from "@/types/valuation";
src/modules/valuation-result/types.ts:5:export interface ValuationContextProps {
src/modules/valuation-result/types.ts:6:  valuationData: ValuationResult | null;
src/modules/valuation-result/types.ts:18:export interface ValuationResultProps {
src/modules/valuation-result/types.ts:20:  isManualValuation?: boolean;
src/modules/valuation-result/types.ts:21:  manualValuationData?: any;
src/modules/valuation-result/types.ts:82:export interface PDFActionsProps {
src/modules/valuation-homepage/layout.tsx:12:export const ValuationHomepageLayout: React.FC<FeatureLayoutProps> = (
src/modules/valuation-homepage/layout.tsx:18:    { label: "Valuation", href: "/valuation/start" },
src/modules/valuation-homepage/layout.tsx:36:        { label: "Car Valuation", href: "/valuation" },
src/modules/valuation-homepage/layout.tsx:59:              Get Valuation
src/modules/valuation-homepage/layout.tsx:83:export default ValuationHomepageLayout;
src/modules/qa-dashboard/components/ValuationRow.tsx:32:export interface ValuationRowProps {
src/modules/qa-dashboard/components/ValuationRow.tsx:33:  valuation: Valuation;
src/modules/qa-dashboard/components/ValuationRow.tsx:36:  onGeneratePDF: (id: string) => void;
src/modules/qa-dashboard/components/ValuationRow.tsx:37:  onDownloadPDF: (id: string) => void;
src/modules/qa-dashboard/components/ValuationRow.tsx:41:export interface Valuation {
src/modules/qa-dashboard/components/ValuationRow.tsx:62:export function ValuationRow({
src/modules/qa-dashboard/components/ValuationRow.tsx:66:  onGeneratePDF,
src/modules/qa-dashboard/components/ValuationRow.tsx:67:  onDownloadPDF,
src/modules/qa-dashboard/components/ValuationRow.tsx:69:}: ValuationRowProps) {
src/modules/qa-dashboard/components/ValuationRow.tsx:136:            onClick={() => onGeneratePDF(valuation.id)}
src/modules/qa-dashboard/components/ValuationRow.tsx:137:            ariaLabel="Generate PDF"
src/modules/qa-dashboard/components/ValuationRow.tsx:139:            PDF
src/modules/qa-dashboard/components/ValuationTable.tsx:10:import { ValuationRow } from "./ValuationRow";
src/modules/qa-dashboard/components/ValuationTable.tsx:11:import { Valuation, ValuationRowProps } from "../types";
src/modules/qa-dashboard/components/ValuationTable.tsx:13:interface ValuationTableProps {
src/modules/qa-dashboard/components/ValuationTable.tsx:14:  valuations: Valuation[];
src/modules/qa-dashboard/components/ValuationTable.tsx:18:  onGeneratePDF: (id: string) => void;
src/modules/qa-dashboard/components/ValuationTable.tsx:19:  onDownloadPDF: (id: string) => void;
src/modules/qa-dashboard/components/ValuationTable.tsx:23:export function ValuationTable({
src/modules/qa-dashboard/components/ValuationTable.tsx:28:  onGeneratePDF,
src/modules/qa-dashboard/components/ValuationTable.tsx:29:  onDownloadPDF,
src/modules/qa-dashboard/components/ValuationTable.tsx:31:}: ValuationTableProps) {
src/modules/qa-dashboard/components/ValuationTable.tsx:59:            <ValuationRow
src/modules/qa-dashboard/components/ValuationTable.tsx:64:              onGeneratePDF={onGeneratePDF}
src/modules/qa-dashboard/components/ValuationTable.tsx:65:              onDownloadPDF={onDownloadPDF}
src/modules/qa-dashboard/types.ts:1:export interface Valuation {
src/modules/qa-dashboard/types.ts:22:export interface ValuationRowProps {
src/modules/qa-dashboard/types.ts:23:  valuation: Valuation;
src/modules/qa-dashboard/types.ts:26:  onGeneratePDF: (id: string) => void;
src/modules/qa-dashboard/types.ts:27:  onDownloadPDF: (id: string) => void;
src/modules/qa-dashboard/types.ts:31:export interface ValuationFilter {
src/emails/sendValuationPdfToDealer.ts:17:export async function sendValuationPdfToDealer(data: DealerEmailData): Promise<boolean> {
src/emails/sendValuationPdfToDealer.ts:26:        subject: `New Premium Valuation Report for ${data.vehicleInfo.year} ${data.vehicleInfo.make} ${data.vehicleInfo.model}`
src/emails/sendValuationPdfToDealer.ts:36:    console.log('Successfully sent PDF to dealer:', result);
src/emails/sendValuationPdfToDealer.ts:75:      sendValuationPdfToDealer({
src/types/premium-valuation.ts:84:  // Valuation results
src/types/follow-up-answers.ts:44:export interface FollowUpAnswers {
src/types/valuation-history.ts:2:export interface Valuation {
src/types/valuation-history.ts:14:export interface ValuationHistory {
src/types/valuation-history.ts:27:export interface ValuationBreakdownItem {
src/types/vehicle.ts:41:  // VIN enrichment fields
src/types/vehicle.ts:54:export interface PlateLookupInfo {
src/types/unified-lookup.ts:40:  // Valuation
src/types/unified-lookup.ts:46:  // VIN lookup
src/types/unified-lookup.ts:49:  // Plate lookup
src/types/dealer.ts:28:export interface DealerValuation {
src/types/dealer.ts:38:export interface ValuationWithCondition extends DealerValuation {
src/types/dealer.ts:42:export interface Valuation {
src/types/lookup.ts:2:export interface PlateLookupInfo {
src/types/valuation.ts:1:import { PDFFont, PDFPage, rgb } from 'pdf-lib';
src/types/valuation.ts:29:  auctionResults?: any[];
src/types/valuation.ts:62:  page: PDFPage;
src/types/valuation.ts:65:  regularFont: PDFFont;
src/types/valuation.ts:66:  boldFont: PDFFont;
src/types/valuation.ts:72:    regular: PDFFont;
src/types/valuation.ts:73:    bold: PDFFont;
src/types/valuation.ts:104:// Legacy ValuationResult interface (keeping for backward compatibility)
src/types/valuation.ts:105:export interface LegacyValuationResult {
src/types/valuation.ts:135:// Modern ValuationResult interface (aligned with API service)
src/types/valuation.ts:136:export interface ValuationResult {
src/types/valuation.ts:206:// Valuation input interface
src/types/valuation.ts:207:export interface ValuationInput {
src/types/valuation.ts:226:export interface UnifiedValuationResult {
src/types/valuation.ts:239:  adjustments: ValuationAdjustment[];
src/types/valuation.ts:311:export interface ValuationAdjustment {
src/types/valuation.ts:320:export interface EnhancedValuationResult {
src/types/valuation.ts:338:  adjustments?: ValuationAdjustment[];
src/types/valuation.ts:392:export interface SavedValuation {
src/types/valuation.ts:420:export interface ValuationPipeline {
src/types/unified.ts:14:export interface ValuationAdjustment {
src/types/unified.ts:23:export interface ValuationData {
src/types/unified.ts:29:  adjustments: ValuationAdjustment[];
